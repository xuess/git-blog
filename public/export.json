{
	"meta": {
		"exported_on": 1521706335318,
		"version": "008"
	},
	"data": {
		"posts": [
			{
				"id": "cjf28iamo0017cu7tytnt4qvr",
				"title": "node pm2使用",
				"slug": "node-npm-pm2",
				"markdown": "\n## 介绍\n\nPM2 是一个带有负载均衡功能的 Node 应用的进程管理器。\n\n当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载， PM2 是完美的。它非常适合 IaaS 结构，但不要把它用于 PaaS 方案（随后将开发 Paas 的解决方案）。\n\n### 主要特性\n\n```\n内建负载均衡（使用 Node cluster 集群模块）\n后台运行\n0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.\n具有 Ubuntu 和 CentOS 的启动脚本\n停止不稳定的进程（避免无限循环）\n控制台检测\n提供 HTTP API\n远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )\n```\n\n### 安装\n\n```\nnpm install -g pm2\n```\n\n\n#### 用法\n\n```\n$ npm install pm2 -g     # 命令行安装 pm2 \n$ pm2 start app.js -i 4  # 后台运行pm2，启动4个app.js \n                         # 也可以把'max' 参数传递给 start\n                         # 正确的进程数目依赖于Cpu的核心数目\n$ pm2 start app.js --name my-api # 命名进程\n$ pm2 list               # 显示所有进程状态\n$ pm2 monit              # 监视所有进程\n$ pm2 logs               # 显示所有进程日志\n$ pm2 stop all           # 停止所有进程\n$ pm2 restart all        # 重启所有进程\n$ pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)\n$ pm2 stop 0             # 停止指定的进程\n$ pm2 restart 0          # 重启指定的进程\n$ pm2 startup            # 产生 init 脚本 保持进程活着\n$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)\n$ pm2 delete 0           # 杀死指定的进程\n$ pm2 delete all         # 杀死全部进程\n```\n\n\n#### 运行进程的不同方式\n\n```\n$ pm2 start app.js -i max    # 根据有效CPU数目启动最大进程数目\n$ pm2 start app.js -i 3      # 启动3个进程\n$ pm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster\n$ pm2 start app.js -x -- -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)\n$ pm2 start app.js --name serverone  # 启动一个进程并把它命名为 serverone\n$ pm2 stop serverone       # 停止 serverone 进程\n$ pm2 start app.json        # 启动进程, 在 app.json里设置选项\n$ pm2 start app.js -i max -- -a 23                   #在--之后给 app.js 传递参数\n$ pm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件\n你也可以执行用其他语言编写的app  ( fork 模式):\n$ pm2 start my-bash-script.sh    -x --interpreter bash\n$ pm2 start my-python-script.py -x --interpreter python\n```\n\n\n0 秒停机重载：这项功能允许你重新载入代码而不用失去请求连接。\n\n运行于 cluster 模式（默认模式）\n\n```\n$ pm2 reload all\n\n```",
				"html": "<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。</p>\n<p>当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载， PM2 是完美的。它非常适合 IaaS 结构，但不要把它用于 PaaS 方案（随后将开发 Paas 的解决方案）。</p>\n<h3 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内建负载均衡（使用 Node cluster 集群模块）</span><br><span class=\"line\">后台运行</span><br><span class=\"line\">0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.</span><br><span class=\"line\">具有 Ubuntu 和 CentOS 的启动脚本</span><br><span class=\"line\">停止不稳定的进程（避免无限循环）</span><br><span class=\"line\">控制台检测</span><br><span class=\"line\">提供 HTTP API</span><br><span class=\"line\">远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pm2 -g     # 命令行安装 pm2 </span><br><span class=\"line\">$ pm2 start app.js -i 4  # 后台运行pm2，启动4个app.js </span><br><span class=\"line\">                         # 也可以把&apos;max&apos; 参数传递给 start</span><br><span class=\"line\">                         # 正确的进程数目依赖于Cpu的核心数目</span><br><span class=\"line\">$ pm2 start app.js --name my-api # 命名进程</span><br><span class=\"line\">$ pm2 list               # 显示所有进程状态</span><br><span class=\"line\">$ pm2 monit              # 监视所有进程</span><br><span class=\"line\">$ pm2 logs               # 显示所有进程日志</span><br><span class=\"line\">$ pm2 stop all           # 停止所有进程</span><br><span class=\"line\">$ pm2 restart all        # 重启所有进程</span><br><span class=\"line\">$ pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">$ pm2 stop 0             # 停止指定的进程</span><br><span class=\"line\">$ pm2 restart 0          # 重启指定的进程</span><br><span class=\"line\">$ pm2 startup            # 产生 init 脚本 保持进程活着</span><br><span class=\"line\">$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">$ pm2 delete 0           # 杀死指定的进程</span><br><span class=\"line\">$ pm2 delete all         # 杀死全部进程</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行进程的不同方式\"><a href=\"#运行进程的不同方式\" class=\"headerlink\" title=\"运行进程的不同方式\"></a>运行进程的不同方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 start app.js -i max    # 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">$ pm2 start app.js -i 3      # 启动3个进程</span><br><span class=\"line\">$ pm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">$ pm2 start app.js -x -- -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">$ pm2 start app.js --name serverone  # 启动一个进程并把它命名为 serverone</span><br><span class=\"line\">$ pm2 stop serverone       # 停止 serverone 进程</span><br><span class=\"line\">$ pm2 start app.json        # 启动进程, 在 app.json里设置选项</span><br><span class=\"line\">$ pm2 start app.js -i max -- -a 23                   #在--之后给 app.js 传递参数</span><br><span class=\"line\">$ pm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件</span><br><span class=\"line\">你也可以执行用其他语言编写的app  ( fork 模式):</span><br><span class=\"line\">$ pm2 start my-bash-script.sh    -x --interpreter bash</span><br><span class=\"line\">$ pm2 start my-python-script.py -x --interpreter python</span><br></pre></td></tr></table></figure>\n<p>0 秒停机重载：这项功能允许你重新载入代码而不用失去请求连接。</p>\n<p>运行于 cluster 模式（默认模式）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 reload all</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1520839093000,
				"created_by": 2,
				"updated_at": 1520840309000,
				"updated_by": 2,
				"published_at": 1520839093000,
				"published_by": 2
			},
			{
				"id": "cjf28ialm0002cu7tzgjg661q",
				"title": "linux 安装 showdoc 项目",
				"slug": "api-showdoc-php",
				"markdown": "\n\n### 安装 Nginx\n\n使用 yum 安装 Nginx：\n\n```\nyum install nginx\n```\n\n修改 `/etc/nginx/nginx.conf` 文件为如下内容：\n\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80;\n        server_name  127.0.0.1;\n        root         /var/www/html;\n        index index.php index.html\n        error_page  404              /404.html;\n        location = /40x.html {\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n        }\n        location ~ .php$ {\n            root           /var/www/html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n        location ~ /.ht {\n            deny  all;\n        }\n    }\n}\n```\n\n\n启动 Nginx 并设置为开机启动：\n\n```\nservice nginx start\nchkconfig nginx on\n```\n\n\n### 安装 PHP\n\n使用 yum 安装 `php-fpm`：\n\n```\nyum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo\n\n```\n启动 `php-fpm` 并设置为开机启动：\n\n```\nservice php-fpm start\nchkconfig php-fpm on\n\n```\n\n### 创建项目\n\n\n下载安装 Composer\nComposer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。\n\n执行如下命令[安装 Composer]：\n\n```\ncurl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n\n```\n\n安装过程可能需要耗费几分钟\n\n设置 Composer 使用国内镜像\n执行命令[设置 Composer 使用国内镜像]：\n\n```\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n\n\n为了避免访问国外网络导致的延迟，推荐使用国内镜像源\n\n使用 Composer 创建项目\n\n执行命令创建项目：\n\n```\ncd /var/www/html/ && composer create-project  showdoc/showdoc\n\n```\n\n设置 showdoc 目录写权限\n\n执行命令赋予 showdoc 下部分目录的写权限\n\n\n```\nchmod a+w showdoc/install\nchmod a+w showdoc/Sqlite\nchmod a+w showdoc/Sqlite/showdoc.db.php\nchmod a+w showdoc/Public/Uploads/\nchmod a+w showdoc/Application/Runtime\nchmod a+w showdoc/server/Application/Runtime\nchmod a+w showdoc/Application/Common/Conf/config.php\nchmod a+w showdoc/Application/Home/Conf/config.php\n```\n\n\n### 创建完毕，您现在可以通过浏览器访问\n\n\nhttp://<您的IP地址>/showdoc/install/ ，进行语言的选择以后即可通过 \n\nhttp://<您的IP地址>/showdoc\n\n查看站点效果。\n\n\n通过IP地址查看：http://<您的IP地址>/showdoc\n\n通过域名查看：http://www.yourdomain.com/showdoc",
				"html": "<h3 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h3><p>使用 yum 安装 Nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>修改 <code>/etc/nginx/nginx.conf</code> 文件为如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  127.0.0.1;</span><br><span class=\"line\">        root         /var/www/html;</span><br><span class=\"line\">        index index.php index.html</span><br><span class=\"line\">        error_page  404              /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~ .php$ &#123;</span><br><span class=\"line\">            root           /var/www/html;</span><br><span class=\"line\">            fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index  index.php;</span><br><span class=\"line\">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">            include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location ~ /.ht &#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动 Nginx 并设置为开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br><span class=\"line\">chkconfig nginx on</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-PHP\"><a href=\"#安装-PHP\" class=\"headerlink\" title=\"安装 PHP\"></a>安装 PHP</h3><p>使用 yum 安装 <code>php-fpm</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</span><br></pre></td></tr></table></figure>\n<p>启动 <code>php-fpm</code> 并设置为开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service php-fpm start</span><br><span class=\"line\">chkconfig php-fpm on</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>下载安装 Composer<br>Composer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。</p>\n<p>执行如下命令[安装 Composer]：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://getcomposer.org/installer | php</span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n<p>安装过程可能需要耗费几分钟</p>\n<p>设置 Composer 使用国内镜像<br>执行命令[设置 Composer 使用国内镜像]：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure>\n<p>为了避免访问国外网络导致的延迟，推荐使用国内镜像源</p>\n<p>使用 Composer 创建项目</p>\n<p>执行命令创建项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/www/html/ &amp;&amp; composer create-project  showdoc/showdoc</span><br></pre></td></tr></table></figure>\n<p>设置 showdoc 目录写权限</p>\n<p>执行命令赋予 showdoc 下部分目录的写权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+w showdoc/install</span><br><span class=\"line\">chmod a+w showdoc/Sqlite</span><br><span class=\"line\">chmod a+w showdoc/Sqlite/showdoc.db.php</span><br><span class=\"line\">chmod a+w showdoc/Public/Uploads/</span><br><span class=\"line\">chmod a+w showdoc/Application/Runtime</span><br><span class=\"line\">chmod a+w showdoc/server/Application/Runtime</span><br><span class=\"line\">chmod a+w showdoc/Application/Common/Conf/config.php</span><br><span class=\"line\">chmod a+w showdoc/Application/Home/Conf/config.php</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建完毕，您现在可以通过浏览器访问\"><a href=\"#创建完毕，您现在可以通过浏览器访问\" class=\"headerlink\" title=\"创建完毕，您现在可以通过浏览器访问\"></a>创建完毕，您现在可以通过浏览器访问</h3><p>http://&lt;您的IP地址&gt;/showdoc/install/ ，进行语言的选择以后即可通过 </p>\n<p>http://&lt;您的IP地址&gt;/showdoc</p>\n<p>查看站点效果。</p>\n<p>通过IP地址查看：http://&lt;您的IP地址&gt;/showdoc</p>\n<p>通过域名查看：<a href=\"http://www.yourdomain.com/showdoc\" target=\"_blank\" rel=\"noopener\">http://www.yourdomain.com/showdoc</a></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1515395262000,
				"created_by": 2,
				"updated_at": 1520838508000,
				"updated_by": 2,
				"published_at": 1515395262000,
				"published_by": 2
			},
			{
				"id": "cjf28iamm0014cu7t3v99e7va",
				"title": "vps SSR安装教程",
				"slug": "linux-vps-ssr",
				"markdown": "\n\n\n## SSR一键安装\n\n```\nwget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\n\nchmod +x shadowsocksR.sh\n\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\n\n密码：password 端口：9527\n\n\nWelcome to visit:https://shadowsocks.be/9.html\nEnjoy it!\n```\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\n\nchmod +x shadowsocksR.sh\n\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\nCongratulations, ShadowsocksR server install completed!\nYour Server IP        :  45.76.54.***\nYour Server Port      :  9527\nYour Password         :  password\nYour Protocol         :  origin\nYour obfs             :  plain\nYour Encryption Method:  aes-256-cfb\n\nWelcome to visit:https://shadowsocks.be/9.html\nEnjoy it!\n```\n\n##  一键加速VPS服务器\n\n此加速教程为谷歌BBR加速 ，vultr的服务器可以装谷歌bbr。\n\n按照第二步的步骤，重新连接服务器ip，登录成功后，在命令栏里粘贴以下代码：\n\n【谷歌BBR加速教程】\n\n```\nyum -y install wget\n\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n\n```\n\n```\n卸载 SSR：./shadowsocksR.sh uninstall\n\nSSR 一些常用的命令\n\n\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n日志路径\n\n配置文件路径：/etc/shadowsocks.json\n日志文件路径：/var/log/shadowsocksr.log\n代码安装目录：/usr/local/shadowsocks\n如果后面想修改 SSR 的一些配置可以直接修改 shadowsocks.json ，然后重启 SSR 即可。\n\n```\n\n\n\n## 开启加速：net_speeder\n\n```\nwget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh\n\nsh net_speeder_lazyinstall.sh\n\n或者：\n\nwget https://github.com/snooda/net-speeder/archive/master.zip\nunzip master.zip\ncd net-speeder-master\nchmod +x build.sh\n./build.sh\n\n把文件移动位置\nmkdir /usr/local/net_speeder/\ncp net_speeder /usr/local/net_speeder/net_speeder\n\n\n开启加速\nnohup /usr/local/net_speeder/net_speeder eth0 \"ip\" >/dev/null 2>&1 &\n\n\n\n基本命令\n\n查看net-speeder是否运行：ps aux|grep net_speeder|grep -v grep\n停止net-speeder：killall net_speeder\n\n\n```",
				"html": "<h2 id=\"SSR一键安装\"><a href=\"#SSR一键安装\" class=\"headerlink\" title=\"SSR一键安装\"></a>SSR一键安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocksR.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">密码：password 端口：9527</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://shadowsocks.be/9.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x shadowsocksR.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br><span class=\"line\"></span><br><span class=\"line\">Congratulations, ShadowsocksR server install completed!</span><br><span class=\"line\">Your Server IP        :  45.76.54.***</span><br><span class=\"line\">Your Server Port      :  9527</span><br><span class=\"line\">Your Password         :  password</span><br><span class=\"line\">Your Protocol         :  origin</span><br><span class=\"line\">Your obfs             :  plain</span><br><span class=\"line\">Your Encryption Method:  aes-256-cfb</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://shadowsocks.be/9.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n<h2 id=\"一键加速VPS服务器\"><a href=\"#一键加速VPS服务器\" class=\"headerlink\" title=\"一键加速VPS服务器\"></a>一键加速VPS服务器</h2><p>此加速教程为谷歌BBR加速 ，vultr的服务器可以装谷歌bbr。</p>\n<p>按照第二步的步骤，重新连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p>\n<p>【谷歌BBR加速教程】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x bbr.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./bbr.sh</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">卸载 SSR：./shadowsocksR.sh uninstall</span><br><span class=\"line\"></span><br><span class=\"line\">SSR 一些常用的命令</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">启动：/etc/init.d/shadowsocks start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks restart</span><br><span class=\"line\">状态：/etc/init.d/shadowsocks status</span><br><span class=\"line\">日志路径</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件路径：/etc/shadowsocks.json</span><br><span class=\"line\">日志文件路径：/var/log/shadowsocksr.log</span><br><span class=\"line\">代码安装目录：/usr/local/shadowsocks</span><br><span class=\"line\">如果后面想修改 SSR 的一些配置可以直接修改 shadowsocks.json ，然后重启 SSR 即可。</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启加速：net-speeder\"><a href=\"#开启加速：net-speeder\" class=\"headerlink\" title=\"开启加速：net_speeder\"></a>开启加速：net_speeder</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh</span><br><span class=\"line\"></span><br><span class=\"line\">sh net_speeder_lazyinstall.sh</span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/snooda/net-speeder/archive/master.zip</span><br><span class=\"line\">unzip master.zip</span><br><span class=\"line\">cd net-speeder-master</span><br><span class=\"line\">chmod +x build.sh</span><br><span class=\"line\">./build.sh</span><br><span class=\"line\"></span><br><span class=\"line\">把文件移动位置</span><br><span class=\"line\">mkdir /usr/local/net_speeder/</span><br><span class=\"line\">cp net_speeder /usr/local/net_speeder/net_speeder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">开启加速</span><br><span class=\"line\">nohup /usr/local/net_speeder/net_speeder eth0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">基本命令</span><br><span class=\"line\"></span><br><span class=\"line\">查看net-speeder是否运行：ps aux|grep net_speeder|grep -v grep</span><br><span class=\"line\">停止net-speeder：killall net_speeder</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1515136981000,
				"created_by": 2,
				"updated_at": 1520840261000,
				"updated_by": 2,
				"published_at": 1515136981000,
				"published_by": 2
			},
			{
				"id": "cjf28ian2001ncu7tbyjzzbkn",
				"title": "vps问题整理",
				"slug": "vps-problem",
				"markdown": "\n## 为什么VPS能ping通，但是通过域名打不开？\n\n首先，确定您的VPS上的iptables是否屏蔽了80端口。如果iptables屏蔽了80端口（HTTP服务默认端口）的话，是无法访问您在VPS上创建的网站的。在Centos上，请使用如下命令关闭iptables试试：\n\n```\nservice iptables stop\n\n```\n\n还有另一种可能是你使用的PC的DNS被污染了，请将您的PC上的DNS服务器更换为OpenDNS或者使用Google DNS(8.8.8.8,8.8.4.4)。为了能更好的使您的VPS被国内用户访问，最好把在Godaddy或者其他国外域名提供商那里购买域名的DNS的nameserve更换为dnspod，这样你的域名更容易被国内用户访问了，因为这些域名提供商的nameserver经常在国内无法正常访问。\n\n对内存在256MB以下的VPS,也极有可能发生可以ping通，但是网站无法访问的情况。大多数是因为httpd负载太高而内存不足导致Apache挂掉，请升级VPS的内存或优化系统负载情况。",
				"html": "<h2 id=\"为什么VPS能ping通，但是通过域名打不开？\"><a href=\"#为什么VPS能ping通，但是通过域名打不开？\" class=\"headerlink\" title=\"为什么VPS能ping通，但是通过域名打不开？\"></a>为什么VPS能ping通，但是通过域名打不开？</h2><p>首先，确定您的VPS上的iptables是否屏蔽了80端口。如果iptables屏蔽了80端口（HTTP服务默认端口）的话，是无法访问您在VPS上创建的网站的。在Centos上，请使用如下命令关闭iptables试试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure>\n<p>还有另一种可能是你使用的PC的DNS被污染了，请将您的PC上的DNS服务器更换为OpenDNS或者使用Google DNS(8.8.8.8,8.8.4.4)。为了能更好的使您的VPS被国内用户访问，最好把在Godaddy或者其他国外域名提供商那里购买域名的DNS的nameserve更换为dnspod，这样你的域名更容易被国内用户访问了，因为这些域名提供商的nameserver经常在国内无法正常访问。</p>\n<p>对内存在256MB以下的VPS,也极有可能发生可以ping通，但是网站无法访问的情况。大多数是因为httpd负载太高而内存不足导致Apache挂掉，请升级VPS的内存或优化系统负载情况。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1513666328000,
				"created_by": 2,
				"updated_at": 1520840202000,
				"updated_by": 2,
				"published_at": 1513666328000,
				"published_by": 2
			},
			{
				"id": "cjf28iamg000xcu7tf96anxd2",
				"title": "CENTOS7 安装 NET-SPEEDER 提升 VPS 网络性能",
				"slug": "linux-vps-net-speeder",
				"markdown": "\n\n## 1、安装依赖库 \n\n先安装epel源 \n\n```bash\nrpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm\n\n（这里 epel-release-7-8.noarch.rpm 版本可能更新，可以去到 http://dl.fedoraproject.org/pub/epel/7/x86_64/e 搜索查看当前有的版本）\n\n```\n\n## 2、然后即可使用yum安装： \n\n```bash\nyum install libnet libpcap libnet-devel libpcap-devel gcc\n```\n\n\n## 3、然后获取net-speeder\n\n```bash\nwget https://github.com/snooda/net-speeder/archive/master.zip\nunzip master.zip\ncd net-speeder-master （这里注意查看下目录名称，可能会变）\nchmod +x build.sh\n./build.sh\n\n```\n\n\n> 编译完成，当前目录下会多出 net_speeder 文件\n\n\n\n\n## 4、运行 net-speeder\n\n```bash\n参数：./net_speeder 网卡名 加速规则（bpf规则） \n最简单用法：./net_speeder venet0 \"ip\"  加速所有ip协议数据\n\n./net_speeder eth0 \"ip\" &  网卡一般为 eth0，可以使用 ifconfig 查看。（然而 CentOS7 没有内置 ifconfig 命令，使用 yum install net-tools.x86_64 安装即可）\n```\n\n\n## 5、然后复制到/usr/local/目录并设置开机自启动：\n\n```bash\nmkdir /usr/local/net_speeder/    创建 net_speeder 目录\n\ncp net_speeder\n\n/usr/local/net_speeder/net_speeder    复制 net_speeder\necho 'nohup /usr/local/net_speeder/net_speeder eth0 \"ip\" >/dev/null 2>&1 &' >> /etc/rc.local    创建开机启动\n```\n\n### 6、其它\n\n可以使用 ps -e 来查看进程中是否有 net_speeder 来确认是否运行。\n\n控制台偶尔会自动跳出 libnet_write_raw_ipv4(): -1 bytes written (Message too long) 错误提示，目前得到的信息是正常情况。\n\n基本命令\n\n```\n查看net-speeder是否运行：ps aux|grep net_speeder|grep -v grep\n停止net-speeder：killall net_speeder\n```\n",
				"html": "<h2 id=\"1、安装依赖库\"><a href=\"#1、安装依赖库\" class=\"headerlink\" title=\"1、安装依赖库\"></a>1、安装依赖库</h2><p>先安装epel源 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">（这里 epel-release-7-8.noarch.rpm 版本可能更新，可以去到 http://dl.fedoraproject.org/pub/epel/7/x86_64/e 搜索查看当前有的版本）</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、然后即可使用yum安装：\"><a href=\"#2、然后即可使用yum安装：\" class=\"headerlink\" title=\"2、然后即可使用yum安装：\"></a>2、然后即可使用yum安装：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install libnet libpcap libnet-devel libpcap-devel gcc</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、然后获取net-speeder\"><a href=\"#3、然后获取net-speeder\" class=\"headerlink\" title=\"3、然后获取net-speeder\"></a>3、然后获取net-speeder</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/snooda/net-speeder/archive/master.zip</span><br><span class=\"line\">unzip master.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> net-speeder-master （这里注意查看下目录名称，可能会变）</span><br><span class=\"line\">chmod +x build.sh</span><br><span class=\"line\">./build.sh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>编译完成，当前目录下会多出 net_speeder 文件</p>\n</blockquote>\n<h2 id=\"4、运行-net-speeder\"><a href=\"#4、运行-net-speeder\" class=\"headerlink\" title=\"4、运行 net-speeder\"></a>4、运行 net-speeder</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数：./net_speeder 网卡名 加速规则（bpf规则） </span><br><span class=\"line\">最简单用法：./net_speeder venet0 <span class=\"string\">\"ip\"</span>  加速所有ip协议数据</span><br><span class=\"line\"></span><br><span class=\"line\">./net_speeder eth0 <span class=\"string\">\"ip\"</span> &amp;  网卡一般为 eth0，可以使用 ifconfig 查看。（然而 CentOS7 没有内置 ifconfig 命令，使用 yum install net-tools.x86_64 安装即可）</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、然后复制到-usr-local-目录并设置开机自启动：\"><a href=\"#5、然后复制到-usr-local-目录并设置开机自启动：\" class=\"headerlink\" title=\"5、然后复制到/usr/local/目录并设置开机自启动：\"></a>5、然后复制到/usr/local/目录并设置开机自启动：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/net_speeder/    创建 net_speeder 目录</span><br><span class=\"line\"></span><br><span class=\"line\">cp net_speeder</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/net_speeder/net_speeder    复制 net_speeder</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'nohup /usr/local/net_speeder/net_speeder eth0 \"ip\" &gt;/dev/null 2&gt;&amp;1 &amp;'</span> &gt;&gt; /etc/rc.local    创建开机启动</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、其它\"><a href=\"#6、其它\" class=\"headerlink\" title=\"6、其它\"></a>6、其它</h3><p>可以使用 ps -e 来查看进程中是否有 net_speeder 来确认是否运行。</p>\n<p>控制台偶尔会自动跳出 libnet_write_raw_ipv4(): -1 bytes written (Message too long) 错误提示，目前得到的信息是正常情况。</p>\n<p>基本命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看net-speeder是否运行：ps aux|grep net_speeder|grep -v grep</span><br><span class=\"line\">停止net-speeder：killall net_speeder</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1512804120000,
				"created_by": 2,
				"updated_at": 1520839367000,
				"updated_by": 2,
				"published_at": 1512804120000,
				"published_by": 2
			},
			{
				"id": "cjf28iamr001acu7t8zwxzwe2",
				"title": "node+koa+mongodb导航管理系统项目说明",
				"slug": "nodejs-koa-mongodb",
				"markdown": "\n# 项目说明\n\n基于node 实现简单的导航管理系统\n\n>server端：使用node， koa + mongodb\n>\n>client端：vue + vue-router\n\n\n**安装与启动**\n\n```bash\n1.安装 依赖\n\nnpm i\n\n2.启动项目\nnpm run dev_server\n\n默认端口开启2333\n本地访问 http://localhost:2333/\n```\n\n生产环境可以使用 pm2发布\n\n全局安装pm2\n\n```bash\nnpm i -g pm2\n```\n\n>记得修改 pm2.json 中的pwd属性为当前项目地址\n>\n>pm2具体使用方法自行百度\n",
				"html": "<h1 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h1><p>基于node 实现简单的导航管理系统</p>\n<blockquote>\n<p>server端：使用node， koa + mongodb</p>\n<p>client端：vue + vue-router</p>\n</blockquote>\n<p><strong>安装与启动</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.安装 依赖</span><br><span class=\"line\"></span><br><span class=\"line\">npm i</span><br><span class=\"line\"></span><br><span class=\"line\">2.启动项目</span><br><span class=\"line\">npm run dev_server</span><br><span class=\"line\"></span><br><span class=\"line\">默认端口开启2333</span><br><span class=\"line\">本地访问 http://localhost:2333/</span><br></pre></td></tr></table></figure>\n<p>生产环境可以使用 pm2发布</p>\n<p>全局安装pm2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g pm2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>记得修改 pm2.json 中的pwd属性为当前项目地址</p>\n<p>pm2具体使用方法自行百度</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1512544485000,
				"created_by": 2,
				"updated_at": 1520838942000,
				"updated_by": 2,
				"published_at": 1512544485000,
				"published_by": 2
			},
			{
				"id": "cjf28iame000scu7teoqqupvq",
				"title": "linux vps关闭防火墙",
				"slug": "linux-vps-close-firewall",
				"markdown": "\n## vps web 如果想让本地访问，需要关闭防火墙\n\n关闭防火墙：\n\n```\nsudo systemctl stop firewalld.service && sudo systemctl disable firewalld.service\n```\n\ncentos从7开始默认用的是firewalld，这个是基于iptables的，虽然有iptables的核心，但是iptables的服务是没安装的。所以你只要停止firewalld服务即可：\nsudo systemctl stop firewalld.service && sudo systemctl disable firewalld.service\n\n如果你要改用iptables的话，需要安装iptables服务：\nsudo yum install iptables-services\nsudo systemctl enable iptables && sudo systemctl enable ip6tables\nsudo systemctl start iptables && sudo systemctl start ip6tables\n\n或者 \n\n```\nservice iptables stop\n```",
				"html": "<h2 id=\"vps-web-如果想让本地访问，需要关闭防火墙\"><a href=\"#vps-web-如果想让本地访问，需要关闭防火墙\" class=\"headerlink\" title=\"vps web 如果想让本地访问，需要关闭防火墙\"></a>vps web 如果想让本地访问，需要关闭防火墙</h2><p>关闭防火墙：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n<p>centos从7开始默认用的是firewalld，这个是基于iptables的，虽然有iptables的核心，但是iptables的服务是没安装的。所以你只要停止firewalld服务即可：<br>sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</p>\n<p>如果你要改用iptables的话，需要安装iptables服务：<br>sudo yum install iptables-services<br>sudo systemctl enable iptables &amp;&amp; sudo systemctl enable ip6tables<br>sudo systemctl start iptables &amp;&amp; sudo systemctl start ip6tables</p>\n<p>或者 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1511853867000,
				"created_by": 2,
				"updated_at": 1520839521000,
				"updated_by": 2,
				"published_at": 1511853867000,
				"published_by": 2
			},
			{
				"id": "cjf28iami000zcu7tk5eqitqg",
				"title": "linux 一键安装环境ezhttp",
				"slug": "linux-ezhttp",
				"markdown": "\n\n\n```bash\nwget --no-check-certificate centos.bz/ezhttp.zip?time=$(date +%s) -O ezhttp.zip\nunzip ezhttp.zip\ncd ezhttp-master\nchmod +x start.sh\n\n```\n\n\n交互安装: (自己选择)\n\n```bash\n./start.sh\n```\n\n\n## 交互安装\n\n### 1.选择安装lnmp\n1） 输入1回车进入`Installation of stack`.\n2） 输入1回车选择`LNMP(Nginx MySQL PHP)`安装.\n\n\n### 2.nginx安装设置\n1）首先是nginx版本选择。\n这里有5个选项：\n\n```bash\n1) nginx-1.8.0\n2) tengine-2.1.0\n3) openresty-1.9.7.3\n4) custom_version\n5) do_not_install\n```\n输入一个1-5的数字或直接回车，直接回车默认选择5。\n第1-3个选项是选择指定nginx，包含nginx官方版本,淘宝的tengine和整合nginx luajit的openresty。\n第4个选项是指定版本号，输入的规则为nginx-1.4.1 tengine-1.4.6 ngx_openresty-1.2.8.3。\n第5个选择是\n这里我们选择nginx-1.8.0。\n2）然后是输入安装路径\n直接回车默认是/usr/local/nginx。我们可以更改其安装路径，如输入/opt/nginx。 这里我们直接回车使用默认值。\n3）接着将会显示安装nginx使用的编译参数\n且提示是否更改编译参数，直接回车默认是不更改。输入y是更改参数，n为不更改参数。这里我们直接回车，即不更改。\n4）最后是提示是否安装nginx模块\n默认为不安装，即n。输入y则安装，n为不安装。我们这里输入y，安装模块。接着将显示可安装的nginx模块，比如\n\n```\n1) lua-nginx-module-0.10.0\n2) nginx-http-concat-1.2.2\n3) nginx-upload-module-2.2\n4) ngx_http_substitutions_filter_module-0.6.4\n5) do_not_install\n```\n\n输入对应的数字选择安装的模块或输入5不安装。这里我们输入2安装`nginx-http-concat-1.2.2`模块。\n\n\n\n\n### 3.mysql安装配置\n\n1) 选择安装的mysql版本\n1-4选项为mysql5.1,mysql5.5,mysql5.6,mysql5.7版本，5为libmysqlclient18，6为自定义版本，格式为mysql-5.1.71 mysql-5.5.32 mysql-5.6.12 mysql-5.7.9。这里我们输入3安装mysql5.6。\n2）输入mysql安装路径\n直接回车默认路径为/usr/local/mysql，可以输入其它安装路径。这里我们直接回车选择默认的/usr/local/mysql。\n3) 输入mysql数据目录\n直接回车为默认的{上面设置的mysql安装路径}/data。可以输入其它的，如/data/mysql。我们直接回车选择默认的/usr/local/mysql/data。\n4) 输入mysql端口\n直接回车默认使用3306端口。可以输入任意一个有效的端口，如3307。我们直接回车选择默认的3306端口。\n5) 设置mysql root用户密码\n直接回车默认设置密码为root。可以输入任意字符串的密码，这里我们输入mysqlpwd。\n6）设置mysql编译参数\n直接回车默认不更改。可以输入y进行更改或n不更改。\n\n\n### 4.php安装配置\n1) 选择安装的php版本\n支持php5.2,php5.3,php5.4,php5.5,php5.6,php7.1的版本。输入对应的数字安装对应的版本。也可以选择custom_version自定义版本。这里输入5安装php5.6版本。\n2) 设置安装路径\n直接回车默认选择/usr/local/php路径，可以输入其它的路径，如/opt/php。这里直接驾车。\n3) 更改编译参数\n直接回车选择不更改。\n4）安装php模块\n将会列表可安装的php模块，安装多个模块输入以空格分隔的数字，如1 2 3。这里输入2 4安装memcache和redis模块。\n\n\n### 5.其它软件安装\n将会列出可安装的软件，安装多个软件输入以空格分隔的多个数字，如1 2 3。这里输入1 4安装memcached和redis。\n然后接着要求输入各自的安装路径，这里我们直接回车使用默认值。\n\n### 6.检查设置\n最后将列出以上的所有设置。直接回车和输入y开始安装或输入n返回重新设置。\n\n\n\n## 非交互安装\n非交互安装即不需要手动选择或输入各种配置进行安装，可需要一个命令就行。\n\n可以执行`./start.sh` `-h`查看帮助。以上的lnmp配置参数可以使用如下命令进行非交互安装。\n\n```bash\n./start.sh --stack=lnmp --package=nginx,php5.6,mysql5.6,memcached,redis --nginx-module=nginx-http-concat --mysql-root-pwd=mysqlpwd --redis-maxmem=2g\n```\n\n### `ez`命令介绍\n`ezhttp提供了一个ez命令来对环境进行操作。用法如下：\n\n\n虚拟主机管理\n\n```bash\nez vhost add：创建虚拟主机\nez vhost list:\t列出所有虚拟主机\nez vhost del：\t删除虚拟主机\n```\n\nmysql管理\n\n```bash\nez mysql reset：重置mysql root用户密码\nez mysql add：创建mysql用户\nez mysql mod：\b更新mysql用户\nez mysql del：删除mysql用户\n```\n\nftp管理\n\n```bash\nez ftp add：添加ftp用户\nez ftp list：\b列出所有ftp用户\nez ftp del：删除ftp用户\nez ftp mod：更改ftp用户\n```\n\n\n进程管理\n\n```bash\nnginx：/etc/init.d/nginx (start|stop|restart)\napache：/etc/init.d/httpd (start|stop|restart)\nphp-fpm：/etc/init.d/php-fpm (start|stop|restart)\nmysql：/etc/init.d/mysqld (start|stop|restart)\n```\n\n\n\n\n\n```hash\n#############################################################################\n\nYou are welcome to use this script to deploy your linux,hope you like.\nThe script is written by Zhu Maohai.\nIf you have any question.\nplease visit http://www.centos.bz/ezhttp/ and submit your issue.thank you.\n\n############################################################################\n\n1) Installation of stack.\n2) Some Useful Tools.\n3) Upgrade Software\n4) Exit.\n\nplease select: 1\nyou select Installation of stack.\n1) LNMP(Nginx MySQL PHP)\n2) LAMP(Apache MySQL PHP)\n3) LNAMP(Nginx Apache MySQL PHP)\n4) back to main menu\n\nplease input the package you like to install: 3\n#################### nginx setting ####################\n\n\n1) nginx-1.10.3\n2) tengine-2.1.0\n3) openresty-1.11.2.2\n4) custom_version\n5) do_not_install\n\nwhich nginx you'd select(default do_not_install): 1\nyour selection: nginx-1.10.3\nnginx-1.10.3 install location(default:/usr/local/nginx,leave blank for default):\nnginx-1.10.3 install location: /usr/local/nginx\nthe nginx-1.10.3 configure parameter is:\n--prefix=/usr/local/nginx --with-http_ssl_module --with-openssl=/root/ezhttp-master/soft/openssl-1.0.2h  --with-http_sub_module --with-http_stub_status_module --with-pcre-jit --with-pcre --with-pcre=/root/ezhttp-master/soft/pcre-8.33 --with-zlib=/root/ezhttp-master/soft/zlib-1.2.8 --with-http_secure_link_module\n\n\nWould you like to change it?[N/y](default n):\nyou select no,configure parameter will not be changed.\n\nDo you need to install nginx module?[N/y](default n): y\n#################### nginx_modules install ####################\n\n1) lua-nginx-module-0.10.7\n2) nginx-http-concat-1.2.2\n3) nginx-upload-module-2.2\n4) ngx_http_substitutions_filter_module-0.6.4\n5) ngx_stream_core_module\n6) nginx_upstream_check_module-master\n7) nginx-stream-upsync-module-master\n8) do_not_install\n\nplease input one or more number between 1 and 8(default do_not_install)(ie.1 2 3): 2 3\nyour selection nginx-http-concat-1.2.2 nginx-upload-module-2.2\n#################### apache setting ####################\n\n\n1) httpd-2.2.31\n2) httpd-2.4.25\n3) custom_version\n4) do_not_install\n\nwhich apache you'd select(default do_not_install): 1\nyour selection: httpd-2.2.31\nhttpd-2.2.31 install location(default:/usr/local/apache,leave blank for default):\nhttpd-2.2.31 install location: /usr/local/apache\nthe httpd-2.2.31 configure parameter is:\n--prefix=/usr/local/apache --with-included-apr --enable-so --enable-deflate=shared --enable-expires=shared  --enable-ssl=shared --enable-headers=shared --enable-rewrite=shared --enable-static-support\n\n\nWould you like to change it?[N/y](default n):\nyou select no,configure parameter will not be changed.\n#################### mysql setting ####################\n\n\n1) mysql-5.1.73\n2) mysql-5.5.54\n3) mysql-5.6.35\n4) mysql-5.7.17 (need about 2GB RAM when building,try mysql-5.6 if failed)\n5) libmysqlclient18\n6) custom_version\n7) do_not_install\n\nwhich mysql you'd select(default do_not_install): 3\nyour selection: mysql-5.6.35\nmysql-5.6.35 install location(default:/usr/local/mysql,leave blank for default):\nmysql-5.6.35 install location: /usr/local/mysql\nmysql data location(default:/usr/local/mysql/data,leave blank for default):\nmysql-5.6.35 data location: /usr/local/mysql/data\nmysql port number(default:3306,leave blank for default):\nmysql port number: 3306\nmysql server root password (default:root,leave blank for default): c5bMaVD818\nmysql-5.6.35 root password: c5bMaVD818\nthe mysql-5.6.35 configure parameter is:\n-DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/usr/local/mysql/etc -DMYSQL_UNIX_ADDR=/usr/local/mysql/data/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DENABLED_LOCAL_INFILE=1\n\n\nWould you like to change it?[N/y](default n):\nyou select no,configure parameter will not be changed.\n#################### php setting ####################\n\n\n1) php-5.2.17\n2) php-5.3.29\n3) php-5.4.43\n4) php-5.5.27\n5) php-5.6.15\n6) php-7.1.0\n7) custom_version\n8) do_not_install\n\nwhich php you'd select(default do_not_install): 5\nyour selection: php-5.6.15\nphp-5.6.15 install location(default:/usr/local/php,leave blank for default):\nphp-5.6.15 install location: /usr/local/php\nthe php-5.6.15 configure parameter is:\n--prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-apxs2=/usr/local/apache/bin/apxs --enable-bcmath=shared --with-pdo_sqlite --with-gettext=shared --with-iconv --enable-ftp=shared --with-sqlite --with-sqlite3 --enable-mbstring=shared --enable-sockets=shared --enable-zip --enable-soap=shared --with-openssl --with-zlib --with-curl=shared --with-gd=shared --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt=shared,/opt/ezhttp/libmcrypt-2.5.8 --with-mhash=shared,/opt/ezhttp/mhash-0.9.9.9 --enable-opcache --with-mysql=mysqlnd --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --without-pear --with-libdir=lib64 --disable-fileinfo\n\n\nWould you like to change it?[N/y](default n):\nyou select no,configure parameter will not be changed.\n#################### PHP modules install ####################\nphp-5.6.15 version available modules:\n\n#################### php_modules install ####################\n\n1) php-imagick-3.1.2\n2) php-memcache-3.0.8\n3) php-memcached-2.2.0 (Support Aliyun OCS)\n4) php-redis-2.2.7\n5) php-mongo-legacy-1.6.11\n6) xdebug-2.2.2\n7) mssql\n8) fileinfo\n9) php-gmp\n10) php-swoole-1.7.20\n11) do_not_install\n\nplease input one or more number between 1 and 11(default do_not_install)(ie.1 2 3):\nyour selection do_not_install\n#################### other_soft install ####################\n\n1) memcached-1.4.24\n2) pure-ftpd-1.0.41\n3) phpMyAdmin-4.4.12-all-languages\n4) redis-3.0.3\n5) mongodb-linux-x86_64-2.4.9\n6) phpRedisAdmin-1.1.0\n7) memadmin-1.0.12\n8) rockmongo-1.1.6-fix-auth\n9) jdk1.7.0_79\n10) jdk1.8.0_66\n11) apache-tomcat-7.0.68\n12) apache-tomcat-8.0.39\n13) do_not_install\n\nplease input one or more number between 1 and 13(default do_not_install)(ie.1 2 3): 4 5\nyour selection redis-3.0.3 mongodb-linux-x86_64-2.4.9\ninput redis-3.0.3 location(default:/usr/local/redis):\nredis location: /usr/local/redis\nplease input the max memory allowed for redis(ie.128M,512m,2G,4g):\ninput errors,please input ie.128M,512m,2G,4g\nplease input the max memory allowed for redis(ie.128M,512m,2G,4g): 128M\n128M\ninput mongodb-linux-x86_64-2.4.9 location(default:/usr/local/mongodb):\nmongodb location: /usr/local/mongodb\ninput mongodb-linux-x86_64-2.4.9 data location(default:/usr/local/mongodb/data/):\nmongodb data location: /usr/local/mongodb/data/\n#################### your choice overview ####################\n\nPackage: lnamp\n\n*****Nginx Setting*****\nNginx: nginx-1.10.3\nNginx Location: /usr/local/nginx\nNginx Configure Parameter: --prefix=/usr/local/nginx --with-http_ssl_module --with-openssl=/root/ezhttp-master/soft/openssl-1.0.2h  --with-http_sub_module --with-http_stub_status_module --with-pcre-jit --with-pcre --with-pcre=/root/ezhttp-master/soft/pcre-8.33 --with-zlib=/root/ezhttp-master/soft/zlib-1.2.8 --with-http_secure_link_module --add-module=/root/ezhttp-master/soft/nginx-http-concat-1.2.2 --add-module=/root/ezhttp-master/soft/nginx-upload-module-2.2\nNginx Modules:  nginx-http-concat-1.2.2 nginx-upload-module-2.2\n\n*****Apache Setting*****\nApache: httpd-2.2.31\nApache Location: /usr/local/apache\nApache Configure Parameter: --prefix=/usr/local/apache --with-included-apr --enable-so --enable-deflate=shared --enable-expires=shared  --enable-ssl=shared --enable-headers=shared --enable-rewrite=shared --enable-static-support\n\n*****MySQL Setting*****\nMySQL Server: mysql-5.6.35\nMySQL Location: /usr/local/mysql\nMySQL Data Location: /usr/local/mysql/data\nMySQL Port Number: 3306\nMySQL Root Password: c5bMaVD818\nMySQL Configure Parameter: -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/usr/local/mysql/etc -DMYSQL_UNIX_ADDR=/usr/local/mysql/data/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DENABLED_LOCAL_INFILE=1\n\n*****PHP Setting*****\nPHP: php-5.6.15\nPHP Location: /usr/local/php\nPHP Configure Parameter: --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-apxs2=/usr/local/apache/bin/apxs --enable-bcmath=shared --with-pdo_sqlite --with-gettext=shared --with-iconv --enable-ftp=shared --with-sqlite --with-sqlite3 --enable-mbstring=shared --enable-sockets=shared --enable-zip --enable-soap=shared --with-openssl --with-zlib --with-curl=shared --with-gd=shared --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt=shared,/opt/ezhttp/libmcrypt-2.5.8 --with-mhash=shared,/opt/ezhttp/mhash-0.9.9.9 --enable-opcache --with-mysql=mysqlnd --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --without-pear --with-libdir=lib64 --disable-fileinfo\n\n*****Other Software Setting*****\nOther Software:  redis-3.0.3 mongodb-linux-x86_64-2.4.9\nredis_location: /usr/local/redis\nmongodb_location: /usr/local/mongodb\n\n##############################################################\n\nAre you ready to configure your Linux?[Y/n](default y):\n\n\n```\n\n\n\napache 文件目录\n\n```\n/usr/local/apache/htdocs\n\n```\n\n\n初始化\n安装 unzip zip 命令\n\n```\nyum install -y unzip zip\n```\n\n",
				"html": "<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate centos.bz/ezhttp.zip?time=$(date +%s) -O ezhttp.zip</span><br><span class=\"line\">unzip ezhttp.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ezhttp-master</span><br><span class=\"line\">chmod +x start.sh</span><br></pre></td></tr></table></figure>\n<p>交互安装: (自己选择)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./start.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"交互安装\"><a href=\"#交互安装\" class=\"headerlink\" title=\"交互安装\"></a>交互安装</h2><h3 id=\"1-选择安装lnmp\"><a href=\"#1-选择安装lnmp\" class=\"headerlink\" title=\"1.选择安装lnmp\"></a>1.选择安装lnmp</h3><p>1） 输入1回车进入<code>Installation of stack</code>.<br>2） 输入1回车选择<code>LNMP(Nginx MySQL PHP)</code>安装.</p>\n<h3 id=\"2-nginx安装设置\"><a href=\"#2-nginx安装设置\" class=\"headerlink\" title=\"2.nginx安装设置\"></a>2.nginx安装设置</h3><p>1）首先是nginx版本选择。<br>这里有5个选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) nginx-1.8.0</span><br><span class=\"line\">2) tengine-2.1.0</span><br><span class=\"line\">3) openresty-1.9.7.3</span><br><span class=\"line\">4) custom_version</span><br><span class=\"line\">5) do_not_install</span><br></pre></td></tr></table></figure>\n<p>输入一个1-5的数字或直接回车，直接回车默认选择5。<br>第1-3个选项是选择指定nginx，包含nginx官方版本,淘宝的tengine和整合nginx luajit的openresty。<br>第4个选项是指定版本号，输入的规则为nginx-1.4.1 tengine-1.4.6 ngx_openresty-1.2.8.3。<br>第5个选择是<br>这里我们选择nginx-1.8.0。<br>2）然后是输入安装路径<br>直接回车默认是/usr/local/nginx。我们可以更改其安装路径，如输入/opt/nginx。 这里我们直接回车使用默认值。<br>3）接着将会显示安装nginx使用的编译参数<br>且提示是否更改编译参数，直接回车默认是不更改。输入y是更改参数，n为不更改参数。这里我们直接回车，即不更改。<br>4）最后是提示是否安装nginx模块<br>默认为不安装，即n。输入y则安装，n为不安装。我们这里输入y，安装模块。接着将显示可安装的nginx模块，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) lua-nginx-module-0.10.0</span><br><span class=\"line\">2) nginx-http-concat-1.2.2</span><br><span class=\"line\">3) nginx-upload-module-2.2</span><br><span class=\"line\">4) ngx_http_substitutions_filter_module-0.6.4</span><br><span class=\"line\">5) do_not_install</span><br></pre></td></tr></table></figure>\n<p>输入对应的数字选择安装的模块或输入5不安装。这里我们输入2安装<code>nginx-http-concat-1.2.2</code>模块。</p>\n<h3 id=\"3-mysql安装配置\"><a href=\"#3-mysql安装配置\" class=\"headerlink\" title=\"3.mysql安装配置\"></a>3.mysql安装配置</h3><p>1) 选择安装的mysql版本<br>1-4选项为mysql5.1,mysql5.5,mysql5.6,mysql5.7版本，5为libmysqlclient18，6为自定义版本，格式为mysql-5.1.71 mysql-5.5.32 mysql-5.6.12 mysql-5.7.9。这里我们输入3安装mysql5.6。<br>2）输入mysql安装路径<br>直接回车默认路径为/usr/local/mysql，可以输入其它安装路径。这里我们直接回车选择默认的/usr/local/mysql。<br>3) 输入mysql数据目录<br>直接回车为默认的{上面设置的mysql安装路径}/data。可以输入其它的，如/data/mysql。我们直接回车选择默认的/usr/local/mysql/data。<br>4) 输入mysql端口<br>直接回车默认使用3306端口。可以输入任意一个有效的端口，如3307。我们直接回车选择默认的3306端口。<br>5) 设置mysql root用户密码<br>直接回车默认设置密码为root。可以输入任意字符串的密码，这里我们输入mysqlpwd。<br>6）设置mysql编译参数<br>直接回车默认不更改。可以输入y进行更改或n不更改。</p>\n<h3 id=\"4-php安装配置\"><a href=\"#4-php安装配置\" class=\"headerlink\" title=\"4.php安装配置\"></a>4.php安装配置</h3><p>1) 选择安装的php版本<br>支持php5.2,php5.3,php5.4,php5.5,php5.6,php7.1的版本。输入对应的数字安装对应的版本。也可以选择custom_version自定义版本。这里输入5安装php5.6版本。<br>2) 设置安装路径<br>直接回车默认选择/usr/local/php路径，可以输入其它的路径，如/opt/php。这里直接驾车。<br>3) 更改编译参数<br>直接回车选择不更改。<br>4）安装php模块<br>将会列表可安装的php模块，安装多个模块输入以空格分隔的数字，如1 2 3。这里输入2 4安装memcache和redis模块。</p>\n<h3 id=\"5-其它软件安装\"><a href=\"#5-其它软件安装\" class=\"headerlink\" title=\"5.其它软件安装\"></a>5.其它软件安装</h3><p>将会列出可安装的软件，安装多个软件输入以空格分隔的多个数字，如1 2 3。这里输入1 4安装memcached和redis。<br>然后接着要求输入各自的安装路径，这里我们直接回车使用默认值。</p>\n<h3 id=\"6-检查设置\"><a href=\"#6-检查设置\" class=\"headerlink\" title=\"6.检查设置\"></a>6.检查设置</h3><p>最后将列出以上的所有设置。直接回车和输入y开始安装或输入n返回重新设置。</p>\n<h2 id=\"非交互安装\"><a href=\"#非交互安装\" class=\"headerlink\" title=\"非交互安装\"></a>非交互安装</h2><p>非交互安装即不需要手动选择或输入各种配置进行安装，可需要一个命令就行。</p>\n<p>可以执行<code>./start.sh</code> <code>-h</code>查看帮助。以上的lnmp配置参数可以使用如下命令进行非交互安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./start.sh --stack=lnmp --package=nginx,php5.6,mysql5.6,memcached,redis --nginx-module=nginx-http-concat --mysql-root-pwd=mysqlpwd --redis-maxmem=2g</span><br></pre></td></tr></table></figure>\n<h3 id=\"ez命令介绍\"><a href=\"#ez命令介绍\" class=\"headerlink\" title=\"ez命令介绍\"></a><code>ez</code>命令介绍</h3><p>`ezhttp提供了一个ez命令来对环境进行操作。用法如下：</p>\n<p>虚拟主机管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ez vhost add：创建虚拟主机</span><br><span class=\"line\">ez vhost list:\t列出所有虚拟主机</span><br><span class=\"line\">ez vhost del：\t删除虚拟主机</span><br></pre></td></tr></table></figure>\n<p>mysql管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ez mysql reset：重置mysql root用户密码</span><br><span class=\"line\">ez mysql add：创建mysql用户</span><br><span class=\"line\">ez mysql mod：\b更新mysql用户</span><br><span class=\"line\">ez mysql del：删除mysql用户</span><br></pre></td></tr></table></figure>\n<p>ftp管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ez ftp add：添加ftp用户</span><br><span class=\"line\">ez ftp list：\b列出所有ftp用户</span><br><span class=\"line\">ez ftp del：删除ftp用户</span><br><span class=\"line\">ez ftp mod：更改ftp用户</span><br></pre></td></tr></table></figure>\n<p>进程管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx：/etc/init.d/nginx (start|stop|restart)</span><br><span class=\"line\">apache：/etc/init.d/httpd (start|stop|restart)</span><br><span class=\"line\">php-fpm：/etc/init.d/php-fpm (start|stop|restart)</span><br><span class=\"line\">mysql：/etc/init.d/mysqld (start|stop|restart)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#############################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">You are welcome to use this script to deploy your linux,hope you like.</span><br><span class=\"line\">The script is written by Zhu Maohai.</span><br><span class=\"line\">If you have any question.</span><br><span class=\"line\">please visit http://www.centos.bz/ezhttp/ and submit your issue.thank you.</span><br><span class=\"line\"></span><br><span class=\"line\">############################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">1) Installation of stack.</span><br><span class=\"line\">2) Some Useful Tools.</span><br><span class=\"line\">3) Upgrade Software</span><br><span class=\"line\">4) Exit.</span><br><span class=\"line\"></span><br><span class=\"line\">please select: 1</span><br><span class=\"line\">you select Installation of stack.</span><br><span class=\"line\">1) LNMP(Nginx MySQL PHP)</span><br><span class=\"line\">2) LAMP(Apache MySQL PHP)</span><br><span class=\"line\">3) LNAMP(Nginx Apache MySQL PHP)</span><br><span class=\"line\">4) back to main menu</span><br><span class=\"line\"></span><br><span class=\"line\">please input the package you like to install: 3</span><br><span class=\"line\">#################### nginx setting ####################</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1) nginx-1.10.3</span><br><span class=\"line\">2) tengine-2.1.0</span><br><span class=\"line\">3) openresty-1.11.2.2</span><br><span class=\"line\">4) custom_version</span><br><span class=\"line\">5) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">which nginx you&apos;d select(default do_not_install): 1</span><br><span class=\"line\">your selection: nginx-1.10.3</span><br><span class=\"line\">nginx-1.10.3 install location(default:/usr/local/nginx,leave blank for default):</span><br><span class=\"line\">nginx-1.10.3 install location: /usr/local/nginx</span><br><span class=\"line\">the nginx-1.10.3 configure parameter is:</span><br><span class=\"line\">--prefix=/usr/local/nginx --with-http_ssl_module --with-openssl=/root/ezhttp-master/soft/openssl-1.0.2h  --with-http_sub_module --with-http_stub_status_module --with-pcre-jit --with-pcre --with-pcre=/root/ezhttp-master/soft/pcre-8.33 --with-zlib=/root/ezhttp-master/soft/zlib-1.2.8 --with-http_secure_link_module</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to change it?[N/y](default n):</span><br><span class=\"line\">you select no,configure parameter will not be changed.</span><br><span class=\"line\"></span><br><span class=\"line\">Do you need to install nginx module?[N/y](default n): y</span><br><span class=\"line\">#################### nginx_modules install ####################</span><br><span class=\"line\"></span><br><span class=\"line\">1) lua-nginx-module-0.10.7</span><br><span class=\"line\">2) nginx-http-concat-1.2.2</span><br><span class=\"line\">3) nginx-upload-module-2.2</span><br><span class=\"line\">4) ngx_http_substitutions_filter_module-0.6.4</span><br><span class=\"line\">5) ngx_stream_core_module</span><br><span class=\"line\">6) nginx_upstream_check_module-master</span><br><span class=\"line\">7) nginx-stream-upsync-module-master</span><br><span class=\"line\">8) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">please input one or more number between 1 and 8(default do_not_install)(ie.1 2 3): 2 3</span><br><span class=\"line\">your selection nginx-http-concat-1.2.2 nginx-upload-module-2.2</span><br><span class=\"line\">#################### apache setting ####################</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1) httpd-2.2.31</span><br><span class=\"line\">2) httpd-2.4.25</span><br><span class=\"line\">3) custom_version</span><br><span class=\"line\">4) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">which apache you&apos;d select(default do_not_install): 1</span><br><span class=\"line\">your selection: httpd-2.2.31</span><br><span class=\"line\">httpd-2.2.31 install location(default:/usr/local/apache,leave blank for default):</span><br><span class=\"line\">httpd-2.2.31 install location: /usr/local/apache</span><br><span class=\"line\">the httpd-2.2.31 configure parameter is:</span><br><span class=\"line\">--prefix=/usr/local/apache --with-included-apr --enable-so --enable-deflate=shared --enable-expires=shared  --enable-ssl=shared --enable-headers=shared --enable-rewrite=shared --enable-static-support</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to change it?[N/y](default n):</span><br><span class=\"line\">you select no,configure parameter will not be changed.</span><br><span class=\"line\">#################### mysql setting ####################</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1) mysql-5.1.73</span><br><span class=\"line\">2) mysql-5.5.54</span><br><span class=\"line\">3) mysql-5.6.35</span><br><span class=\"line\">4) mysql-5.7.17 (need about 2GB RAM when building,try mysql-5.6 if failed)</span><br><span class=\"line\">5) libmysqlclient18</span><br><span class=\"line\">6) custom_version</span><br><span class=\"line\">7) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">which mysql you&apos;d select(default do_not_install): 3</span><br><span class=\"line\">your selection: mysql-5.6.35</span><br><span class=\"line\">mysql-5.6.35 install location(default:/usr/local/mysql,leave blank for default):</span><br><span class=\"line\">mysql-5.6.35 install location: /usr/local/mysql</span><br><span class=\"line\">mysql data location(default:/usr/local/mysql/data,leave blank for default):</span><br><span class=\"line\">mysql-5.6.35 data location: /usr/local/mysql/data</span><br><span class=\"line\">mysql port number(default:3306,leave blank for default):</span><br><span class=\"line\">mysql port number: 3306</span><br><span class=\"line\">mysql server root password (default:root,leave blank for default): c5bMaVD818</span><br><span class=\"line\">mysql-5.6.35 root password: c5bMaVD818</span><br><span class=\"line\">the mysql-5.6.35 configure parameter is:</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/usr/local/mysql/etc -DMYSQL_UNIX_ADDR=/usr/local/mysql/data/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DENABLED_LOCAL_INFILE=1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to change it?[N/y](default n):</span><br><span class=\"line\">you select no,configure parameter will not be changed.</span><br><span class=\"line\">#################### php setting ####################</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1) php-5.2.17</span><br><span class=\"line\">2) php-5.3.29</span><br><span class=\"line\">3) php-5.4.43</span><br><span class=\"line\">4) php-5.5.27</span><br><span class=\"line\">5) php-5.6.15</span><br><span class=\"line\">6) php-7.1.0</span><br><span class=\"line\">7) custom_version</span><br><span class=\"line\">8) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">which php you&apos;d select(default do_not_install): 5</span><br><span class=\"line\">your selection: php-5.6.15</span><br><span class=\"line\">php-5.6.15 install location(default:/usr/local/php,leave blank for default):</span><br><span class=\"line\">php-5.6.15 install location: /usr/local/php</span><br><span class=\"line\">the php-5.6.15 configure parameter is:</span><br><span class=\"line\">--prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-apxs2=/usr/local/apache/bin/apxs --enable-bcmath=shared --with-pdo_sqlite --with-gettext=shared --with-iconv --enable-ftp=shared --with-sqlite --with-sqlite3 --enable-mbstring=shared --enable-sockets=shared --enable-zip --enable-soap=shared --with-openssl --with-zlib --with-curl=shared --with-gd=shared --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt=shared,/opt/ezhttp/libmcrypt-2.5.8 --with-mhash=shared,/opt/ezhttp/mhash-0.9.9.9 --enable-opcache --with-mysql=mysqlnd --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --without-pear --with-libdir=lib64 --disable-fileinfo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to change it?[N/y](default n):</span><br><span class=\"line\">you select no,configure parameter will not be changed.</span><br><span class=\"line\">#################### PHP modules install ####################</span><br><span class=\"line\">php-5.6.15 version available modules:</span><br><span class=\"line\"></span><br><span class=\"line\">#################### php_modules install ####################</span><br><span class=\"line\"></span><br><span class=\"line\">1) php-imagick-3.1.2</span><br><span class=\"line\">2) php-memcache-3.0.8</span><br><span class=\"line\">3) php-memcached-2.2.0 (Support Aliyun OCS)</span><br><span class=\"line\">4) php-redis-2.2.7</span><br><span class=\"line\">5) php-mongo-legacy-1.6.11</span><br><span class=\"line\">6) xdebug-2.2.2</span><br><span class=\"line\">7) mssql</span><br><span class=\"line\">8) fileinfo</span><br><span class=\"line\">9) php-gmp</span><br><span class=\"line\">10) php-swoole-1.7.20</span><br><span class=\"line\">11) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">please input one or more number between 1 and 11(default do_not_install)(ie.1 2 3):</span><br><span class=\"line\">your selection do_not_install</span><br><span class=\"line\">#################### other_soft install ####################</span><br><span class=\"line\"></span><br><span class=\"line\">1) memcached-1.4.24</span><br><span class=\"line\">2) pure-ftpd-1.0.41</span><br><span class=\"line\">3) phpMyAdmin-4.4.12-all-languages</span><br><span class=\"line\">4) redis-3.0.3</span><br><span class=\"line\">5) mongodb-linux-x86_64-2.4.9</span><br><span class=\"line\">6) phpRedisAdmin-1.1.0</span><br><span class=\"line\">7) memadmin-1.0.12</span><br><span class=\"line\">8) rockmongo-1.1.6-fix-auth</span><br><span class=\"line\">9) jdk1.7.0_79</span><br><span class=\"line\">10) jdk1.8.0_66</span><br><span class=\"line\">11) apache-tomcat-7.0.68</span><br><span class=\"line\">12) apache-tomcat-8.0.39</span><br><span class=\"line\">13) do_not_install</span><br><span class=\"line\"></span><br><span class=\"line\">please input one or more number between 1 and 13(default do_not_install)(ie.1 2 3): 4 5</span><br><span class=\"line\">your selection redis-3.0.3 mongodb-linux-x86_64-2.4.9</span><br><span class=\"line\">input redis-3.0.3 location(default:/usr/local/redis):</span><br><span class=\"line\">redis location: /usr/local/redis</span><br><span class=\"line\">please input the max memory allowed for redis(ie.128M,512m,2G,4g):</span><br><span class=\"line\">input errors,please input ie.128M,512m,2G,4g</span><br><span class=\"line\">please input the max memory allowed for redis(ie.128M,512m,2G,4g): 128M</span><br><span class=\"line\">128M</span><br><span class=\"line\">input mongodb-linux-x86_64-2.4.9 location(default:/usr/local/mongodb):</span><br><span class=\"line\">mongodb location: /usr/local/mongodb</span><br><span class=\"line\">input mongodb-linux-x86_64-2.4.9 data location(default:/usr/local/mongodb/data/):</span><br><span class=\"line\">mongodb data location: /usr/local/mongodb/data/</span><br><span class=\"line\">#################### your choice overview ####################</span><br><span class=\"line\"></span><br><span class=\"line\">Package: lnamp</span><br><span class=\"line\"></span><br><span class=\"line\">*****Nginx Setting*****</span><br><span class=\"line\">Nginx: nginx-1.10.3</span><br><span class=\"line\">Nginx Location: /usr/local/nginx</span><br><span class=\"line\">Nginx Configure Parameter: --prefix=/usr/local/nginx --with-http_ssl_module --with-openssl=/root/ezhttp-master/soft/openssl-1.0.2h  --with-http_sub_module --with-http_stub_status_module --with-pcre-jit --with-pcre --with-pcre=/root/ezhttp-master/soft/pcre-8.33 --with-zlib=/root/ezhttp-master/soft/zlib-1.2.8 --with-http_secure_link_module --add-module=/root/ezhttp-master/soft/nginx-http-concat-1.2.2 --add-module=/root/ezhttp-master/soft/nginx-upload-module-2.2</span><br><span class=\"line\">Nginx Modules:  nginx-http-concat-1.2.2 nginx-upload-module-2.2</span><br><span class=\"line\"></span><br><span class=\"line\">*****Apache Setting*****</span><br><span class=\"line\">Apache: httpd-2.2.31</span><br><span class=\"line\">Apache Location: /usr/local/apache</span><br><span class=\"line\">Apache Configure Parameter: --prefix=/usr/local/apache --with-included-apr --enable-so --enable-deflate=shared --enable-expires=shared  --enable-ssl=shared --enable-headers=shared --enable-rewrite=shared --enable-static-support</span><br><span class=\"line\"></span><br><span class=\"line\">*****MySQL Setting*****</span><br><span class=\"line\">MySQL Server: mysql-5.6.35</span><br><span class=\"line\">MySQL Location: /usr/local/mysql</span><br><span class=\"line\">MySQL Data Location: /usr/local/mysql/data</span><br><span class=\"line\">MySQL Port Number: 3306</span><br><span class=\"line\">MySQL Root Password: c5bMaVD818</span><br><span class=\"line\">MySQL Configure Parameter: -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/usr/local/mysql/etc -DMYSQL_UNIX_ADDR=/usr/local/mysql/data/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DENABLED_LOCAL_INFILE=1</span><br><span class=\"line\"></span><br><span class=\"line\">*****PHP Setting*****</span><br><span class=\"line\">PHP: php-5.6.15</span><br><span class=\"line\">PHP Location: /usr/local/php</span><br><span class=\"line\">PHP Configure Parameter: --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-apxs2=/usr/local/apache/bin/apxs --enable-bcmath=shared --with-pdo_sqlite --with-gettext=shared --with-iconv --enable-ftp=shared --with-sqlite --with-sqlite3 --enable-mbstring=shared --enable-sockets=shared --enable-zip --enable-soap=shared --with-openssl --with-zlib --with-curl=shared --with-gd=shared --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt=shared,/opt/ezhttp/libmcrypt-2.5.8 --with-mhash=shared,/opt/ezhttp/mhash-0.9.9.9 --enable-opcache --with-mysql=mysqlnd --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --without-pear --with-libdir=lib64 --disable-fileinfo</span><br><span class=\"line\"></span><br><span class=\"line\">*****Other Software Setting*****</span><br><span class=\"line\">Other Software:  redis-3.0.3 mongodb-linux-x86_64-2.4.9</span><br><span class=\"line\">redis_location: /usr/local/redis</span><br><span class=\"line\">mongodb_location: /usr/local/mongodb</span><br><span class=\"line\"></span><br><span class=\"line\">##############################################################</span><br><span class=\"line\"></span><br><span class=\"line\">Are you ready to configure your Linux?[Y/n](default y):</span><br></pre></td></tr></table></figure>\n<p>apache 文件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/apache/htdocs</span><br></pre></td></tr></table></figure>\n<p>初始化<br>安装 unzip zip 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y unzip zip</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1511075437000,
				"created_by": 2,
				"updated_at": 1520838678000,
				"updated_by": 2,
				"published_at": 1511075437000,
				"published_by": 2
			},
			{
				"id": "cjf28iamy001jcu7tvndxrlrl",
				"title": "安装api测试管理工具eolinker",
				"slug": "setup-eolinker-api-document",
				"markdown": "\n\n> 此项目简介，可以到 `https://www.eolinker.com` 查看\n> 安装前需要准备好php运行环境，推荐`ezhttp`工具\n\n到php项目目录 然后执行下面代码\n\n```bash\nmkdir eolinker\ncd eolinker\nwget https://github.com/eolinker/eoLinker-API-Management-System-OS-3.X/raw/master/release%5B%E6%AD%A3%E5%BC%8F%E5%AE%89%E8%A3%85%E5%8C%85%5D/eolinker_os_3.2.1.zip\nunzip eolinker_os_3.2.1.zip\ncd ../\nchmod 777 -R  eolinker/\n```\n\n\n",
				"html": "<blockquote>\n<p>此项目简介，可以到 <code>https://www.eolinker.com</code> 查看<br>安装前需要准备好php运行环境，推荐<code>ezhttp</code>工具</p>\n</blockquote>\n<p>到php项目目录 然后执行下面代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir eolinker</span><br><span class=\"line\"><span class=\"built_in\">cd</span> eolinker</span><br><span class=\"line\">wget https://github.com/eolinker/eoLinker-API-Management-System-OS-3.X/raw/master/release%5B%E6%AD%A3%E5%BC%8F%E5%AE%89%E8%A3%85%E5%8C%85%5D/eolinker_os_3.2.1.zip</span><br><span class=\"line\">unzip eolinker_os_3.2.1.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../</span><br><span class=\"line\">chmod 777 -R  eolinker/</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1511073669000,
				"created_by": 2,
				"updated_at": 1520840135000,
				"updated_by": 2,
				"published_at": 1511073669000,
				"published_by": 2
			},
			{
				"id": "cjf28iam9000kcu7tl6u48t2j",
				"title": "linux vps 访问不了注意事项",
				"slug": "linux-close-firewall",
				"markdown": "\n\n\n## vps web 如果想让本地访问，需要关闭防火墙\n\n关闭防火墙：\n\n```\nsudo systemctl stop firewalld.service && sudo systemctl disable firewalld.service\n```\n\ncentos从7开始默认用的是firewalld，这个是基于iptables的，虽然有iptables的核心，但是iptables的服务是没安装的。所以你只要停止firewalld服务即可：\nsudo systemctl stop firewalld.service && sudo systemctl disable firewalld.service\n\n如果你要改用iptables的话，需要安装iptables服务：\nsudo yum install iptables-services\nsudo systemctl enable iptables && sudo systemctl enable ip6tables\nsudo systemctl start iptables && sudo systemctl start ip6tables\n\n或者 \n```\nservice iptables stop\n```\n\n\n\n## 为什么VPS能ping通，但是通过域名打不开？\n\n首先，确定您的VPS上的iptables是否屏蔽了80端口。如果iptables屏蔽了80端口（HTTP服务默认端口）的话，是无法访问您在VPS上创建的网站的。在Centos上，请使用如下命令关闭iptables试试：\n\n```\nservice iptables stop\n\n```\n\n还有另一种可能是你使用的PC的DNS被污染了，请将您的PC上的DNS服务器更换为OpenDNS或者使用Google DNS(8.8.8.8,8.8.4.4)。为了能更好的使您的VPS被国内用户访问，最好把在Godaddy或者其他国外域名提供商那里购买域名的DNS的nameserve更换为dnspod，这样你的域名更容易被国内用户访问了，因为这些域名提供商的nameserver经常在国内无法正常访问。\n\n对内存在256MB以下的VPS,也极有可能发生可以ping通，但是网站无法访问的情况。大多数是因为httpd负载太高而内存不足导致Apache挂掉，请升级VPS的内存或优化系统负载情况。\n",
				"html": "<h2 id=\"vps-web-如果想让本地访问，需要关闭防火墙\"><a href=\"#vps-web-如果想让本地访问，需要关闭防火墙\" class=\"headerlink\" title=\"vps web 如果想让本地访问，需要关闭防火墙\"></a>vps web 如果想让本地访问，需要关闭防火墙</h2><p>关闭防火墙：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n<p>centos从7开始默认用的是firewalld，这个是基于iptables的，虽然有iptables的核心，但是iptables的服务是没安装的。所以你只要停止firewalld服务即可：<br>sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</p>\n<p>如果你要改用iptables的话，需要安装iptables服务：<br>sudo yum install iptables-services<br>sudo systemctl enable iptables &amp;&amp; sudo systemctl enable ip6tables<br>sudo systemctl start iptables &amp;&amp; sudo systemctl start ip6tables</p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为什么VPS能ping通，但是通过域名打不开？\"><a href=\"#为什么VPS能ping通，但是通过域名打不开？\" class=\"headerlink\" title=\"为什么VPS能ping通，但是通过域名打不开？\"></a>为什么VPS能ping通，但是通过域名打不开？</h2><p>首先，确定您的VPS上的iptables是否屏蔽了80端口。如果iptables屏蔽了80端口（HTTP服务默认端口）的话，是无法访问您在VPS上创建的网站的。在Centos上，请使用如下命令关闭iptables试试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure>\n<p>还有另一种可能是你使用的PC的DNS被污染了，请将您的PC上的DNS服务器更换为OpenDNS或者使用Google DNS(8.8.8.8,8.8.4.4)。为了能更好的使您的VPS被国内用户访问，最好把在Godaddy或者其他国外域名提供商那里购买域名的DNS的nameserve更换为dnspod，这样你的域名更容易被国内用户访问了，因为这些域名提供商的nameserver经常在国内无法正常访问。</p>\n<p>对内存在256MB以下的VPS,也极有可能发生可以ping通，但是网站无法访问的情况。大多数是因为httpd负载太高而内存不足导致Apache挂掉，请升级VPS的内存或优化系统负载情况。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1509779369000,
				"created_by": 2,
				"updated_at": 1520838621000,
				"updated_by": 2,
				"published_at": 1509779369000,
				"published_by": 2
			},
			{
				"id": "cjf28iamc000qcu7tfxm3pj59",
				"title": "php+mysql等常用工具环境搭建",
				"slug": "linux-php-mysql",
				"markdown": "\n\n\n### 1使用yum命令，安装所需的程序库\n\n```\nyum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers\n                \n```\n\n### 2安装 nginx\n\n```\n//安装命令\n yum install -y nginx \n \n//验证启动\nservice nginx start\n\n//查看状态\nservice nginx status\n \n```\n\n\n### 3安装PHP及若干扩展\n\n```\nyum install -y php php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt libmcrypt-devel php-fpm\n\n```\n\n### 4启动php-fpm\n\n```\n/etc/rc.d/init.d/php-fpm start \n```\n\n\n### 5设置开机启动项\n\n```\nchkconfig php-fpm on\n```\n\n### 安装mysql\n\n```\n\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server -y\n\n\n启动 MySQL 服务：\nservice mysqld restart\n\n\n设置 MySQL 账户 [root 密码]：\n/usr/bin/mysqladmin -u root password 'Password4eoLinker'\n\n```\n\n\n#### 安装node使用npm工具\n\n```\n\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\n\nyum -y install nodejs\n\n```\n\n\n",
				"html": "<h3 id=\"1使用yum命令，安装所需的程序库\"><a href=\"#1使用yum命令，安装所需的程序库\" class=\"headerlink\" title=\"1使用yum命令，安装所需的程序库\"></a>1使用yum命令，安装所需的程序库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers</span><br></pre></td></tr></table></figure>\n<h3 id=\"2安装-nginx\"><a href=\"#2安装-nginx\" class=\"headerlink\" title=\"2安装 nginx\"></a>2安装 nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装命令</span><br><span class=\"line\"> yum install -y nginx </span><br><span class=\"line\"> </span><br><span class=\"line\">//验证启动</span><br><span class=\"line\">service nginx start</span><br><span class=\"line\"></span><br><span class=\"line\">//查看状态</span><br><span class=\"line\">service nginx status</span><br></pre></td></tr></table></figure>\n<h3 id=\"3安装PHP及若干扩展\"><a href=\"#3安装PHP及若干扩展\" class=\"headerlink\" title=\"3安装PHP及若干扩展\"></a>3安装PHP及若干扩展</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y php php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt libmcrypt-devel php-fpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"4启动php-fpm\"><a href=\"#4启动php-fpm\" class=\"headerlink\" title=\"4启动php-fpm\"></a>4启动php-fpm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/rc.d/init.d/php-fpm start</span><br></pre></td></tr></table></figure>\n<h3 id=\"5设置开机启动项\"><a href=\"#5设置开机启动项\" class=\"headerlink\" title=\"5设置开机启动项\"></a>5设置开机启动项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig php-fpm on</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server -y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">启动 MySQL 服务：</span><br><span class=\"line\">service mysqld restart</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">设置 MySQL 账户 [root 密码]：</span><br><span class=\"line\">/usr/bin/mysqladmin -u root password &apos;Password4eoLinker&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装node使用npm工具\"><a href=\"#安装node使用npm工具\" class=\"headerlink\" title=\"安装node使用npm工具\"></a>安装node使用npm工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install nodejs</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1509347831000,
				"created_by": 2,
				"updated_at": 1520839075000,
				"updated_by": 2,
				"published_at": 1509347831000,
				"published_by": 2
			},
			{
				"id": "cjf28iamk0011cu7teuitq8b2",
				"title": "nginx 搭建静态网站",
				"slug": "linux-nginx",
				"markdown": "\n\n\n## 搭建Http静态服务器环境\n\n\n搭建静态网站，首先需要部署环境。下面的步骤，将告诉大家如何在服务器上通过 Nginx 部署 HTTP 静态服务。\n\n### 安装 Nginx\n\n在 CentOS 上，可直接使用 `yum` 来安装 Nginx\n\n```\nyum install nginx -y\n```\n\n安装完成后，使用 `nginx` 命令启动 Nginx：\n\n```\nnginx\n```\n\n此时，访问 测试地址 可以看到 Nginx 的测试页面\n\n\n> <bubble for=\"help\">\n> 如果无法访问，请重试用 `nginx -s reload` 命令重启 Nginx\n> </bubble>\n\n> <checker type=\"output-contains\" command=\"ls /usr/sbin/\" hint=\"Nginx 未安装\">\n>     <keyword regex=\"nginx\" />\n> </checker>\n\n> <checker type=\"output-contains\" command=\"netstat -nltp\" hint=\"Nginx 未启动\">\n>     <keyword regex=\"nginx\" />\n>     <keyword regex=\"80\" />\n> </checker>\n\n### 配置静态服务器访问路径\n\n外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置静态资源的路径信息才能通过 url 正确访问到服务器上的静态资源。\n\n打开 Nginx 的默认配置文件 [/etc/nginx/nginx.conf] ，修改 Nginx 配置，将默认的 `root /usr/share/nginx/html;` 修改为: `root /data/www;`，如下：\n\n```nginx\n/// <example verb=\"edit\" file=\"/etc/nginx/nginx.conf\" />\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /data/www;\n\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n}\n```\n\n配置文件将 [/data/www/static][data-www-static-path] 作为所有静态资源请求的根路径，如访问: `http://xxx.xxx.xxx.xxx/static/index.js`，将会去 [/data/www/static/][data-www-static-path] 目录下去查找 `index.js`。现在我们需要重启 Nginx 让新的配置生效，如：\n\n> <locate for=\"data-www-static-path\" path=\"/data/www/static\" hint=\"这里是所有静态资源请求的根路径\"/>\n\n```\nnginx -s reload\n```\n\n重启后，现在我们应该已经可以使用我们的静态服务器了，现在让我们新建一个静态文件，查看服务是否运行正常。\n\n首先让我们在 [/data][data-path] 目录 下创建 `www` 目录，如：\n\n> <locate for=\"data\" path=\"/data/www\" hint=\"该目录作为服务器的根目录使用\"/>\n\n```\nmkdir -p /data/www\n```\n\n> <locate for=\"1\" path=\"/etc/nginx/nginx.conf\" hint=\"编辑默认服务器配置，修改网站的根路径\" />\n\n> <checker type=\"output-contains\" command=\"ls /data/ -la\" hint=\"在 `/data`目录 下创建 `/www`目录\">\n>     <keyword regex=\"www\" />\n> </checker>\n\n### 创建第一个静态文件\n\n在 [/data/www] 目录下创建我们的第一个静态文件 [index.html]\n\n```html\n/// <example verb=\"edit\" file=\"/data/www/index.html\" />\n<!DOCTYPE html>\n<html lang=\"zh\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>第一个静态文件</title>\n</head>\n<body>\nHello world！\n</body>\n</html>\n```\n\n现在访问 [http://xxx.xxx.xxx.xxx/index.html] 应该可以看到页面输出 [Hello world!][indicate-hello-world] \n\n到此，一个基于 Nginx 的静态服务器就搭建完成了，现在所有放在 [/data/www] 目录下的的静态资源都可以直接通过域名访问。\n\n> <locate for=\"data-www-path\" path=\"/data/www\" hint=\"/data/www 是服务器的根目录\"/>\n\n> <locate for=\"1\" path=\"/data/www\" hint=\"添加 index.html 文件\" />\n\n> <bubble for=\"indicate-hello-world\">\n> 如果无显示，请刷新浏览器页面\n> </bubble>\n\n> <checker type=\"output-contains\" command=\"curl -I --silent http://xxx.xxx.xxx.xxx\" hint=\"配置 Nginx 静态服务根路径\">\n>     <keyword regex=\"HTTP/1.1 200 OK\" />\n> </checker>\n",
				"html": "<h2 id=\"搭建Http静态服务器环境\"><a href=\"#搭建Http静态服务器环境\" class=\"headerlink\" title=\"搭建Http静态服务器环境\"></a>搭建Http静态服务器环境</h2><p>搭建静态网站，首先需要部署环境。下面的步骤，将告诉大家如何在服务器上通过 Nginx 部署 HTTP 静态服务。</p>\n<h3 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h3><p>在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx -y</span><br></pre></td></tr></table></figure>\n<p>安装完成后，使用 <code>nginx</code> 命令启动 Nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n<p>此时，访问 测试地址 可以看到 Nginx 的测试页面</p>\n<blockquote>\n<bubble for=\"help\"><br>如果无法访问，请重试用 <code>nginx -s reload</code> 命令重启 Nginx<br></bubble>\n</blockquote>\n<blockquote>\n<checker type=\"output-contains\" command=\"ls /usr/sbin/\" hint=\"Nginx 未安装\"><br>    <keyword regex=\"nginx\"><br></keyword></checker>\n</blockquote>\n<blockquote>\n<checker type=\"output-contains\" command=\"netstat -nltp\" hint=\"Nginx 未启动\"><br>    <keyword regex=\"nginx\"><br>    <keyword regex=\"80\"><br></keyword></keyword></checker>\n</blockquote>\n<h3 id=\"配置静态服务器访问路径\"><a href=\"#配置静态服务器访问路径\" class=\"headerlink\" title=\"配置静态服务器访问路径\"></a>配置静态服务器访问路径</h3><p>外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置静态资源的路径信息才能通过 url 正确访问到服务器上的静态资源。</p>\n<p>打开 Nginx 的默认配置文件 [/etc/nginx/nginx.conf] ，修改 Nginx 配置，将默认的 <code>root /usr/share/nginx/html;</code> 修改为: <code>root /data/www;</code>，如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;example verb=\"edit\" file=\"/etc/nginx/nginx.conf\" /&gt;</span><br><span class=\"line\"><span class=\"attribute\">user</span> nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> auto;</span><br><span class=\"line\"><span class=\"attribute\">error_log</span> /var/log/nginx/error.log;</span><br><span class=\"line\"><span class=\"attribute\">pid</span> /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">include</span> /usr/share/nginx/modules/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] \"<span class=\"variable\">$request</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> \"<span class=\"variable\">$http_referer</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"<span class=\"variable\">$http_user_agent</span>\" \"<span class=\"variable\">$http_x_forwarded_for</span>\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>            <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">tcp_nopush</span>          <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">tcp_nodelay</span>         <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>   <span class=\"number\">65</span>;</span><br><span class=\"line\">    <span class=\"attribute\">types_hash_max_size</span> <span class=\"number\">2048</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span>             /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>        application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       [::]:<span class=\"number\">80</span> default_server;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  _;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>         /data/www;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">include</span> /etc/nginx/default.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /50x.html;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件将 [/data/www/static][data-www-static-path] 作为所有静态资源请求的根路径，如访问: <code>http://xxx.xxx.xxx.xxx/static/index.js</code>，将会去 [/data/www/static/][data-www-static-path] 目录下去查找 <code>index.js</code>。现在我们需要重启 Nginx 让新的配置生效，如：</p>\n<blockquote>\n<locate for=\"data-www-static-path\" path=\"/data/www/static\" hint=\"这里是所有静态资源请求的根路径\">\n</locate></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>重启后，现在我们应该已经可以使用我们的静态服务器了，现在让我们新建一个静态文件，查看服务是否运行正常。</p>\n<p>首先让我们在 [/data][data-path] 目录 下创建 <code>www</code> 目录，如：</p>\n<blockquote>\n<locate for=\"data\" path=\"/data/www\" hint=\"该目录作为服务器的根目录使用\">\n</locate></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/www</span><br></pre></td></tr></table></figure>\n<blockquote>\n<locate for=\"1\" path=\"/etc/nginx/nginx.conf\" hint=\"编辑默认服务器配置，修改网站的根路径\">\n</locate></blockquote>\n<blockquote>\n<checker type=\"output-contains\" command=\"ls /data/ -la\" hint=\"在 `/data`目录 下创建 `/www`目录\"><br>    <keyword regex=\"www\"><br></keyword></checker>\n</blockquote>\n<h3 id=\"创建第一个静态文件\"><a href=\"#创建第一个静态文件\" class=\"headerlink\" title=\"创建第一个静态文件\"></a>创建第一个静态文件</h3><p>在 [/data/www] 目录下创建我们的第一个静态文件 [index.html]</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// <span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">verb</span>=<span class=\"string\">\"edit\"</span> <span class=\"attr\">file</span>=<span class=\"string\">\"/data/www/index.html\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>第一个静态文件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">Hello world！</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在访问 [<a href=\"http://xxx.xxx.xxx.xxx/index.html]\" target=\"_blank\" rel=\"noopener\">http://xxx.xxx.xxx.xxx/index.html]</a> 应该可以看到页面输出 [Hello world!][indicate-hello-world] </p>\n<p>到此，一个基于 Nginx 的静态服务器就搭建完成了，现在所有放在 [/data/www] 目录下的的静态资源都可以直接通过域名访问。</p>\n<blockquote>\n<locate for=\"data-www-path\" path=\"/data/www\" hint=\"/data/www 是服务器的根目录\">\n</locate></blockquote>\n<blockquote>\n<locate for=\"1\" path=\"/data/www\" hint=\"添加 index.html 文件\">\n</locate></blockquote>\n<blockquote>\n<bubble for=\"indicate-hello-world\"><br>如果无显示，请刷新浏览器页面<br></bubble>\n</blockquote>\n<blockquote>\n<checker type=\"output-contains\" command=\"curl -I --silent http://xxx.xxx.xxx.xxx\" hint=\"配置 Nginx 静态服务根路径\"><br>    <keyword regex=\"HTTP/1.1 200 OK\"><br></keyword></checker>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1505718829000,
				"created_by": 2,
				"updated_at": 1520838864000,
				"updated_by": 2,
				"published_at": 1505718829000,
				"published_by": 2
			},
			{
				"id": "cjf28iam0000ccu7t7nj75db3",
				"title": "facebook immutable.js 意义何在",
				"slug": "facebook-immutable-js",
				"markdown": "\n\n\n\nJavascript中对象都是参考类型，也就是a={a:1}; b=a; b.a=10;你发现a.a也变成10了。可变的好处是节省内存或是利用可变性做一些事情，但是，在复杂的开发中它的副作用远比好处大的多。于是才有了浅copy和深copy，就是为了解决这个问题。\n\n\n举个常见例子：\n\n```\n\nvar  defaultConfig = { /* 默认值 */};\nvar config = $.extend({}, defaultConfig,initConfig); \n// jQuery用法。initConfig是自定义值\nvar config = $.extend(true, {}, defaultConfig, initConfig); \n//如果对象是多层的，就用到deep-copy\n\n```\n\n了`ES6`出现原生的`assign`方法，但它相当于是`浅copy`。如果有了不可变的数据结构就省心了，`ES5.1`中对象有了`freeze`方法，也是`浅copy`，\n\n\n```\na=Object.freeze({a:1}); \nb=a; b.a=10;\n\na.a还是1。在实际开发中浅copy通常不够。\n```\n\n\n如果用immutableJS:\n\n```\n\nvar  defaultConfig = Immutable.fromJS({ /* 默认值 */}); \nvar config = defaultConfig.merge(initConfig); \n// defaultConfig不会改变，返回新值给config\nvar config = defaultConfig.mergeDeep(initConfig);//深层merge\n\n\n```\n\n上述用deep-copy也可以做到，差别在于性能。每次`deep-copy`都要把整个对象递归的复制一份。而`immutable`的实现有些像`链表`，添加一个新结点把旧结点的父子关系转移到新结点上，性能提升很多，想深挖原理请看这里：\n\n[Persistent data structure](https://en.wikipedia.org/wiki/Persistent_data_structure)。\n\nImmutableJS给的远不止这些，它提供了7种不可变的数据结构：`List`, `Stack`, `Map`, `OrderedMap`, `Set`, `OrderedSet`, `Record` （详见文档[Immutable.js](http://facebook.github.io/immutable-js/docs/#/)，文档很geek，打开console试吧）。\n\nimmutableJS ＋ 原生Javascript等于真正的函数式编程。遍历对象不再用`for-in`，可以这样:\n\n```\nImmutable.fromJS({a:1, b:2, c:3}).map(function(value, key) { /* do some thing */});\n实现一个map-reduce:\nvar o = Immutable.fromJS({a:{a:1}, b:{a:2}, c:{a:3}});\no.map(function(e){ return e.get('a'); }).reduce(function(e1, e2){ return e1 + e2; }, 0);\n修改藏在深处的值，可以这样：\nvar o = Immutable.fromJS({a:[{a1:1}, {b:[{t:1}]}, {c1:2}], b:2, c:3});\no = o.setIn(['a', 1, 'b', 0, 't'], 100);  \n// t赋值o = o.updateIn(['a', 1, 'b', 0, 't'], function(e){ return e * 100; }); // t * 100\n\n比较两个对象是否完全相等:\no1.equals(o2)\n```\n\n\n远不止这些，`immutableJS`提供了强大的api自己去看吧。由于是不可变的，可以放心的对对象进行任意操作。在`React`开发中，频繁操作state对象或是store，配合immutableJS快、安全、方便。\n\n\n\n>form链接：https://www.zhihu.com/question/28016223/answer/50154351\n",
				"html": "<p>Javascript中对象都是参考类型，也就是a={a:1}; b=a; b.a=10;你发现a.a也变成10了。可变的好处是节省内存或是利用可变性做一些事情，但是，在复杂的开发中它的副作用远比好处大的多。于是才有了浅copy和深copy，就是为了解决这个问题。</p>\n<p>举个常见例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var  defaultConfig = &#123; /* 默认值 */&#125;;</span><br><span class=\"line\">var config = $.extend(&#123;&#125;, defaultConfig,initConfig); </span><br><span class=\"line\">// jQuery用法。initConfig是自定义值</span><br><span class=\"line\">var config = $.extend(true, &#123;&#125;, defaultConfig, initConfig); </span><br><span class=\"line\">//如果对象是多层的，就用到deep-copy</span><br></pre></td></tr></table></figure>\n<p>了<code>ES6</code>出现原生的<code>assign</code>方法，但它相当于是<code>浅copy</code>。如果有了不可变的数据结构就省心了，<code>ES5.1</code>中对象有了<code>freeze</code>方法，也是<code>浅copy</code>，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=Object.freeze(&#123;a:1&#125;); </span><br><span class=\"line\">b=a; b.a=10;</span><br><span class=\"line\"></span><br><span class=\"line\">a.a还是1。在实际开发中浅copy通常不够。</span><br></pre></td></tr></table></figure>\n<p>如果用immutableJS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var  defaultConfig = Immutable.fromJS(&#123; /* 默认值 */&#125;); </span><br><span class=\"line\">var config = defaultConfig.merge(initConfig); </span><br><span class=\"line\">// defaultConfig不会改变，返回新值给config</span><br><span class=\"line\">var config = defaultConfig.mergeDeep(initConfig);//深层merge</span><br></pre></td></tr></table></figure>\n<p>上述用deep-copy也可以做到，差别在于性能。每次<code>deep-copy</code>都要把整个对象递归的复制一份。而<code>immutable</code>的实现有些像<code>链表</code>，添加一个新结点把旧结点的父子关系转移到新结点上，性能提升很多，想深挖原理请看这里：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Persistent_data_structure\" target=\"_blank\" rel=\"noopener\">Persistent data structure</a>。</p>\n<p>ImmutableJS给的远不止这些，它提供了7种不可变的数据结构：<code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code>, <code>Record</code> （详见文档<a href=\"http://facebook.github.io/immutable-js/docs/#/\" target=\"_blank\" rel=\"noopener\">Immutable.js</a>，文档很geek，打开console试吧）。</p>\n<p>immutableJS ＋ 原生Javascript等于真正的函数式编程。遍历对象不再用<code>for-in</code>，可以这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Immutable.fromJS(&#123;a:1, b:2, c:3&#125;).map(function(value, key) &#123; /* do some thing */&#125;);</span><br><span class=\"line\">实现一个map-reduce:</span><br><span class=\"line\">var o = Immutable.fromJS(&#123;a:&#123;a:1&#125;, b:&#123;a:2&#125;, c:&#123;a:3&#125;&#125;);</span><br><span class=\"line\">o.map(function(e)&#123; return e.get(&apos;a&apos;); &#125;).reduce(function(e1, e2)&#123; return e1 + e2; &#125;, 0);</span><br><span class=\"line\">修改藏在深处的值，可以这样：</span><br><span class=\"line\">var o = Immutable.fromJS(&#123;a:[&#123;a1:1&#125;, &#123;b:[&#123;t:1&#125;]&#125;, &#123;c1:2&#125;], b:2, c:3&#125;);</span><br><span class=\"line\">o = o.setIn([&apos;a&apos;, 1, &apos;b&apos;, 0, &apos;t&apos;], 100);  </span><br><span class=\"line\">// t赋值o = o.updateIn([&apos;a&apos;, 1, &apos;b&apos;, 0, &apos;t&apos;], function(e)&#123; return e * 100; &#125;); // t * 100</span><br><span class=\"line\"></span><br><span class=\"line\">比较两个对象是否完全相等:</span><br><span class=\"line\">o1.equals(o2)</span><br></pre></td></tr></table></figure>\n<p>远不止这些，<code>immutableJS</code>提供了强大的api自己去看吧。由于是不可变的，可以放心的对对象进行任意操作。在<code>React</code>开发中，频繁操作state对象或是store，配合immutableJS快、安全、方便。</p>\n<blockquote>\n<p>form链接：<a href=\"https://www.zhihu.com/question/28016223/answer/50154351\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/28016223/answer/50154351</a></p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1505717854000,
				"created_by": 2,
				"updated_at": 1520839939000,
				"updated_by": 2,
				"published_at": 1505717854000,
				"published_by": 2
			},
			{
				"id": "cjf28iam5000gcu7txn653xie",
				"title": "html5视频方案",
				"slug": "h5-video",
				"markdown": "\n\n\n## 方案1：播放本地视频源（`.mp4`文件）\n\n\n\n> 说明：\n> \n> 由于 `h5` 的`video`标签，使用的是浏览器内置的播放器，播放器的样式与平台的不同各式各样。为了统一视频展现形式，建议放一个带播放按钮样式的视频的截图，然后把图片盖在视频区域上，点击图片，通过js调用的形式，视频播放。\n> \n> 把实例代码拷贝到`.html`文件中运行，最好在手机上查看效果。pc上播放基本相同，手机上播放不大相同。\n\n\n这个是带播放按钮的视频截图\n\n\n![image](http://img.haihu.com/0116110390a5c6ef42f14e6fac5fdf75fef3d2e0.png)\n\n实例代码\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>H5 视频播放 mp4</title>\n\t\t<script src=\"https://g.alicdn.com/mtb/??lib-flexible/0.3.2/flexible_css.js,lib-flexible/0.3.2/flexible.js\"></script>\n\t</head>\n\n\t<body>\n\t\t<style type=\"text/css\">\n\t\t\t* {\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\thtml,\n\t\t\tbody {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\twidth: 10rem;\n\t\t\t\tmargin: 0 auto;\n\t\t\t}\n\t\t\tdiv,\n\t\t\tp,\n\t\t\timg {\n\t\t\t\tbox-sizing: content-box;\n\t\t\t}\n\t\t\t\n\t\t\t.content {\n\t\t\t\twidth: 10rem;\n\t\t\t}\n\t\t\t.mp4 {\n\t\t\t\theight: 5.78125rem;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t\n\t\t\tvideo {\n\t\t\t\tposition: absolute;\n\t\t\t\tz-index: 1;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 5.78125rem;\n\t\t\t}\n\t\t\t\n\t\t\t.video-play {\n\t\t\t\tz-index: 2;\n\t\t\t\tposition: absolute;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 5.78125rem;\n\t\t\t}\n\t\t\t\n\t\t\tp {\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t</style>\n\n\t\t<div class=\"content\">\n\t\t\t<p>这里是内容</p>\n\t\t\t<p>这里是内容</p>\n\t\t\t<p>这里是内容</p>\n\t\t\t<div class=\"mp4\">\n\t\t\t\t<video id=\"szjVideo\" preload=\"auto\" x-webkit-airplay=\"true\" webkit-playsinline=\"true\" controls=\"controls\">\n\t\t\t\t\t<source type=\"video/mp4\" src=\"http://img.haihu.com/01161102914fb7f5262d4f898ad3a6cfc1db35cc.mp4\">\n\t\t\t\t</video>\n\t\t\t\t<img class=\"video-play\" id=\"play\" src=\"http://img.haihu.com/0116110390a5c6ef42f14e6fac5fdf75fef3d2e0.png\" />\n\t\t\t</div>\n\t\t\t<p>这里是内容</p>\n\t\t\t<p>这里是内容</p>\n\t\t\t<p>这里是内容</p>\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\t//图片播放按钮\n\t\t\tvar videoImgPlay = document.getElementById(\"play\");\n\t\t\t//点击图片播放\n\t\t\tvideoImgPlay.onclick = function() {\n\t\t\t\tvar videoPlay = true;\n\t\t\t\tvar video = document.getElementById(\"szjVideo\");\n\t\t\t\tif(videoPlay) {\n\t\t\t\t\tvideoPlay = false;\n\t\t\t\t\tvideoImgPlay.style.display = 'none';\n\t\t\t\t\tvideo.play();\n\t\t\t\t} else {\n\t\t\t\t\tvideoImgPlay.style.display = 'block';\n\t\t\t\t\tvideoPlay = true;\n\t\t\t\t\tvideo.pause();\n\t\t\t\t}\n\t\t\t\t//监听视频播放完成\n\t\t\t\tvideo.addEventListener('ended', function() {\n\t\t\t\t\tconsole.log(\"end\");\n\t\t\t\t\tvideoPlay = true;\n\t\t\t\t\tvideoImgPlay.style.display = 'block';\n\t\t\t\t});\n\t\t\t}\n\t\t</script>\n\t</body>\n\n</html>\n```\n\n运行效果：\n\n![image](https://img.alicdn.com/imgextra/i3/2296013456/TB2JbF3aC.EF1JjSZPcXXaxaFXa_!!2296013456.jpg)\n\n\n\n\n\n\n## 方案2：播放外部视频资源（优酷为例）\n\n外部链接视频 以`优酷`为例，去优酷播放页面找到下面`iframe`链接，放到html指定区域中\n\n\n![image](https://img.alicdn.com/imgextra/i3/2296013456/TB29c5xap6.F1JjSZFpXXcZjXXa_!!2296013456.png)\n\n\n> 由于是外部资源，而且是`iframe`导入的页面，所以`js`、`css`没办法对其做操作，他们的样式、交互、展示内容**没办法控制**。\n\n实例代码：\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>H5外链 优酷视频 播放</title>\n\t\t<script src=\"https://g.alicdn.com/mtb/??lib-flexible/0.3.2/flexible_css.js,lib-flexible/0.3.2/flexible.js\"></script>\n\t</head>\n\n\t<body>\n\t\t<style type=\"text/css\">\n\t\t\t* {\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\thtml,\n\t\t\tbody {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t\n\t\t\tbody {\n\t\t\t\twidth: 10rem;\n\t\t\t\tmargin: 0 auto;\n\t\t\t}\n\t\t\tp {\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t</style>\n\n\t\t<p>\n\t\t\t这里是内容\n\t\t</p>\n\t\t<p>\n\t\t\t这里是内容\n\t\t</p>\n\t\t<iframe style=\"height: 6.25rem;width: 10rem;\" src='http://player.youku.com/embed/XMjk1MDIzMTY0OA==' frameborder=0 'allowfullscreen'></iframe>\n\t\t<p>\n\t\t\t这里是内容\n\t\t</p>\n\t\t<p>\n\t\t\t这里是内容\n\t\t</p>\n\t\t<p>\n\t\t\t这里是内容\n\t\t</p>\n\t\t<p>\n\t\t\t这里是内容\n\t\t</p>\n\t</body>\n\n</html>\n\n```\n\n运行效果：\n\n![image](https://img.alicdn.com/imgextra/i3/2296013456/TB2elmDaxr9F1JjSZPfXXawbFXa_!!2296013456.jpg)\n",
				"html": "<h2 id=\"方案1：播放本地视频源（-mp4文件）\"><a href=\"#方案1：播放本地视频源（-mp4文件）\" class=\"headerlink\" title=\"方案1：播放本地视频源（.mp4文件）\"></a>方案1：播放本地视频源（<code>.mp4</code>文件）</h2><blockquote>\n<p>说明：</p>\n<p>由于 <code>h5</code> 的<code>video</code>标签，使用的是浏览器内置的播放器，播放器的样式与平台的不同各式各样。为了统一视频展现形式，建议放一个带播放按钮样式的视频的截图，然后把图片盖在视频区域上，点击图片，通过js调用的形式，视频播放。</p>\n<p>把实例代码拷贝到<code>.html</code>文件中运行，最好在手机上查看效果。pc上播放基本相同，手机上播放不大相同。</p>\n</blockquote>\n<p>这个是带播放按钮的视频截图</p>\n<p><img src=\"http://img.haihu.com/0116110390a5c6ef42f14e6fac5fdf75fef3d2e0.png\" alt=\"image\"></p>\n<p>实例代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;H5 视频播放 mp4&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://g.alicdn.com/mtb/??lib-flexible/0.3.2/flexible_css.js,lib-flexible/0.3.2/flexible.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t\t* &#123;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\thtml,</span><br><span class=\"line\">\t\t\tbody &#123;</span><br><span class=\"line\">\t\t\t\twidth: 100%;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbody &#123;</span><br><span class=\"line\">\t\t\t\twidth: 10rem;</span><br><span class=\"line\">\t\t\t\tmargin: 0 auto;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tdiv,</span><br><span class=\"line\">\t\t\tp,</span><br><span class=\"line\">\t\t\timg &#123;</span><br><span class=\"line\">\t\t\t\tbox-sizing: content-box;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t.content &#123;</span><br><span class=\"line\">\t\t\t\twidth: 10rem;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t.mp4 &#123;</span><br><span class=\"line\">\t\t\t\theight: 5.78125rem;</span><br><span class=\"line\">\t\t\t\twidth: 100%;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tvideo &#123;</span><br><span class=\"line\">\t\t\t\tposition: absolute;</span><br><span class=\"line\">\t\t\t\tz-index: 1;</span><br><span class=\"line\">\t\t\t\twidth: 100%;</span><br><span class=\"line\">\t\t\t\theight: 5.78125rem;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t.video-play &#123;</span><br><span class=\"line\">\t\t\t\tz-index: 2;</span><br><span class=\"line\">\t\t\t\tposition: absolute;</span><br><span class=\"line\">\t\t\t\twidth: 100%;</span><br><span class=\"line\">\t\t\t\theight: 5.78125rem;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tp &#123;</span><br><span class=\"line\">\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这里是内容&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这里是内容&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这里是内容&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;div class=&quot;mp4&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;video id=&quot;szjVideo&quot; preload=&quot;auto&quot; x-webkit-airplay=&quot;true&quot; webkit-playsinline=&quot;true&quot; controls=&quot;controls&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;source type=&quot;video/mp4&quot; src=&quot;http://img.haihu.com/01161102914fb7f5262d4f898ad3a6cfc1db35cc.mp4&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/video&gt;</span><br><span class=\"line\">\t\t\t\t&lt;img class=&quot;video-play&quot; id=&quot;play&quot; src=&quot;http://img.haihu.com/0116110390a5c6ef42f14e6fac5fdf75fef3d2e0.png&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这里是内容&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这里是内容&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这里是内容&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\t//图片播放按钮</span><br><span class=\"line\">\t\t\tvar videoImgPlay = document.getElementById(&quot;play&quot;);</span><br><span class=\"line\">\t\t\t//点击图片播放</span><br><span class=\"line\">\t\t\tvideoImgPlay.onclick = function() &#123;</span><br><span class=\"line\">\t\t\t\tvar videoPlay = true;</span><br><span class=\"line\">\t\t\t\tvar video = document.getElementById(&quot;szjVideo&quot;);</span><br><span class=\"line\">\t\t\t\tif(videoPlay) &#123;</span><br><span class=\"line\">\t\t\t\t\tvideoPlay = false;</span><br><span class=\"line\">\t\t\t\t\tvideoImgPlay.style.display = &apos;none&apos;;</span><br><span class=\"line\">\t\t\t\t\tvideo.play();</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tvideoImgPlay.style.display = &apos;block&apos;;</span><br><span class=\"line\">\t\t\t\t\tvideoPlay = true;</span><br><span class=\"line\">\t\t\t\t\tvideo.pause();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t//监听视频播放完成</span><br><span class=\"line\">\t\t\t\tvideo.addEventListener(&apos;ended&apos;, function() &#123;</span><br><span class=\"line\">\t\t\t\t\tconsole.log(&quot;end&quot;);</span><br><span class=\"line\">\t\t\t\t\tvideoPlay = true;</span><br><span class=\"line\">\t\t\t\t\tvideoImgPlay.style.display = &apos;block&apos;;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行效果：</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i3/2296013456/TB2JbF3aC.EF1JjSZPcXXaxaFXa_!!2296013456.jpg\" alt=\"image\"></p>\n<h2 id=\"方案2：播放外部视频资源（优酷为例）\"><a href=\"#方案2：播放外部视频资源（优酷为例）\" class=\"headerlink\" title=\"方案2：播放外部视频资源（优酷为例）\"></a>方案2：播放外部视频资源（优酷为例）</h2><p>外部链接视频 以<code>优酷</code>为例，去优酷播放页面找到下面<code>iframe</code>链接，放到html指定区域中</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i3/2296013456/TB29c5xap6.F1JjSZFpXXcZjXXa_!!2296013456.png\" alt=\"image\"></p>\n<blockquote>\n<p>由于是外部资源，而且是<code>iframe</code>导入的页面，所以<code>js</code>、<code>css</code>没办法对其做操作，他们的样式、交互、展示内容<strong>没办法控制</strong>。</p>\n</blockquote>\n<p>实例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;H5外链 优酷视频 播放&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://g.alicdn.com/mtb/??lib-flexible/0.3.2/flexible_css.js,lib-flexible/0.3.2/flexible.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t\t* &#123;</span><br><span class=\"line\">\t\t\t\tpadding: 0;</span><br><span class=\"line\">\t\t\t\tmargin: 0;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\thtml,</span><br><span class=\"line\">\t\t\tbody &#123;</span><br><span class=\"line\">\t\t\t\twidth: 100%;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tbody &#123;</span><br><span class=\"line\">\t\t\t\twidth: 10rem;</span><br><span class=\"line\">\t\t\t\tmargin: 0 auto;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tp &#123;</span><br><span class=\"line\">\t\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t这里是内容</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t这里是内容</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;iframe style=&quot;height: 6.25rem;width: 10rem;&quot; src=&apos;http://player.youku.com/embed/XMjk1MDIzMTY0OA==&apos; frameborder=0 &apos;allowfullscreen&apos;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t这里是内容</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t这里是内容</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t这里是内容</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t这里是内容</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行效果：</p>\n<p><img src=\"https://img.alicdn.com/imgextra/i3/2296013456/TB2elmDaxr9F1JjSZPfXXawbFXa_!!2296013456.jpg\" alt=\"image\"></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1502176003000,
				"created_by": 2,
				"updated_at": 1520838438000,
				"updated_by": 2,
				"published_at": 1502176003000,
				"published_by": 2
			},
			{
				"id": "cjf28ialr0004cu7t6pd9ehs0",
				"title": "linux centos7 初始化安装软件运行环境",
				"slug": "centos7-initialization",
				"markdown": "\n\n## centos 7 安装 nginx，配置https 以及注意事项\n\n\n```bash\nyum install -y nginx\n\n```\n\n却发现一直提示`No package nginx available`\n\n尝试安装\n\n```bash\nyum install -y epel-release\n```\n\n\n```bash\nyum repolist\n```\n\n```bash\n# 首先进入/yum.repos.d目录\ncd /etc/yum.repos.d\n\n# 然后编辑epel.repo文件\nvi epel.repo\n\n[epel]\nname=Extra Packages for Enterprise Linux 7 - $basearch\n#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=$basearch\nfailovermethod=priority\nenabled=0\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\n\n[epel-debuginfo]\nname=Extra Packages for Enterprise Linux 7 - $basearch - Debug\n#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch/debug\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&arch=$basearch\nfailovermethod=priority\nenabled=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\ngpgcheck=1\n\n[epel-source]\nname=Extra Packages for Enterprise Linux 7 - $basearch - Source\n#baseurl=http://download.fedoraproject.org/pub/epel/7/SRPMS\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&arch=$basearch\nfailovermethod=priority\nenabled=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\ngpgcheck=1\n\n```\n\n可以看到，`[epel]`和`[epel-source]`里面的enabled都是`0`，解决办法就在这里，只要把`0`改成`1`，保存退出后即可。\n\n\n现在我们重新运行`yum repolist`，会发现`epel`源已经被加上了：\n\n```\n源标识                          源名称                                                                      状态\nbase/7/x86_64                   CentOS-7 - Base                                                             9,590+1\nelrepo-kernel                   ELRepo.org Community Enterprise Linux Kernel Repository - el7                    37\nepel/x86_64                     Extra Packages for Enterprise Linux 7 - x86_64                               12,277\nepel-source/x86_64              Extra Packages for Enterprise Linux 7 - x86_64 - Source                           0\nextras/7/x86_64                 CentOS-7 - Extras                                                               388\nnodesource/x86_64               Node.js Packages for Enterprise Linux 7 - x86_64                                 22\nupdates/7/x86_64                CentOS-7 - Updates                                                          1,922+7\nrepolist: 24,236\n\n```\n\n\n再执行`yum install -y nginx`，发现终于能够成功安装了！\n\n启动nginx\n\n```\nservice nginx statrt #启动\nservice nginx stop\nservice nginx restart\nservice nginx status\n\n```\n\n\n## 使用HTTPS\n\n首先通过yum下载安装certbot：\n\n```\nyum install certbot\n```\n\n进入`/etc/nginx`，然后编辑`nginx.conf`，在`server`里面添加下列两个`location`规则：\n\n```\nlocation ^~ /.well-known/acme-challenge/ {\n   default_type \"text/plain\";\n   root     /usr/share/nginx/html;\n}\n\nlocation = /.well-known/acme-challenge/ {\n   return 404;\n}\n\n```\n\n\n可以看到，上面的root我是指向了`/usr/share/nginx/html`，这个目录是可以随便指定的，我这么写完全是为了偷懒。\n\nnginx配置好了以后，就可以使用`certbot`生成证书了：\n\n```\n# certbot certonly --webroot -w <root url> -d <hostname>\n\ncertbot certonly --webroot -w /usr/share/nginx/html/ -d xueshanshan.com\n\n```\n\n\n如果看到下列的输出，就证明证书已经生成成功了：\n\n```\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/xueshanshan.com/fullchain.pem. Your cert\n   will expire on 20XX-09-23. To obtain a new or tweaked version of\n   this certificate in the future, simply run certbot again. To\n   non-interactively renew *all* of your certificates, run \"certbot\n   renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n   \n   \n```\n\n\n证书已经准备好了，我们还需要`nginx`的支持。重新打开`/etc/nginx/nginx.conf`，然后把注释掉的`https server`给[注释]回来：\n\n```\n\nserver {\n    listen       443 ssl http2 default_server;\n    listen       [::]:443 ssl http2 default_server;\n    server_name  xueshanshan.com;\n    root         /home/www;\n\n    ssl_certificate \"/etc/letsencrypt/live/xueshanshan.com/fullchain.pem\";\n    ssl_certificate_key \"/etc/letsencrypt/live/xueshanshan.com/privkey.pem\";\n    ssl_trusted_certificate /etc/letsencrypt/live/xueshanshan.com/chain.pem;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n}\n\n```\n\nps: 上面的root我给配置了`/home/www`目录，意味着以后只要是放在该目录下的静态资源文件夹，我都可以通过`https://xxx.com/文件夹名`直接进行访问，更多关于`nginx`的配置请参考官方文档。\n\n\n最后重启一下`nginx`，就可以检验我们的页面是否已经打上小绿标了\n\n```\nservice nginx restart\n```\n\n\n由于`certbot`所使用的`letsencrypt`证书只有`90天`的有效期，所以我们需要对它定期`自动更新`\n\n\n首先模拟更新：\n\n```\nsudo certbot renew --dry-run\n\n# 看到如下输出证明模拟更新成功\n-------------------------------------------------------------------------------\nProcessing /etc/letsencrypt/renewal/your.domain.com.conf\n-------------------------------------------------------------------------------\n** DRY RUN: simulating 'certbot renew' close to cert expiry\n**          (The test certificates below have not been saved.)\n\nCongratulations, all renewals succeeded. The following certs have been renewed:\n  /etc/letsencrypt/live/xueshanshan.com/fullchain.pem (success)\n** DRY RUN: simulating 'certbot renew' close to cert expiry\n**          (The test certificates above have not been saved.)\n\n```\n\n然后就可以使用`crontab -e`命令来实现自动化了：\n\n```\nsudo crontab -e\n\n#添加配置，每周一半夜3点00分执行renew：\n\n00 3 * * 1 /usr/bin/certbot renew  >> /var/log/le-renew.log\n\n```\n",
				"html": "<h2 id=\"centos-7-安装-nginx，配置https-以及注意事项\"><a href=\"#centos-7-安装-nginx，配置https-以及注意事项\" class=\"headerlink\" title=\"centos 7 安装 nginx，配置https 以及注意事项\"></a>centos 7 安装 nginx，配置https 以及注意事项</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n<p>却发现一直提示<code>No package nginx available</code></p>\n<p>尝试安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先进入/yum.repos.d目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/yum.repos.d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后编辑epel.repo文件</span></span><br><span class=\"line\">vi epel.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[epel]</span><br><span class=\"line\">name=Extra Packages <span class=\"keyword\">for</span> Enterprise Linux 7 - <span class=\"variable\">$basearch</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span></span><br><span class=\"line\">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=<span class=\"variable\">$basearch</span></span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class=\"line\"></span><br><span class=\"line\">[epel-debuginfo]</span><br><span class=\"line\">name=Extra Packages <span class=\"keyword\">for</span> Enterprise Linux 7 - <span class=\"variable\">$basearch</span> - Debug</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch/debug</span></span><br><span class=\"line\">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=<span class=\"variable\">$basearch</span></span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"></span><br><span class=\"line\">[epel-source]</span><br><span class=\"line\">name=Extra Packages <span class=\"keyword\">for</span> Enterprise Linux 7 - <span class=\"variable\">$basearch</span> - Source</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://download.fedoraproject.org/pub/epel/7/SRPMS</span></span><br><span class=\"line\">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=<span class=\"variable\">$basearch</span></span><br><span class=\"line\">failovermethod=priority</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class=\"line\">gpgcheck=1</span><br></pre></td></tr></table></figure>\n<p>可以看到，<code>[epel]</code>和<code>[epel-source]</code>里面的enabled都是<code>0</code>，解决办法就在这里，只要把<code>0</code>改成<code>1</code>，保存退出后即可。</p>\n<p>现在我们重新运行<code>yum repolist</code>，会发现<code>epel</code>源已经被加上了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">源标识                          源名称                                                                      状态</span><br><span class=\"line\">base/7/x86_64                   CentOS-7 - Base                                                             9,590+1</span><br><span class=\"line\">elrepo-kernel                   ELRepo.org Community Enterprise Linux Kernel Repository - el7                    37</span><br><span class=\"line\">epel/x86_64                     Extra Packages for Enterprise Linux 7 - x86_64                               12,277</span><br><span class=\"line\">epel-source/x86_64              Extra Packages for Enterprise Linux 7 - x86_64 - Source                           0</span><br><span class=\"line\">extras/7/x86_64                 CentOS-7 - Extras                                                               388</span><br><span class=\"line\">nodesource/x86_64               Node.js Packages for Enterprise Linux 7 - x86_64                                 22</span><br><span class=\"line\">updates/7/x86_64                CentOS-7 - Updates                                                          1,922+7</span><br><span class=\"line\">repolist: 24,236</span><br></pre></td></tr></table></figure>\n<p>再执行<code>yum install -y nginx</code>，发现终于能够成功安装了！</p>\n<p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx statrt #启动</span><br><span class=\"line\">service nginx stop</span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\">service nginx status</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用HTTPS\"><a href=\"#使用HTTPS\" class=\"headerlink\" title=\"使用HTTPS\"></a>使用HTTPS</h2><p>首先通过yum下载安装certbot：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install certbot</span><br></pre></td></tr></table></figure>\n<p>进入<code>/etc/nginx</code>，然后编辑<code>nginx.conf</code>，在<code>server</code>里面添加下列两个<code>location</code>规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">   default_type &quot;text/plain&quot;;</span><br><span class=\"line\">   root     /usr/share/nginx/html;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location = /.well-known/acme-challenge/ &#123;</span><br><span class=\"line\">   return 404;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，上面的root我是指向了<code>/usr/share/nginx/html</code>，这个目录是可以随便指定的，我这么写完全是为了偷懒。</p>\n<p>nginx配置好了以后，就可以使用<code>certbot</code>生成证书了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># certbot certonly --webroot -w &lt;root url&gt; -d &lt;hostname&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">certbot certonly --webroot -w /usr/share/nginx/html/ -d xueshanshan.com</span><br></pre></td></tr></table></figure>\n<p>如果看到下列的输出，就证明证书已经生成成功了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at</span><br><span class=\"line\">   /etc/letsencrypt/live/xueshanshan.com/fullchain.pem. Your cert</span><br><span class=\"line\">   will expire on 20XX-09-23. To obtain a new or tweaked version of</span><br><span class=\"line\">   this certificate in the future, simply run certbot again. To</span><br><span class=\"line\">   non-interactively renew *all* of your certificates, run &quot;certbot</span><br><span class=\"line\">   renew&quot;</span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<p>证书已经准备好了，我们还需要<code>nginx</code>的支持。重新打开<code>/etc/nginx/nginx.conf</code>，然后把注释掉的<code>https server</code>给[注释]回来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl http2 default_server;</span><br><span class=\"line\">    listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">    server_name  xueshanshan.com;</span><br><span class=\"line\">    root         /home/www;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate &quot;/etc/letsencrypt/live/xueshanshan.com/fullchain.pem&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;/etc/letsencrypt/live/xueshanshan.com/privkey.pem&quot;;</span><br><span class=\"line\">    ssl_trusted_certificate /etc/letsencrypt/live/xueshanshan.com/chain.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Load configuration files for the default server block.</span><br><span class=\"line\">    include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ps: 上面的root我给配置了<code>/home/www</code>目录，意味着以后只要是放在该目录下的静态资源文件夹，我都可以通过<code>https://xxx.com/文件夹名</code>直接进行访问，更多关于<code>nginx</code>的配置请参考官方文档。</p>\n<p>最后重启一下<code>nginx</code>，就可以检验我们的页面是否已经打上小绿标了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n<p>由于<code>certbot</code>所使用的<code>letsencrypt</code>证书只有<code>90天</code>的有效期，所以我们需要对它定期<code>自动更新</code></p>\n<p>首先模拟更新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot renew --dry-run</span><br><span class=\"line\"></span><br><span class=\"line\"># 看到如下输出证明模拟更新成功</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Processing /etc/letsencrypt/renewal/your.domain.com.conf</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">** DRY RUN: simulating &apos;certbot renew&apos; close to cert expiry</span><br><span class=\"line\">**          (The test certificates below have not been saved.)</span><br><span class=\"line\"></span><br><span class=\"line\">Congratulations, all renewals succeeded. The following certs have been renewed:</span><br><span class=\"line\">  /etc/letsencrypt/live/xueshanshan.com/fullchain.pem (success)</span><br><span class=\"line\">** DRY RUN: simulating &apos;certbot renew&apos; close to cert expiry</span><br><span class=\"line\">**          (The test certificates above have not been saved.)</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用<code>crontab -e</code>命令来实现自动化了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">#添加配置，每周一半夜3点00分执行renew：</span><br><span class=\"line\"></span><br><span class=\"line\">00 3 * * 1 /usr/bin/certbot renew  &gt;&gt; /var/log/le-renew.log</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1502088888000,
				"created_by": 2,
				"updated_at": 1520839788000,
				"updated_by": 2,
				"published_at": 1502088888000,
				"published_by": 2
			},
			{
				"id": "cjf28ian0001lcu7te2gnolzn",
				"title": "linux安装node-firekylin博客系统",
				"slug": "setup-firekylin-blogs",
				"markdown": "\n\n在服务器上下载安装包\n\n```bash\nwget https://firekylin.org/release/latest.tar.gz\n\n```\n解压安装包\n\n```bash\ntar zvxf latest.tar.gz\n```\n\n安装程序依赖\n\n```bash\ncd firekylin\nnpm install\n```\n\n复制项目下的 `pm2_default.json` 文件生成新文件 `pm2.json`\n\n```bash\ncp pm2_default.json pm2.json\n```\n\n修改 pm2.json 文件中的 `cwd` 配置值为项目的当前路径 `/root/firekylin`：\n\n```bash\n{\n  \"apps\": [{\n    \"name\": \"firekylin\",\n    \"script\": \"www/production.js\",\n    \"cwd\": \"/root/firekylin\",\n    \"exec_mode\": \"fork\",\n    \"max_memory_restart\": \"1G\",\n    \"autorestart\": true,\n    \"node_args\": [],\n    \"args\": [],\n    \"env\": {\n\n    }\n  }]\n}\n```\n\n然后通过以下命令启动项目\n\n```bash\npm2 startOrReload pm2.json\n```\n\n\n访问: http://【ip地址】:8360/\n",
				"html": "<p>在服务器上下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://firekylin.org/release/latest.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zvxf latest.tar.gz</span><br></pre></td></tr></table></figure>\n<p>安装程序依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> firekylin</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>复制项目下的 <code>pm2_default.json</code> 文件生成新文件 <code>pm2.json</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp pm2_default.json pm2.json</span><br></pre></td></tr></table></figure>\n<p>修改 pm2.json 文件中的 <code>cwd</code> 配置值为项目的当前路径 <code>/root/firekylin</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"apps\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"firekylin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"script\"</span>: <span class=\"string\">\"www/production.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cwd\"</span>: <span class=\"string\">\"/root/firekylin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"exec_mode\"</span>: <span class=\"string\">\"fork\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max_memory_restart\"</span>: <span class=\"string\">\"1G\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"autorestart\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"node_args\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"args\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过以下命令启动项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 startOrReload pm2.json</span><br></pre></td></tr></table></figure>\n<p>访问: http://【ip地址】:8360/</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1500965109000,
				"created_by": 2,
				"updated_at": 1520840178000,
				"updated_by": 2,
				"published_at": 1500965109000,
				"published_by": 2
			},
			{
				"id": "cjf28iamf000vcu7tr7nwri05",
				"title": "linux php环境安装与配置以及eoLinker安装",
				"slug": "linux-php",
				"markdown": "\n\n\n## 安装 XAMPP\n\n```\n下载包\nwget https://www.apachefriends.org/xampp-files/7.2.0/xampp-linux-x64-7.2.0-0-installer.run\n\n\n写权限\nchmod 755 xampp-linux-*-installer.run\n\n安装\nsudo ./xampp-linux-*-installer.run\n\n```\n\n#### start XAMPP\n\n\n```\nsudo /opt/lampp/lampp start\n```\n\n如果如下报错 请安装 \n\n```\nXAMPP: Starting Apache...already running.\nXAMPP: Starting MySQL.../opt/lampp/share/xampp/xampplib:行22: netstat: 未找到命令\nok.\nXAMPP: Starting ProFTPD.../opt/lampp/share/xampp/xampplib:行22: netstat: 未找到命令\nok.\n```\n\n请安装 \n\n```\nyum -y install net-tools\n```\n\n\n### You should now see something like this on your screen:\n\n```\nStarting XAMPP 1.8.2...\n\nLAMPP: Starting Apache...\n\nLAMPP: Starting MySQL...\n\nLAMPP started.\n\nReady. Apache and MySQL are running.\n\n```\n\n\n#### stop XAMPP\n\n\nTo stop XAMPP simply call this command:\n\n```\nsudo /opt/lampp/lampp stop\n```\n\n\nYou should now see something like this on your screen:\n\n```\n\nStopping XAMPP 1.8.2...\n\nLAMPP: Stopping Apache...\n\nLAMPP: Stopping MySQL...\n\nLAMPP stopped.\n\n```\n\n\n\n### 初始化 密码：\n\n```\n/opt/lampp/lampp security\n```\n\n下面是过程：\n\n```\n# /opt/lampp/lampp security\nXAMPP:  Quick security check...\nXAMPP:  MySQL is accessable via network.\nXAMPP: Normaly that's not recommended. Do you want me to turn it off? [yes]\nXAMPP:  Turned off.\nXAMPP: Stopping MySQL...ok.\nXAMPP: Starting MySQL...ok.\nXAMPP:  The MySQL/phpMyAdmin user pma has no password set!!!\nXAMPP: Do you want to set a password? [yes]\nXAMPP: Password:\nXAMPP: Password (again):\nXAMPP:  Setting new MySQL pma password.\nXAMPP:  Setting phpMyAdmin's pma password to the new one.\nXAMPP:  MySQL has no root passwort set!!!\nXAMPP: Do you want to set a password? [yes]\nXAMPP:  Write the password somewhere down to make sure you won't forget it!!!\nXAMPP: Password:\nXAMPP: Password (again):\nXAMPP:  Setting new MySQL root password.\nXAMPP:  Change phpMyAdmin's authentication method.\nXAMPP:  The FTP password for user 'daemon' is still set to 'xampp'.\nXAMPP: Do you want to change the password? [yes]\nXAMPP: Password:\nXAMPP: Password (again):\nXAMPP: Reload ProFTPD...ok.\nXAMPP:  Done.\n\n```\n\n#### 修改数据库密码\n\n```\n/opt/lampp/bin/mysqladmin --user=root password \"ECMA(root2018).\"\n```\n\n允许数据库 远程登录\n\n```\n//链接数据库 //新安装的数据库是没有密码的，这里直接按下回车就行 如果有密码则输入密码\nmysql -u root -p\n//设置密码 设置过了 略过\nset password for 'root'@'localhost' = password('xuess'); \n\n//为其他主机远程连接数据库开放访问权限，重新登入数据库：\n//选择mysql数据库进行操作\nuse mysql; \n \n//查看user,password,host这三个字段的权限分配情况\nselect user,password,host from user;  \n\n+------+-------------------------------------------+-----------+\n| user | password                                  | host      |\n+------+-------------------------------------------+-----------+\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | 127.0.0.1 |\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | ::1       |\n|      |                                           | localhost |\n| pma  | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |\n+------+-------------------------------------------+-----------+\n\n\n//通过以上输出可以看出数据库默认只允许用户root在本地服务器（localhost）上登录，不允许其他主机远程连接。\n\n//修改root 链接权限 *xuess* 是设置好的密码\n//这条语句将允许用户root使用密码(xuess)在任何主机上连接该数据库，并赋予该用户所有权限。\nMariaDB [mysql]> grant all privileges on *.* to root@\"%\" identified by \"xuess\";  \n//出现下面说明 生效\n> Query OK, 0 rows affected (0.01 sec)\n\n//执行 把权限缓存到 内存中 \nflush privileges\n\n//再查询一下\nselect user,password,host from user;\n+------+-------------------------------------------+-----------+\n| user | password                                  | host      |\n+------+-------------------------------------------+-----------+\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | 127.0.0.1 |\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | ::1       |\n|      |                                           | localhost |\n| pma  | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |\n| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | %         |\n+------+-------------------------------------------+-----------+\n\n\n//上面中的“%”就意味着任何主机都被允许连接数据库\n\n如果远程还链接不上，请关闭防火墙\n\nsudo systemctl stop firewalld.service && sudo systemctl disable firewalld.service\n\n\n```\n\n\n#### 目录说明\n\n```\n/opt/lampp/bin/\tXAMPP 命令库。例如 /opt/lampp/bin/mysql 可执行 MySQL 监视器。\n/opt/lampp/htdocs/\tApache 文档根目录。\n/opt/lampp/etc/httpd.conf\tApache 配置文件。\n/opt/lampp/etc/my.cnf\tMySQL 配置文件。\n/opt/lampp/etc/php.ini\tPHP 配置文件。\n/opt/lampp/etc/proftpd.conf\tProFTPD 配置文件。（从 0.9.5 版开始）\n/opt/lampp/phpmyadmin/config.inc.php phpMyAdmin 配制文件。\n\n```\n\n\n## eoLinker 安装\n\n\n```\n打开 文档目录\ncd /opt/lampp/htdocs/\n\n创建目录\nmkdir eolinker\n\n进入\ncd eolinker\n\n从git下载eoLinker 安装包 \nwget https://github.com/eolinker/eoLinker-API-Management-System-OS-3.X/raw/master/release%5B%E6%AD%A3%E5%BC%8F%E5%AE%89%E8%A3%85%E5%8C%85%5D/eolinker_os_3.2.1.zip\n\n\n解压：如果没有 unzip 命令 请安装 yum install -y unzip zip\nunzip eolinker_os_3.2.1.zip\n\n赋权限\ncd ../\nchmod 777 -R  eolinker/\n或者\nchmod 777 server/RTP/config/\n\n\n创建数据库\ncd /opt/lampp/bin/\t\n\n./mysql -u root -p\n然后 输入数据库密码\n\n\n然后进入 mysql，在 mysql 环境下 创建数据库 eolinker_os 命令\ncreate database eolinker_os;\n\n\n然后访问页面  配置和安装\n\n```\n\n\n\n由于服务器设置了xampp不允许远程访问，所以远程不能访问需要修改conf文件\n\n```\nvi /opt/lampp/etc/extra/httpd-xampp.conf\n```\n\n将`Require local`改成`Require all granted`\n\n```\n/opt/lampp/lampp restart \n重启xampp\n```\n到此xampp安装完成",
				"html": "<h2 id=\"安装-XAMPP\"><a href=\"#安装-XAMPP\" class=\"headerlink\" title=\"安装 XAMPP\"></a>安装 XAMPP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载包</span><br><span class=\"line\">wget https://www.apachefriends.org/xampp-files/7.2.0/xampp-linux-x64-7.2.0-0-installer.run</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">写权限</span><br><span class=\"line\">chmod 755 xampp-linux-*-installer.run</span><br><span class=\"line\"></span><br><span class=\"line\">安装</span><br><span class=\"line\">sudo ./xampp-linux-*-installer.run</span><br></pre></td></tr></table></figure>\n<h4 id=\"start-XAMPP\"><a href=\"#start-XAMPP\" class=\"headerlink\" title=\"start XAMPP\"></a>start XAMPP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /opt/lampp/lampp start</span><br></pre></td></tr></table></figure>\n<p>如果如下报错 请安装 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XAMPP: Starting Apache...already running.</span><br><span class=\"line\">XAMPP: Starting MySQL.../opt/lampp/share/xampp/xampplib:行22: netstat: 未找到命令</span><br><span class=\"line\">ok.</span><br><span class=\"line\">XAMPP: Starting ProFTPD.../opt/lampp/share/xampp/xampplib:行22: netstat: 未找到命令</span><br><span class=\"line\">ok.</span><br></pre></td></tr></table></figure>\n<p>请安装 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install net-tools</span><br></pre></td></tr></table></figure>\n<h3 id=\"You-should-now-see-something-like-this-on-your-screen\"><a href=\"#You-should-now-see-something-like-this-on-your-screen\" class=\"headerlink\" title=\"You should now see something like this on your screen:\"></a>You should now see something like this on your screen:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting XAMPP 1.8.2...</span><br><span class=\"line\"></span><br><span class=\"line\">LAMPP: Starting Apache...</span><br><span class=\"line\"></span><br><span class=\"line\">LAMPP: Starting MySQL...</span><br><span class=\"line\"></span><br><span class=\"line\">LAMPP started.</span><br><span class=\"line\"></span><br><span class=\"line\">Ready. Apache and MySQL are running.</span><br></pre></td></tr></table></figure>\n<h4 id=\"stop-XAMPP\"><a href=\"#stop-XAMPP\" class=\"headerlink\" title=\"stop XAMPP\"></a>stop XAMPP</h4><p>To stop XAMPP simply call this command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /opt/lampp/lampp stop</span><br></pre></td></tr></table></figure>\n<p>You should now see something like this on your screen:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Stopping XAMPP 1.8.2...</span><br><span class=\"line\"></span><br><span class=\"line\">LAMPP: Stopping Apache...</span><br><span class=\"line\"></span><br><span class=\"line\">LAMPP: Stopping MySQL...</span><br><span class=\"line\"></span><br><span class=\"line\">LAMPP stopped.</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化-密码：\"><a href=\"#初始化-密码：\" class=\"headerlink\" title=\"初始化 密码：\"></a>初始化 密码：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/lampp/lampp security</span><br></pre></td></tr></table></figure>\n<p>下面是过程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /opt/lampp/lampp security</span><br><span class=\"line\">XAMPP:  Quick security check...</span><br><span class=\"line\">XAMPP:  MySQL is accessable via network.</span><br><span class=\"line\">XAMPP: Normaly that&apos;s not recommended. Do you want me to turn it off? [yes]</span><br><span class=\"line\">XAMPP:  Turned off.</span><br><span class=\"line\">XAMPP: Stopping MySQL...ok.</span><br><span class=\"line\">XAMPP: Starting MySQL...ok.</span><br><span class=\"line\">XAMPP:  The MySQL/phpMyAdmin user pma has no password set!!!</span><br><span class=\"line\">XAMPP: Do you want to set a password? [yes]</span><br><span class=\"line\">XAMPP: Password:</span><br><span class=\"line\">XAMPP: Password (again):</span><br><span class=\"line\">XAMPP:  Setting new MySQL pma password.</span><br><span class=\"line\">XAMPP:  Setting phpMyAdmin&apos;s pma password to the new one.</span><br><span class=\"line\">XAMPP:  MySQL has no root passwort set!!!</span><br><span class=\"line\">XAMPP: Do you want to set a password? [yes]</span><br><span class=\"line\">XAMPP:  Write the password somewhere down to make sure you won&apos;t forget it!!!</span><br><span class=\"line\">XAMPP: Password:</span><br><span class=\"line\">XAMPP: Password (again):</span><br><span class=\"line\">XAMPP:  Setting new MySQL root password.</span><br><span class=\"line\">XAMPP:  Change phpMyAdmin&apos;s authentication method.</span><br><span class=\"line\">XAMPP:  The FTP password for user &apos;daemon&apos; is still set to &apos;xampp&apos;.</span><br><span class=\"line\">XAMPP: Do you want to change the password? [yes]</span><br><span class=\"line\">XAMPP: Password:</span><br><span class=\"line\">XAMPP: Password (again):</span><br><span class=\"line\">XAMPP: Reload ProFTPD...ok.</span><br><span class=\"line\">XAMPP:  Done.</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改数据库密码\"><a href=\"#修改数据库密码\" class=\"headerlink\" title=\"修改数据库密码\"></a>修改数据库密码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/lampp/bin/mysqladmin --user=root password &quot;ECMA(root2018).&quot;</span><br></pre></td></tr></table></figure>\n<p>允许数据库 远程登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//链接数据库 //新安装的数据库是没有密码的，这里直接按下回车就行 如果有密码则输入密码</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">//设置密码 设置过了 略过</span><br><span class=\"line\">set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;xuess&apos;); </span><br><span class=\"line\"></span><br><span class=\"line\">//为其他主机远程连接数据库开放访问权限，重新登入数据库：</span><br><span class=\"line\">//选择mysql数据库进行操作</span><br><span class=\"line\">use mysql; </span><br><span class=\"line\"> </span><br><span class=\"line\">//查看user,password,host这三个字段的权限分配情况</span><br><span class=\"line\">select user,password,host from user;  </span><br><span class=\"line\"></span><br><span class=\"line\">+------+-------------------------------------------+-----------+</span><br><span class=\"line\">| user | password                                  | host      |</span><br><span class=\"line\">+------+-------------------------------------------+-----------+</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | 127.0.0.1 |</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | ::1       |</span><br><span class=\"line\">|      |                                           | localhost |</span><br><span class=\"line\">| pma  | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |</span><br><span class=\"line\">+------+-------------------------------------------+-----------+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//通过以上输出可以看出数据库默认只允许用户root在本地服务器（localhost）上登录，不允许其他主机远程连接。</span><br><span class=\"line\"></span><br><span class=\"line\">//修改root 链接权限 *xuess* 是设置好的密码</span><br><span class=\"line\">//这条语句将允许用户root使用密码(xuess)在任何主机上连接该数据库，并赋予该用户所有权限。</span><br><span class=\"line\">MariaDB [mysql]&gt; grant all privileges on *.* to root@&quot;%&quot; identified by &quot;xuess&quot;;  </span><br><span class=\"line\">//出现下面说明 生效</span><br><span class=\"line\">&gt; Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">//执行 把权限缓存到 内存中 </span><br><span class=\"line\">flush privileges</span><br><span class=\"line\"></span><br><span class=\"line\">//再查询一下</span><br><span class=\"line\">select user,password,host from user;</span><br><span class=\"line\">+------+-------------------------------------------+-----------+</span><br><span class=\"line\">| user | password                                  | host      |</span><br><span class=\"line\">+------+-------------------------------------------+-----------+</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | 127.0.0.1 |</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | ::1       |</span><br><span class=\"line\">|      |                                           | localhost |</span><br><span class=\"line\">| pma  | *7723D1540A6840E272E047B564098468B7DB9BD8 | localhost |</span><br><span class=\"line\">| root | *7723D1540A6840E272E047B564098468B7DB9BD8 | %         |</span><br><span class=\"line\">+------+-------------------------------------------+-----------+</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//上面中的“%”就意味着任何主机都被允许连接数据库</span><br><span class=\"line\"></span><br><span class=\"line\">如果远程还链接不上，请关闭防火墙</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n<h4 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/lampp/bin/\tXAMPP 命令库。例如 /opt/lampp/bin/mysql 可执行 MySQL 监视器。</span><br><span class=\"line\">/opt/lampp/htdocs/\tApache 文档根目录。</span><br><span class=\"line\">/opt/lampp/etc/httpd.conf\tApache 配置文件。</span><br><span class=\"line\">/opt/lampp/etc/my.cnf\tMySQL 配置文件。</span><br><span class=\"line\">/opt/lampp/etc/php.ini\tPHP 配置文件。</span><br><span class=\"line\">/opt/lampp/etc/proftpd.conf\tProFTPD 配置文件。（从 0.9.5 版开始）</span><br><span class=\"line\">/opt/lampp/phpmyadmin/config.inc.php phpMyAdmin 配制文件。</span><br></pre></td></tr></table></figure>\n<h2 id=\"eoLinker-安装\"><a href=\"#eoLinker-安装\" class=\"headerlink\" title=\"eoLinker 安装\"></a>eoLinker 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开 文档目录</span><br><span class=\"line\">cd /opt/lampp/htdocs/</span><br><span class=\"line\"></span><br><span class=\"line\">创建目录</span><br><span class=\"line\">mkdir eolinker</span><br><span class=\"line\"></span><br><span class=\"line\">进入</span><br><span class=\"line\">cd eolinker</span><br><span class=\"line\"></span><br><span class=\"line\">从git下载eoLinker 安装包 </span><br><span class=\"line\">wget https://github.com/eolinker/eoLinker-API-Management-System-OS-3.X/raw/master/release%5B%E6%AD%A3%E5%BC%8F%E5%AE%89%E8%A3%85%E5%8C%85%5D/eolinker_os_3.2.1.zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">解压：如果没有 unzip 命令 请安装 yum install -y unzip zip</span><br><span class=\"line\">unzip eolinker_os_3.2.1.zip</span><br><span class=\"line\"></span><br><span class=\"line\">赋权限</span><br><span class=\"line\">cd ../</span><br><span class=\"line\">chmod 777 -R  eolinker/</span><br><span class=\"line\">或者</span><br><span class=\"line\">chmod 777 server/RTP/config/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">创建数据库</span><br><span class=\"line\">cd /opt/lampp/bin/\t</span><br><span class=\"line\"></span><br><span class=\"line\">./mysql -u root -p</span><br><span class=\"line\">然后 输入数据库密码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">然后进入 mysql，在 mysql 环境下 创建数据库 eolinker_os 命令</span><br><span class=\"line\">create database eolinker_os;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">然后访问页面  配置和安装</span><br></pre></td></tr></table></figure>\n<p>由于服务器设置了xampp不允许远程访问，所以远程不能访问需要修改conf文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /opt/lampp/etc/extra/httpd-xampp.conf</span><br></pre></td></tr></table></figure>\n<p>将<code>Require local</code>改成<code>Require all granted</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/lampp/lampp restart </span><br><span class=\"line\">重启xampp</span><br></pre></td></tr></table></figure>\n<p>到此xampp安装完成</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1499238776000,
				"created_by": 2,
				"updated_at": 1520838813000,
				"updated_by": 2,
				"published_at": 1499238776000,
				"published_by": 2
			},
			{
				"id": "cjf28iam7000icu7txu3t4npm",
				"title": "flex布局",
				"slug": "html5-flex",
				"markdown": "\n\n\n\n### flex布局\n\nFlex 布局，可以简便、完整、响应式地实现各种页面布局。\n\nFlex 是 `Flexible Box` 的缩写，意为\"`弹性布局`\"，用来为盒状模型提供最大的灵活性。\n\n任何一个容器都可以指定为 Flex 布局。\n\n```css\n.box{\n  display: flex;\n}\n```\n\n行内元素也可以使用 Flex 布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\nWebkit 内核的浏览器，必须加上-webkit前缀。\n\n```css\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n>注意，设为 `Flex` 布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n\n### 基本概念\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png)\n\n\n容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n\n### 容器的属性\n\n以下6个属性设置在容器上。\n\n```text\n\nflex-direction\nflex-wrap\nflex-flow\njustify-content\nalign-items\nalign-content\n\n```\n\n####  1.flex-direction属性\n\n`flex-direction`属性决定主轴的方向（即项目的排列方向）。\n\n```css\n\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n\n\nrow（默认值）：主轴为水平方向，起点在左端。\nrow-reverse：主轴为水平方向，起点在右端。\ncolumn：主轴为垂直方向，起点在上沿。\ncolumn-reverse：主轴为垂直方向，起点在下沿。\n\n```\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n\n\n#### 2.flex-wrap属性\n\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行。\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png)\n\n\n```css\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n\n```\n\n`nowrap`（默认）：不换行。\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png)\n\n\n`wrap`：换行，第一行在上方。\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg)\n\n`wrap-reverse`：换行，第一行在下方。\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg)\n\n\n\n#### 3.flex-flow属性\n\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n\n#### 4.justify-content属性\n\n`justify-content`属性定义了项目在`主轴`上的对齐方式。\n\n```css\n.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n```\nflex-start（默认值）：左对齐\nflex-end：右对齐\ncenter： 居中\nspace-between：两端对齐，项目之间的间隔都相等。\nspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n```\n\n#### 5.align-items属性\n\n`align-items`属性定义项目在`交叉轴`上如何对齐。\n\n```css\n.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n```\nflex-start：交叉轴的起点对齐。\nflex-end：交叉轴的终点对齐。\ncenter：交叉轴的中点对齐。\nbaseline: 项目的第一行文字的基线对齐。\nstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n```\n\n\n\n#### 6.align-content属性\n\n`align-content`属性定义了多根轴线的对齐方式。如果项目只有`一根轴线`，该属性`不起作用`。\n\n```css\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n\n\n该属性可能取6个值。\n\n```\nflex-start：与交叉轴的起点对齐。\nflex-end：与交叉轴的终点对齐。\ncenter：与交叉轴的中点对齐。\nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\nstretch（默认值）：轴线占满整个交叉轴。\n```\n\n\n### 项目的属性(是上面`容器内`的项目属性)\n\n以下6个属性设置在项目上。\n\n```\norder\nflex-grow\nflex-shrink\nflex-basis\nflex\nalign-self\n```\n\n\n#### 1.order属性\n\n`order`属性定义项目的`排列顺序`。数值越小，排列越靠前，默认为`0`。\n\n```css\n.item {\n  order: <integer>;\n}\n```\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png)\n\n\n#### flex-grow属性\n\n`flex-grow`属性定义项目的`放大比例`，默认为`0`->即如果存在剩余空间，也不放大。\n\n```css\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n```\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png)\n\n\n>如果所有项目的`flex-grow`属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为`2`，其他项目都为`1`，则前者占据的剩余空间将比其他项多`一倍`。\n\n\n#### flex-shrink属性\n\n`flex-shrink`属性定义了项目的`缩小比例`，默认为`1`->即如果空间不足，该项目将缩小。\n\n```css\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n```\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg)\n\n\n>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n>负值对该属性无效。\n\n#### 4.flex-basis属性\n\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（`main size`）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n它可以设为跟`width`或`height`属性一样的值（比如350px），则项目将占据固定空间。\n\n\n\n#### flex属性\n\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。\n\n```css\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n\n该属性有两个快捷值：`auto (1 1 auto)` 和 `none (0 0 auto)`。\n\n>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n\n#### 6.align-self属性\n\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n\n```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n![image](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png)\n\n>该属性可能取6个值，除了`auto`，其他都与`align-items`属性完全一致。\n\n",
				"html": "<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p>Flex 布局，可以简便、完整、响应式地实现各种页面布局。</p>\n<p>Flex 是 <code>Flexible Box</code> 的缩写，意为”<code>弹性布局</code>“，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>行内元素也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Webkit 内核的浏览器，必须加上-webkit前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，设为 <code>Flex</code> 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n</blockquote>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\" alt=\"image\"></p>\n<p>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h3><p>以下6个属性设置在容器上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">flex-direction</span><br><span class=\"line\">flex-wrap</span><br><span class=\"line\">flex-flow</span><br><span class=\"line\">justify-content</span><br><span class=\"line\">align-items</span><br><span class=\"line\">align-content</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-flex-direction属性\"><a href=\"#1-flex-direction属性\" class=\"headerlink\" title=\"1.flex-direction属性\"></a>1.flex-direction属性</h4><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">row</span>（默认值）：主轴为水平方向，起点在左端。</span><br><span class=\"line\"><span class=\"selector-tag\">row-reverse</span>：主轴为水平方向，起点在右端。</span><br><span class=\"line\"><span class=\"selector-tag\">column</span>：主轴为垂直方向，起点在上沿。</span><br><span class=\"line\"><span class=\"selector-tag\">column-reverse</span>：主轴为垂直方向，起点在下沿。</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"image\"></p>\n<h4 id=\"2-flex-wrap属性\"><a href=\"#2-flex-wrap属性\" class=\"headerlink\" title=\"2.flex-wrap属性\"></a>2.flex-wrap属性</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\" alt=\"image\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>nowrap</code>（默认）：不换行。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png\" alt=\"image\"></p>\n<p><code>wrap</code>：换行，第一行在上方。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg\" alt=\"image\"></p>\n<p><code>wrap-reverse</code>：换行，第一行在下方。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg\" alt=\"image\"></p>\n<h4 id=\"3-flex-flow属性\"><a href=\"#3-flex-flow属性\" class=\"headerlink\" title=\"3.flex-flow属性\"></a>3.flex-flow属性</h4><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-justify-content属性\"><a href=\"#4-justify-content属性\" class=\"headerlink\" title=\"4.justify-content属性\"></a>4.justify-content属性</h4><p><code>justify-content</code>属性定义了项目在<code>主轴</code>上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"image\"></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-start（默认值）：左对齐</span><br><span class=\"line\">flex-end：右对齐</span><br><span class=\"line\">center： 居中</span><br><span class=\"line\">space-between：两端对齐，项目之间的间隔都相等。</span><br><span class=\"line\">space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-align-items属性\"><a href=\"#5-align-items属性\" class=\"headerlink\" title=\"5.align-items属性\"></a>5.align-items属性</h4><p><code>align-items</code>属性定义项目在<code>交叉轴</code>上如何对齐。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"image\"></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-start：交叉轴的起点对齐。</span><br><span class=\"line\">flex-end：交叉轴的终点对齐。</span><br><span class=\"line\">center：交叉轴的中点对齐。</span><br><span class=\"line\">baseline: 项目的第一行文字的基线对齐。</span><br><span class=\"line\">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-align-content属性\"><a href=\"#6-align-content属性\" class=\"headerlink\" title=\"6.align-content属性\"></a>6.align-content属性</h4><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有<code>一根轴线</code>，该属性<code>不起作用</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"image\"></p>\n<p>该属性可能取6个值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-start：与交叉轴的起点对齐。</span><br><span class=\"line\">flex-end：与交叉轴的终点对齐。</span><br><span class=\"line\">center：与交叉轴的中点对齐。</span><br><span class=\"line\">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class=\"line\">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class=\"line\">stretch（默认值）：轴线占满整个交叉轴。</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目的属性-是上面容器内的项目属性\"><a href=\"#项目的属性-是上面容器内的项目属性\" class=\"headerlink\" title=\"项目的属性(是上面容器内的项目属性)\"></a>项目的属性(是上面<code>容器内</code>的项目属性)</h3><p>以下6个属性设置在项目上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order</span><br><span class=\"line\">flex-grow</span><br><span class=\"line\">flex-shrink</span><br><span class=\"line\">flex-basis</span><br><span class=\"line\">flex</span><br><span class=\"line\">align-self</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-order属性\"><a href=\"#1-order属性\" class=\"headerlink\" title=\"1.order属性\"></a>1.order属性</h4><p><code>order</code>属性定义项目的<code>排列顺序</code>。数值越小，排列越靠前，默认为<code>0</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png\" alt=\"image\"></p>\n<h4 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h4><p><code>flex-grow</code>属性定义项目的<code>放大比例</code>，默认为<code>0</code>-&gt;即如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png\" alt=\"image\"></p>\n<blockquote>\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为<code>2</code>，其他项目都为<code>1</code>，则前者占据的剩余空间将比其他项多<code>一倍</code>。</p>\n</blockquote>\n<h4 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h4><p><code>flex-shrink</code>属性定义了项目的<code>缩小比例</code>，默认为<code>1</code>-&gt;即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg\" alt=\"image\"></p>\n<blockquote>\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n</blockquote>\n<blockquote>\n<p>负值对该属性无效。</p>\n</blockquote>\n<h4 id=\"4-flex-basis属性\"><a href=\"#4-flex-basis属性\" class=\"headerlink\" title=\"4.flex-basis属性\"></a>4.flex-basis属性</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h4 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</p>\n<blockquote>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n</blockquote>\n<h4 id=\"6-align-self属性\"><a href=\"#6-align-self属性\" class=\"headerlink\" title=\"6.align-self属性\"></a>6.align-self属性</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\" alt=\"image\"></p>\n<blockquote>\n<p>该属性可能取6个值，除了<code>auto</code>，其他都与<code>align-items</code>属性完全一致。</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1497182566000,
				"created_by": 2,
				"updated_at": 1520838225000,
				"updated_by": 2,
				"published_at": 1497182566000,
				"published_by": 2
			},
			{
				"id": "cjf28ian3001qcu7ts7orgsky",
				"title": "react redux",
				"slug": "react-redux",
				"markdown": "\n\n\n解答这个问题并不困难：唯一的要求是你熟悉React。不要光听别人描述名词，理解起来是很困难的。从需求出发，看看使用React需要什么：\n1. React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。理解这个是理解React和Redux的前提。\n\n \n2. 一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。\n\n\n\n3. 子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。\n\n\n\n4. 为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。\n\n\n\n5. 为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：\n\n\n```\n\na. 需要回调通知state (等同于回调参数) -> action\nb. 需要根据回调处理 (等同于父级方法) -> reducer\nc. 需要state (等同于总状态) ->store\n\n\n对Redux来说只有这三个要素：\na. action是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。\nb. reducer是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。\nc. store负责存储状态并可以被react api回调，发布action.当然一般不会直接把两个库拿来用，还有一个binding叫react-redux, 提供一个Provider和connect。很多人其实看懂了redux卡在这里。\n\n\na. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\nb. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。\n做好以上流程Redux和React就可以工作了。\n\n简单地说就是：\n1.顶层分发状态，让React组件被动地渲染。\n2.监听事件，事件有权利回到所有状态顶层影响状态。\n\n\n```\n\n\n>from:https://www.zhihu.com/question/41312576/answer/90782136",
				"html": "<p>解答这个问题并不困难：唯一的要求是你熟悉React。不要光听别人描述名词，理解起来是很困难的。从需求出发，看看使用React需要什么：</p>\n<ol>\n<li>React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。理解这个是理解React和Redux的前提。</li>\n</ol>\n<ol>\n<li>一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。</li>\n</ol>\n<ol>\n<li>子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。</li>\n</ol>\n<ol>\n<li>为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。</li>\n</ol>\n<ol>\n<li>为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">a. 需要回调通知state (等同于回调参数) -&gt; action</span><br><span class=\"line\">b. 需要根据回调处理 (等同于父级方法) -&gt; reducer</span><br><span class=\"line\">c. 需要state (等同于总状态) -&gt;store</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">对Redux来说只有这三个要素：</span><br><span class=\"line\">a. action是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。</span><br><span class=\"line\">b. reducer是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。</span><br><span class=\"line\">c. store负责存储状态并可以被react api回调，发布action.当然一般不会直接把两个库拿来用，还有一个binding叫react-redux, 提供一个Provider和connect。很多人其实看懂了redux卡在这里。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。</span><br><span class=\"line\">b. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。</span><br><span class=\"line\">做好以上流程Redux和React就可以工作了。</span><br><span class=\"line\"></span><br><span class=\"line\">简单地说就是：</span><br><span class=\"line\">1.顶层分发状态，让React组件被动地渲染。</span><br><span class=\"line\">2.监听事件，事件有权利回到所有状态顶层影响状态。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>from:<a href=\"https://www.zhihu.com/question/41312576/answer/90782136\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/41312576/answer/90782136</a></p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1495610469000,
				"created_by": 2,
				"updated_at": 1520839297000,
				"updated_by": 2,
				"published_at": 1495610469000,
				"published_by": 2
			},
			{
				"id": "cjf28ialw0009cu7t9cff663c",
				"title": "forEach、for-in与for-of的区别",
				"slug": "es6-for-of-for-in",
				"markdown": "\n\n\n## forEach介绍\n\n```javascript\nobjArr.forEach(function (value) {\n  console.log(value);\n});\n```\n\n> `foreach` 方法没办法使用 `break` 语句跳出循环，或者使用`return`从函数体内返回\n\n\n## for-in介绍\n\n```javascript\nfor(var index in objArr){\n\tconsole.log(objArr[index])\n}\n\n```\n\n以上代码会出现的问题：\n1.`index` 值 会是字符串（`String`）类型\n2.循环不仅会遍历数组元素，还会遍历任意其他自定义添加的属性，如，`objArr`上面包含自定义属性，`objArr.name`，那这次循环中也会出现此`name`属性\n3.某些情况下，上述代码会以随机顺序循环数组\n\n>`for-in`循环设计之初，是给普通以字符串的值为key的对象使用的。而非数组。\n>\n>\n\n\n\n## for-of介绍\n\n\n```javascript\nfor(let value of objArr){\n\tconsole.log(value)\n}\n\n```\n\n1.可以避免所有 `for-in` 循环的陷阱\n2.不同于 `forEach()`，可以使用 `break`, `continue` 和 `return`\n3.`for-of` 循环不仅仅支持数组的遍历。同样适用于很多类似数组的对象\n4.它也支持`字符串`的遍历\n5.for-of 并不适用于处理原有的原生对象\n\n### for-of 遍历 Set\n\n```javascript\nvar uniqueWords = new Set(words);\n\nfor (var word of uniqueWords) {\n  console.log(word);\n}\n```\n\n\n### for-of 遍历 Map\n\n```javascript\nfor (var [key, value] of phoneBookMap) {\n  console.log(key + \"'s phone number is: \" + value);\n}\n```\n\n> `Map`是键值对组成，需要用到 Es6新特性`解构`\n> \n\n### for-of 遍历原生对象\n\n```javascript\n// 输出对象自身可以枚举的值\nfor (var key of Object.keys(someObject)) {\n  console.log(key + \": \" + someObject[key]);\n}\n```\n\n\n",
				"html": "<h2 id=\"forEach介绍\"><a href=\"#forEach介绍\" class=\"headerlink\" title=\"forEach介绍\"></a>forEach介绍</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objArr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>foreach</code> 方法没办法使用 <code>break</code> 语句跳出循环，或者使用<code>return</code>从函数体内返回</p>\n</blockquote>\n<h2 id=\"for-in介绍\"><a href=\"#for-in介绍\" class=\"headerlink\" title=\"for-in介绍\"></a>for-in介绍</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> objArr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(objArr[index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码会出现的问题：<br>1.<code>index</code> 值 会是字符串（<code>String</code>）类型<br>2.循环不仅会遍历数组元素，还会遍历任意其他自定义添加的属性，如，<code>objArr</code>上面包含自定义属性，<code>objArr.name</code>，那这次循环中也会出现此<code>name</code>属性<br>3.某些情况下，上述代码会以随机顺序循环数组</p>\n<blockquote>\n<p><code>for-in</code>循环设计之初，是给普通以字符串的值为key的对象使用的。而非数组。</p>\n</blockquote>\n<h2 id=\"for-of介绍\"><a href=\"#for-of介绍\" class=\"headerlink\" title=\"for-of介绍\"></a>for-of介绍</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> objArr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.可以避免所有 <code>for-in</code> 循环的陷阱<br>2.不同于 <code>forEach()</code>，可以使用 <code>break</code>, <code>continue</code> 和 <code>return</code><br>3.<code>for-of</code> 循环不仅仅支持数组的遍历。同样适用于很多类似数组的对象<br>4.它也支持<code>字符串</code>的遍历<br>5.for-of 并不适用于处理原有的原生对象</p>\n<h3 id=\"for-of-遍历-Set\"><a href=\"#for-of-遍历-Set\" class=\"headerlink\" title=\"for-of 遍历 Set\"></a>for-of 遍历 Set</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uniqueWords = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(words);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> word <span class=\"keyword\">of</span> uniqueWords) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(word);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-of-遍历-Map\"><a href=\"#for-of-遍历-Map\" class=\"headerlink\" title=\"for-of 遍历 Map\"></a>for-of 遍历 Map</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> phoneBookMap) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\"'s phone number is: \"</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Map</code>是键值对组成，需要用到 Es6新特性<code>解构</code></p>\n</blockquote>\n<h3 id=\"for-of-遍历原生对象\"><a href=\"#for-of-遍历原生对象\" class=\"headerlink\" title=\"for-of 遍历原生对象\"></a>for-of 遍历原生对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出对象自身可以枚举的值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(someObject)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\": \"</span> + someObject[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1495436726000,
				"created_by": 2,
				"updated_at": 1520838366000,
				"updated_by": 2,
				"published_at": 1495436726000,
				"published_by": 2
			},
			{
				"id": "cjf28iamv001fcu7t9m65xl0v",
				"title": "nodejs express笔记",
				"slug": "nodejs-express",
				"markdown": "\n\n\n## Express 应用生成器\n\n通过应用生成器工具 express 可以快速创建一个应用的骨架。\n\n通过如下命令安装：\n\n```\nnpm install express-generator -g\n```\n\n-h 选项可以列出所有可用的命令行选项：\n\n```\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help           output usage information\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n\n```\n\n下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。\n\n```\n$ express myapp\n\n  warning: the default view engine will not be jade in future releases\n  warning: use `--view=jade' or `--help' for additional options\n\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/views\n   create : myapp/views/index.jade\n   create : myapp/views/layout.jade\n   create : myapp/views/error.jade\n   create : myapp/bin\n   create : myapp/bin/www\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n\n   install dependencies:\n     $ cd myapp && npm install\n\n   run the app:\n     $ DEBUG=myapp:* npm start\n\n```\n\n安装依赖包与运行项目\n\n```\ninstall dependencies:\n$ cd myapp && npm install\n\nrun the app:\n$ DEBUG=myapp:* npm start\n```\n\n> 注意 `mac` 和 `win` 启动命令不同，上面是 `mac`的，`win` 请执行 ：`set DEBUG=myapp & npm start`\n> \n\n然后在浏览器中打开 http://localhost:3000/ 网址就可以看到这个应用了\n\n通过 Express 应用生成器创建的应用一般都有如下目录结构：\n\n```\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.jade\n    ├── index.jade\n    └── layout.jade\n```\n\n\n## Express 路由\n\n路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。\n\n路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下： app.METHOD(path, [callback...], callback)， app 是 express 对象的一个实例， METHOD 是一个 HTTP 请求方法， path 是服务器上的路径， callback 是当路由匹配时要执行的函数。\n\n下面是一个基本的路由示例：\n\n```\nvar express = require('express');\nvar app = express();\n\n// respond with \"hello world\" when a GET request is made to the homepage\napp.get('/', function(req, res) {\n  res.send('hello world');\n});\n```\n\n### 路由方法\n\n路由方法源于 `HTTP` 请求方法，和 `express` 实例相关联。\n\n下面这个例子展示了为应用跟路径定义的 `GET` 和 `POST` 请求：\n\n```\n\n// GET method route\napp.get('/', function (req, res) {\n  res.send('GET request to the homepage');\n});\n\n// POST method route\napp.post('/', function (req, res) {\n  res.send('POST request to the homepage');\n});\n```\n\n\nExpress 定义了如下和 HTTP 请求对应的路由方法： get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search, 和 connect。\n\n>有些路由方法名不是合规的 JavaScript 变量名，此时使用括号记法，比如： app['m-search']('/', function ...\n>\n>\n\n\n`app.all()` 是一个特殊的路由方法，没有任何 `HTTP` 方法与其对应，它的作用是对于一个路径上的所有请求加载中间件。\n\n在下面的例子中，来自 “`/secret`” 的请求，不管使用 `GET`、`POST`、`PUT`、`DELETE` 或其他任何 `http` 模块支持的 `HTTP` 请求，句柄都会得到执行。\n\n```\napp.all('/secret', function (req, res, next) {\n  console.log('Accessing the secret section ...');\n  next(); // pass control to the next handler\n});\n```\n\n### 路由路径\n\n路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式。\n\nExpress 使用 `path-to-regexp` 匹配路由路径，请参考文档查阅所有定义路由路径的方法。 Express `Route Tester` 是测试基本 Express 路径的好工具，但不支持模式匹配。\n\n>查询字符串不是路由路径的一部分。\n\n使用字符串的路由路径示例：\n\n```\n// 匹配根路径的请求\napp.get('/', function (req, res) {\n  res.send('root');\n});\n\n// 匹配 /about 路径的请求\napp.get('/about', function (req, res) {\n  res.send('about');\n});\n\n// 匹配 /random.text 路径的请求\napp.get('/random.text', function (req, res) {\n  res.send('random.text');\n});\n```\n\n\n使用字符串模式的路由路径示例：\n\n```\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res) {\n  res.send('ab?cd');\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res) {\n  res.send('ab+cd');\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res) {\n  res.send('ab*cd');\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res) {\n res.send('ab(cd)?e');\n});\n```\n\n>字符 ?、+、* 和 () 是正则表达式的子集，- 和 . 在基于字符串的路径中按照字面值解释。\n\n\n使用正则表达式的路由路径示例：\n\n```\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res) {\n  res.send('/a/');\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res) {\n  res.send('/.*fly$/');\n});\n```\n\n### 路由句柄\n\n可以为请求处理提供多个回调函数，其行为类似 `中间件`。唯一的区别是这些回调函数有可能调用 `next('route')` 方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。\n\n路由句柄有多种形式，可以是一个函数、一个函数数组，或者是两者混合，如下所示.\n\n使用一个回调函数处理路由：\n\n```\napp.get('/example/a', function (req, res) {\n  res.send('Hello from A!');\n});\n```\n\n使用多个回调函数处理路由（记得指定 `next` 对象）：\n\n```\napp.get('/example/b', function (req, res, next) {\n  console.log('response will be sent by the next function ...');\n  next();\n}, function (req, res) {\n  res.send('Hello from B!');\n});\n```\n\n\n使用回调函数数组处理路由：\n\n```\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/example/c', [cb0, cb1, cb2]);\n```\n\n混合使用函数和函数数组处理路由：\n\n```\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\napp.get('/example/d', [cb0, cb1], function (req, res, next) {\n  console.log('response will be sent by the next function ...');\n  next();\n}, function (req, res) {\n  res.send('Hello from D!');\n});\n```\n\n\n### 响应方法\n下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。\n\n方法 | 描述 \n----|------\nres.download()\t|提示下载文件。\nres.end()\t|终结响应处理流程。\nres.json()\t|发送一个 JSON 格式的响应。\nres.jsonp()\t|发送一个支持 JSONP 的 JSON 格式的响应。\nres.redirect()\t|重定向请求。\nres.render()\t|渲染视图模板。\nres.send()\t|发送各种类型的响应。\nres.sendFile()\t|以八位字节流的形式发送文件。 sendfile('login.html');\nres.sendStatus()\t|设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。\n\n\n### app.route()\n\n可使用 `app.route()` 创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化的路由，而且减少了代码冗余和拼写错误。请参考 `Router()` 文档 了解更多有关路由的信息。\n\n下面这个示例程序使用 `app.route()` 定义了链式路由句柄。\n\n\n```\napp.route('/book')\n  .get(function(req, res) {\n    res.send('Get a random book');\n  })\n  .post(function(req, res) {\n    res.send('Add a book');\n  })\n  .put(function(req, res) {\n    res.send('Update the book');\n  });\n```\n  \n  \n### express.Router\n\n可使用 `express.Router` 类创建模块化、可挂载的路由句柄。`Router` 实例是一个完整的中间件和路由系统，因此常称其为一个 “`mini-app`”。\n\n下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。\n\n在 `app` 目录下创建名为 `birds.js` 的文件，内容如下：\n\n\n```\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function timeLog(req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n\n然后在应用中加载路由模块：\n\n```\nvar birds = require('./birds');\n...\napp.use('/birds', birds);\n```\n\n\n应用即可处理发自 `/birds` 和 `/birds/about` 的请求，并且调用为该路由指定的 `timeLog` 中间件。\n\n\n\n## 利用 Express 托管静态文件\n\n通过 `Express` 内置的 `express.static` 可以方便地托管静态文件，例如`图片`、`CSS`、`JavaScript` 文件等。\n\n将静态资源文件所在的目录作为参数传递给 `express.static` 中间件就可以提供静态资源文件的访问了。例如，假设在 `public` 目录放置了`图片`、`CSS` 和 `JavaScript` 文件，你就可以：\n\n```\napp.use(express.static('public'));\n```\n\n现在，`public` 目录下面的文件就可以访问了。\n\n```\nhttp://localhost:3000/images/kitten.jpg\nhttp://localhost:3000/css/style.css\nhttp://localhost:3000/js/app.js\nhttp://localhost:3000/images/bg.png\nhttp://localhost:3000/hello.html\n```\n\n\n>所有文件的路径都是相对于存放目录的，因此，存放静态文件的目录名不会出现在 `URL` 中。\n\n\n如果你的静态资源存放在多个目录下面，你可以多次调用 `express.static` 中间件：\n\n```\napp.use(express.static('public'));\napp.use(express.static('files'));\n```\n\n访问静态资源文件时，`express.static` 中间件会根据目录添加的顺序查找所需的文件。\n\n如果你希望所有通过 `express.static` 访问的文件都存放在一个“`虚拟（virtual）`”目录（即目录根本不存在）下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示：\n\n```\napp.use('/static', express.static('public'));\n```\n\n现在，你就爱可以通过带有 “`/static`” 前缀的地址来访问 `public` 目录下面的文件了。\n\n```\nhttp://localhost:3000/static/images/kitten.jpg\nhttp://localhost:3000/static/css/style.css\nhttp://localhost:3000/static/js/app.js\nhttp://localhost:3000/static/images/bg.png\nhttp://localhost:3000/static/hello.html\n```\n\n\n\n### 中间件与 next\n\n`express` 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 `next()` 传递给下一个中间件，如果没有调用 `next()`，则请求不会往下传递，如内置的 `res.render` 其实就是渲染完 `html` 直接返回给客户端，没有调用 `next()`，从而没有传递给下一个中间件。看个小例子，修改 `index.js` 如下：\n\n**index.js**\n\n```\nvar express = require('express');\nvar app = express();\n\napp.use(function(req, res, next) {\n  console.log('1');\n  next();\n});\n\napp.use(function(req, res, next) {\n  console.log('2');\n  res.status(200).end();\n});\n\napp.listen(3000);\n```\n\n此时访问 localhost:3000，终端会输出：\n\n```\n1\n2\n```\n\n通过 `app.use` 加载中间件，在中间件中通过 `next` 将请求传递到下一个中间件，`next` 可接受一个参数接收错误信息，如果使用了 `next(error)`，则会返回错误而不会传递到下一个中间件，修改 `index.js` 如下：\n\n**index.js**\n\n```\nvar express = require('express');\nvar app = express();\n\napp.use(function(req, res, next) {\n  console.log('1');\n  next(new Error('haha'));\n});\n\napp.use(function(req, res, next) {\n  console.log('2');\n  res.status(200).end();\n});\n\napp.listen(3000);\n```\n\n\n报错信息：\n```\nError: haha\n    at /Users/shanshanxue/Documents/workspace/aym_admin_nav/index.js:6:8\n    at Layer.handle [as handle_request] (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:317:13)\n    at /Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:284:7\n    at next (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:275:10)\n    at expressInit (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/middleware/init.js:40:5)\n    at Layer.handle [as handle_request] (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:317:13)\n    at /Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:284:7\n    at next (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:275:10)\n```\n\n\n\n\n> 小提示：`app.use` 有非常灵活的使用方式，详情见 [官方文档](http://expressjs.com/en/4x/api.html#app.use)。\n> \n\n`express` 有成百上千的第三方中间件，在开发过程中我们首先应该去 `npm` 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：\n\n\n1. http://npmjs.com(npm 官网)\n2. http://node-modules.com\n3. https://npms.io\n4. https://nodejsmodules.org\n\n>小提示：`express@4` 之前的版本基于 `connect` 这个模块实现的中间件的架构，`express@4` 及以上的版本则移除了对 `connect` 的依赖自己实现了，理论上基于 `connect` 的中间件（通常以 `connect-` 开头，如 `connect-mongo`）仍可结合 `express` 使用。\n>\n>\n>注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 `connect-flash` 中间件是基于 `session` 的，所以需要在 `express-session` 后加载。\n>\n\n### 错误处理\n\n上面的例子中，应用程序为我们自动返回了错误栈信息（`express` 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 `index.js` 如下：\n\n**index.js**\n\n```\nvar express = require('express');\nvar app = express();\n\napp.use(function(req, res, next) {\n  console.log('1');\n  next(new Error('haha'));\n});\n\napp.use(function(req, res, next) {\n  console.log('2');\n  res.status(200).end();\n});\n\n//错误处理\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\napp.listen(3000);\n```\n\n此时访问 `localhost:3000`，浏览器会显示 `Something broke!`。\n\n\n\n",
				"html": "<h2 id=\"Express-应用生成器\"><a href=\"#Express-应用生成器\" class=\"headerlink\" title=\"Express 应用生成器\"></a>Express 应用生成器</h2><p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p>\n<p>通过如下命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<p>-h 选项可以列出所有可用的命令行选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express -h</span><br><span class=\"line\"></span><br><span class=\"line\">  Usage: express [options] [dir]</span><br><span class=\"line\"></span><br><span class=\"line\">  Options:</span><br><span class=\"line\"></span><br><span class=\"line\">    -h, --help           output usage information</span><br><span class=\"line\">        --version        output the version number</span><br><span class=\"line\">    -e, --ejs            add ejs engine support</span><br><span class=\"line\">        --pug            add pug engine support</span><br><span class=\"line\">        --hbs            add handlebars engine support</span><br><span class=\"line\">    -H, --hogan          add hogan.js engine support</span><br><span class=\"line\">    -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)</span><br><span class=\"line\">    -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</span><br><span class=\"line\">        --git            add .gitignore</span><br><span class=\"line\">    -f, --force          force on non-empty directory</span><br></pre></td></tr></table></figure>\n<p>下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express myapp</span><br><span class=\"line\"></span><br><span class=\"line\">  warning: the default view engine will not be jade in future releases</span><br><span class=\"line\">  warning: use `--view=jade&apos; or `--help&apos; for additional options</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp</span><br><span class=\"line\">   create : myapp/package.json</span><br><span class=\"line\">   create : myapp/app.js</span><br><span class=\"line\">   create : myapp/public</span><br><span class=\"line\">   create : myapp/routes</span><br><span class=\"line\">   create : myapp/routes/index.js</span><br><span class=\"line\">   create : myapp/routes/users.js</span><br><span class=\"line\">   create : myapp/views</span><br><span class=\"line\">   create : myapp/views/index.jade</span><br><span class=\"line\">   create : myapp/views/layout.jade</span><br><span class=\"line\">   create : myapp/views/error.jade</span><br><span class=\"line\">   create : myapp/bin</span><br><span class=\"line\">   create : myapp/bin/www</span><br><span class=\"line\">   create : myapp/public/javascripts</span><br><span class=\"line\">   create : myapp/public/images</span><br><span class=\"line\">   create : myapp/public/stylesheets</span><br><span class=\"line\">   create : myapp/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">   install dependencies:</span><br><span class=\"line\">     $ cd myapp &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">   run the app:</span><br><span class=\"line\">     $ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure>\n<p>安装依赖包与运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install dependencies:</span><br><span class=\"line\">$ cd myapp &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">run the app:</span><br><span class=\"line\">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 <code>mac</code> 和 <code>win</code> 启动命令不同，上面是 <code>mac</code>的，<code>win</code> 请执行 ：<code>set DEBUG=myapp &amp; npm start</code></p>\n</blockquote>\n<p>然后在浏览器中打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 网址就可以看到这个应用了</p>\n<p>通过 Express 应用生成器创建的应用一般都有如下目录结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views</span><br><span class=\"line\">    ├── error.jade</span><br><span class=\"line\">    ├── index.jade</span><br><span class=\"line\">    └── layout.jade</span><br></pre></td></tr></table></figure>\n<h2 id=\"Express-路由\"><a href=\"#Express-路由\" class=\"headerlink\" title=\"Express 路由\"></a>Express 路由</h2><p>路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</p>\n<p>路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下： app.METHOD(path, [callback…], callback)， app 是 express 对象的一个实例， METHOD 是一个 HTTP 请求方法， path 是服务器上的路径， callback 是当路由匹配时要执行的函数。</p>\n<p>下面是一个基本的路由示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">// respond with &quot;hello world&quot; when a GET request is made to the homepage</span><br><span class=\"line\">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;hello world&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由方法\"><a href=\"#路由方法\" class=\"headerlink\" title=\"路由方法\"></a>路由方法</h3><p>路由方法源于 <code>HTTP</code> 请求方法，和 <code>express</code> 实例相关联。</p>\n<p>下面这个例子展示了为应用跟路径定义的 <code>GET</code> 和 <code>POST</code> 请求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// GET method route</span><br><span class=\"line\">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;GET request to the homepage&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// POST method route</span><br><span class=\"line\">app.post(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;POST request to the homepage&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Express 定义了如下和 HTTP 请求对应的路由方法： get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search, 和 connect。</p>\n<blockquote>\n<p>有些路由方法名不是合规的 JavaScript 变量名，此时使用括号记法，比如： app[‘m-search’](‘/‘, function …</p>\n</blockquote>\n<p><code>app.all()</code> 是一个特殊的路由方法，没有任何 <code>HTTP</code> 方法与其对应，它的作用是对于一个路径上的所有请求加载中间件。</p>\n<p>在下面的例子中，来自 “<code>/secret</code>” 的请求，不管使用 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 或其他任何 <code>http</code> 模块支持的 <code>HTTP</code> 请求，句柄都会得到执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.all(&apos;/secret&apos;, function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;Accessing the secret section ...&apos;);</span><br><span class=\"line\">  next(); // pass control to the next handler</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由路径\"><a href=\"#路由路径\" class=\"headerlink\" title=\"路由路径\"></a>路由路径</h3><p>路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式。</p>\n<p>Express 使用 <code>path-to-regexp</code> 匹配路由路径，请参考文档查阅所有定义路由路径的方法。 Express <code>Route Tester</code> 是测试基本 Express 路径的好工具，但不支持模式匹配。</p>\n<blockquote>\n<p>查询字符串不是路由路径的一部分。</p>\n</blockquote>\n<p>使用字符串的路由路径示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匹配根路径的请求</span><br><span class=\"line\">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;root&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配 /about 路径的请求</span><br><span class=\"line\">app.get(&apos;/about&apos;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;about&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配 /random.text 路径的请求</span><br><span class=\"line\">app.get(&apos;/random.text&apos;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;random.text&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用字符串模式的路由路径示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匹配 acd 和 abcd</span><br><span class=\"line\">app.get(&apos;/ab?cd&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;ab?cd&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配 abcd、abbcd、abbbcd等</span><br><span class=\"line\">app.get(&apos;/ab+cd&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;ab+cd&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span><br><span class=\"line\">app.get(&apos;/ab*cd&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;ab*cd&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配 /abe 和 /abcde</span><br><span class=\"line\">app.get(&apos;/ab(cd)?e&apos;, function(req, res) &#123;</span><br><span class=\"line\"> res.send(&apos;ab(cd)?e&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字符 ?、+、* 和 () 是正则表达式的子集，- 和 . 在基于字符串的路径中按照字面值解释。</p>\n</blockquote>\n<p>使用正则表达式的路由路径示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匹配任何路径中含有 a 的路径：</span><br><span class=\"line\">app.get(/a/, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;/a/&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span><br><span class=\"line\">app.get(/.*fly$/, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;/.*fly$/&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由句柄\"><a href=\"#路由句柄\" class=\"headerlink\" title=\"路由句柄\"></a>路由句柄</h3><p>可以为请求处理提供多个回调函数，其行为类似 <code>中间件</code>。唯一的区别是这些回调函数有可能调用 <code>next(&#39;route&#39;)</code> 方法而略过其他路由回调函数。可以利用该机制为路由定义前提条件，如果在现有路径上继续执行没有意义，则可将控制权交给剩下的路径。</p>\n<p>路由句柄有多种形式，可以是一个函数、一个函数数组，或者是两者混合，如下所示.</p>\n<p>使用一个回调函数处理路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/example/a&apos;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;Hello from A!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用多个回调函数处理路由（记得指定 <code>next</code> 对象）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/example/b&apos;, function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;response will be sent by the next function ...&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;Hello from B!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用回调函数数组处理路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cb0 = function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;CB0&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var cb1 = function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;CB1&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var cb2 = function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;Hello from C!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/example/c&apos;, [cb0, cb1, cb2]);</span><br></pre></td></tr></table></figure>\n<p>混合使用函数和函数数组处理路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cb0 = function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;CB0&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var cb1 = function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;CB1&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/example/d&apos;, [cb0, cb1], function (req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;response will be sent by the next function ...&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;, function (req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;Hello from D!&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"响应方法\"><a href=\"#响应方法\" class=\"headerlink\" title=\"响应方法\"></a>响应方法</h3><p>下表中响应对象（res）的方法向客户端返回响应，终结请求响应的循环。如果在路由句柄中一个方法也不调用，来自客户端的请求会一直挂起。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>res.download()</td>\n<td>提示下载文件。</td>\n</tr>\n<tr>\n<td>res.end()</td>\n<td>终结响应处理流程。</td>\n</tr>\n<tr>\n<td>res.json()</td>\n<td>发送一个 JSON 格式的响应。</td>\n</tr>\n<tr>\n<td>res.jsonp()</td>\n<td>发送一个支持 JSONP 的 JSON 格式的响应。</td>\n</tr>\n<tr>\n<td>res.redirect()</td>\n<td>重定向请求。</td>\n</tr>\n<tr>\n<td>res.render()</td>\n<td>渲染视图模板。</td>\n</tr>\n<tr>\n<td>res.send()</td>\n<td>发送各种类型的响应。</td>\n</tr>\n<tr>\n<td>res.sendFile()</td>\n<td>以八位字节流的形式发送文件。 sendfile(‘login.html’);</td>\n</tr>\n<tr>\n<td>res.sendStatus()</td>\n<td>设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"app-route\"><a href=\"#app-route\" class=\"headerlink\" title=\"app.route()\"></a>app.route()</h3><p>可使用 <code>app.route()</code> 创建路由路径的链式路由句柄。由于路径在一个地方指定，这样做有助于创建模块化的路由，而且减少了代码冗余和拼写错误。请参考 <code>Router()</code> 文档 了解更多有关路由的信息。</p>\n<p>下面这个示例程序使用 <code>app.route()</code> 定义了链式路由句柄。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.route(&apos;/book&apos;)</span><br><span class=\"line\">  .get(function(req, res) &#123;</span><br><span class=\"line\">    res.send(&apos;Get a random book&apos;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .post(function(req, res) &#123;</span><br><span class=\"line\">    res.send(&apos;Add a book&apos;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .put(function(req, res) &#123;</span><br><span class=\"line\">    res.send(&apos;Update the book&apos;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"express-Router\"><a href=\"#express-Router\" class=\"headerlink\" title=\"express.Router\"></a>express.Router</h3><p>可使用 <code>express.Router</code> 类创建模块化、可挂载的路由句柄。<code>Router</code> 实例是一个完整的中间件和路由系统，因此常称其为一个 “<code>mini-app</code>”。</p>\n<p>下面的实例程序创建了一个路由模块，并加载了一个中间件，定义了一些路由，并且将它们挂载至应用的路径上。</p>\n<p>在 <code>app</code> 目录下创建名为 <code>birds.js</code> 的文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">// 该路由使用的中间件</span><br><span class=\"line\">router.use(function timeLog(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;Time: &apos;, Date.now());</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 定义网站主页的路由</span><br><span class=\"line\">router.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;Birds home page&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 定义 about 页面的路由</span><br><span class=\"line\">router.get(&apos;/about&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;About birds&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure>\n<p>然后在应用中加载路由模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var birds = require(&apos;./birds&apos;);</span><br><span class=\"line\">...</span><br><span class=\"line\">app.use(&apos;/birds&apos;, birds);</span><br></pre></td></tr></table></figure>\n<p>应用即可处理发自 <code>/birds</code> 和 <code>/birds/about</code> 的请求，并且调用为该路由指定的 <code>timeLog</code> 中间件。</p>\n<h2 id=\"利用-Express-托管静态文件\"><a href=\"#利用-Express-托管静态文件\" class=\"headerlink\" title=\"利用 Express 托管静态文件\"></a>利用 Express 托管静态文件</h2><p>通过 <code>Express</code> 内置的 <code>express.static</code> 可以方便地托管静态文件，例如<code>图片</code>、<code>CSS</code>、<code>JavaScript</code> 文件等。</p>\n<p>将静态资源文件所在的目录作为参数传递给 <code>express.static</code> 中间件就可以提供静态资源文件的访问了。例如，假设在 <code>public</code> 目录放置了<code>图片</code>、<code>CSS</code> 和 <code>JavaScript</code> 文件，你就可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(&apos;public&apos;));</span><br></pre></td></tr></table></figure>\n<p>现在，<code>public</code> 目录下面的文件就可以访问了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/images/kitten.jpg</span><br><span class=\"line\">http://localhost:3000/css/style.css</span><br><span class=\"line\">http://localhost:3000/js/app.js</span><br><span class=\"line\">http://localhost:3000/images/bg.png</span><br><span class=\"line\">http://localhost:3000/hello.html</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>所有文件的路径都是相对于存放目录的，因此，存放静态文件的目录名不会出现在 <code>URL</code> 中。</p>\n</blockquote>\n<p>如果你的静态资源存放在多个目录下面，你可以多次调用 <code>express.static</code> 中间件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(&apos;public&apos;));</span><br><span class=\"line\">app.use(express.static(&apos;files&apos;));</span><br></pre></td></tr></table></figure>\n<p>访问静态资源文件时，<code>express.static</code> 中间件会根据目录添加的顺序查找所需的文件。</p>\n<p>如果你希望所有通过 <code>express.static</code> 访问的文件都存放在一个“<code>虚拟（virtual）</code>”目录（即目录根本不存在）下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(&apos;/static&apos;, express.static(&apos;public&apos;));</span><br></pre></td></tr></table></figure>\n<p>现在，你就爱可以通过带有 “<code>/static</code>” 前缀的地址来访问 <code>public</code> 目录下面的文件了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000/static/images/kitten.jpg</span><br><span class=\"line\">http://localhost:3000/static/css/style.css</span><br><span class=\"line\">http://localhost:3000/static/js/app.js</span><br><span class=\"line\">http://localhost:3000/static/images/bg.png</span><br><span class=\"line\">http://localhost:3000/static/hello.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件与-next\"><a href=\"#中间件与-next\" class=\"headerlink\" title=\"中间件与 next\"></a>中间件与 next</h3><p><code>express</code> 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 <code>next()</code> 传递给下一个中间件，如果没有调用 <code>next()</code>，则请求不会往下传递，如内置的 <code>res.render</code> 其实就是渲染完 <code>html</code> 直接返回给客户端，没有调用 <code>next()</code>，从而没有传递给下一个中间件。看个小例子，修改 <code>index.js</code> 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(function(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;1&apos;);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(function(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;2&apos;);</span><br><span class=\"line\">  res.status(200).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>此时访问 localhost:3000，终端会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>通过 <code>app.use</code> 加载中间件，在中间件中通过 <code>next</code> 将请求传递到下一个中间件，<code>next</code> 可接受一个参数接收错误信息，如果使用了 <code>next(error)</code>，则会返回错误而不会传递到下一个中间件，修改 <code>index.js</code> 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(function(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;1&apos;);</span><br><span class=\"line\">  next(new Error(&apos;haha&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(function(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;2&apos;);</span><br><span class=\"line\">  res.status(200).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>报错信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: haha</span><br><span class=\"line\">    at /Users/shanshanxue/Documents/workspace/aym_admin_nav/index.js:6:8</span><br><span class=\"line\">    at Layer.handle [as handle_request] (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/layer.js:95:5)</span><br><span class=\"line\">    at trim_prefix (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:317:13)</span><br><span class=\"line\">    at /Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:284:7</span><br><span class=\"line\">    at next (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:275:10)</span><br><span class=\"line\">    at expressInit (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/middleware/init.js:40:5)</span><br><span class=\"line\">    at Layer.handle [as handle_request] (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/layer.js:95:5)</span><br><span class=\"line\">    at trim_prefix (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:317:13)</span><br><span class=\"line\">    at /Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:284:7</span><br><span class=\"line\">    at next (/Users/shanshanxue/Documents/workspace/aym_admin_nav/node_modules/express/lib/router/index.js:275:10)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>小提示：<code>app.use</code> 有非常灵活的使用方式，详情见 <a href=\"http://expressjs.com/en/4x/api.html#app.use\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n</blockquote>\n<p><code>express</code> 有成百上千的第三方中间件，在开发过程中我们首先应该去 <code>npm</code> 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：</p>\n<ol>\n<li><a href=\"http://npmjs.com\" target=\"_blank\" rel=\"noopener\">http://npmjs.com</a>(npm 官网)</li>\n<li><a href=\"http://node-modules.com\" target=\"_blank\" rel=\"noopener\">http://node-modules.com</a></li>\n<li><a href=\"https://npms.io\" target=\"_blank\" rel=\"noopener\">https://npms.io</a></li>\n<li><a href=\"https://nodejsmodules.org\" target=\"_blank\" rel=\"noopener\">https://nodejsmodules.org</a></li>\n</ol>\n<blockquote>\n<p>小提示：<code>express@4</code> 之前的版本基于 <code>connect</code> 这个模块实现的中间件的架构，<code>express@4</code> 及以上的版本则移除了对 <code>connect</code> 的依赖自己实现了，理论上基于 <code>connect</code> 的中间件（通常以 <code>connect-</code> 开头，如 <code>connect-mongo</code>）仍可结合 <code>express</code> 使用。</p>\n<p>注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 <code>connect-flash</code> 中间件是基于 <code>session</code> 的，所以需要在 <code>express-session</code> 后加载。</p>\n</blockquote>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>上面的例子中，应用程序为我们自动返回了错误栈信息（<code>express</code> 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 <code>index.js</code> 如下：</p>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(function(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;1&apos;);</span><br><span class=\"line\">  next(new Error(&apos;haha&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(function(req, res, next) &#123;</span><br><span class=\"line\">  console.log(&apos;2&apos;);</span><br><span class=\"line\">  res.status(200).end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//错误处理</span><br><span class=\"line\">app.use(function(err, req, res, next) &#123;</span><br><span class=\"line\">  console.error(err.stack);</span><br><span class=\"line\">  res.status(500).send(&apos;Something broke!&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>此时访问 <code>localhost:3000</code>，浏览器会显示 <code>Something broke!</code>。</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1495349799000,
				"created_by": 2,
				"updated_at": 1520840091000,
				"updated_by": 2,
				"published_at": 1495349799000,
				"published_by": 2
			},
			{
				"id": "cjf28iamb000ncu7tgo6qiotq",
				"title": "linux 重用命令整理",
				"slug": "linux-command",
				"markdown": "\n\n## 查看版本\n\n### cat /etc/redhat-release \n\n```bash\nCentOS Linux release 7.4.1708 (Core)\n```\n\n### uname -a\n\n```bash\nLinux vps_jp_2018_2 4.14.13-1.el7.elrepo.x86_64 #1 SMP Wed Jan 10 15:12:12 EST 2018 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n\n\n## 重命名例子：\n\n1) 将一个名为abc.txt的文件重命名为1234.txt\n\n```bash\nmv abc.txt 1234.txt\n```\n2) 将目录A重命名为B\n\n```bash\nmv A B\n```\n\n3) 将a.txt移动到/b下，并重命名为c.txt\n\n```bash\nmv a.txt /b/c.txt\n```\n\n\n## 解压\n将压缩文件test.zip在指定目录/tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件。\n\n```\nunzip -o test.zip -d tmp/\n```",
				"html": "<h2 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h2><h3 id=\"cat-etc-redhat-release\"><a href=\"#cat-etc-redhat-release\" class=\"headerlink\" title=\"cat /etc/redhat-release\"></a>cat /etc/redhat-release</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure>\n<h3 id=\"uname-a\"><a href=\"#uname-a\" class=\"headerlink\" title=\"uname -a\"></a>uname -a</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux vps_jp_2018_2 4.14.13-1.el7.elrepo.x86_64 <span class=\"comment\">#1 SMP Wed Jan 10 15:12:12 EST 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重命名例子：\"><a href=\"#重命名例子：\" class=\"headerlink\" title=\"重命名例子：\"></a>重命名例子：</h2><p>1) 将一个名为abc.txt的文件重命名为1234.txt</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv abc.txt 1234.txt</span><br></pre></td></tr></table></figure>\n<p>2) 将目录A重命名为B</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv A B</span><br></pre></td></tr></table></figure>\n<p>3) 将a.txt移动到/b下，并重命名为c.txt</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv a.txt /b/c.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><p>将压缩文件test.zip在指定目录/tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -o test.zip -d tmp/</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1493017904000,
				"created_by": 2,
				"updated_at": 1520838746000,
				"updated_by": 2,
				"published_at": 1493017904000,
				"published_by": 2
			},
			{
				"id": "cjf28iamu001ecu7tylf0dl47",
				"title": "react-flux",
				"slug": "react-flux",
				"markdown": "\n### 基本概念\n\n```\n* View： 视图层\n* Action（动作）：视图层发出的消息（比如mouseClick）\n* Dispatcher（派发器）：用来接收Actions、执行回调函数\n* Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\n\n```\n\n![image](http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png)\n\n\n`Flux` 的最大特点，就是数据的`\"单向流动\"`。\n\n```\n1. 用户访问 View\n2. View 发出用户的 Action\n3. Dispatcher 收到 Action，要求 Store 进行相应的更新\n4. Store 更新后，发出一个\"change\"事件\n5. View 收到\"change\"事件后，更新页面\n\n```",
				"html": "<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* View： 视图层</span><br><span class=\"line\">* Action（动作）：视图层发出的消息（比如mouseClick）</span><br><span class=\"line\">* Dispatcher（派发器）：用来接收Actions、执行回调函数</span><br><span class=\"line\">* Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png\" alt=\"image\"></p>\n<p><code>Flux</code> 的最大特点，就是数据的<code>&quot;单向流动&quot;</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 用户访问 View</span><br><span class=\"line\">2. View 发出用户的 Action</span><br><span class=\"line\">3. Dispatcher 收到 Action，要求 Store 进行相应的更新</span><br><span class=\"line\">4. Store 更新后，发出一个&quot;change&quot;事件</span><br><span class=\"line\">5. View 收到&quot;change&quot;事件后，更新页面</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1492830251000,
				"created_by": 2,
				"updated_at": 1520838299000,
				"updated_by": 2,
				"published_at": 1492830251000,
				"published_by": 2
			},
			{
				"id": "cjf28iams001bcu7tl2pcvvux",
				"title": "react学习记录",
				"slug": "react-document",
				"markdown": "\n\n### 知识体系\n\n\n\n### 组件\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入`<HelloMessage />` 时，会自动生成 `HelloMessage` 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n注意，组件类的第一个字母必须大写，否则会报错，比如`HelloMessage`不能写成`helloMessage`。\n<br>\n另外，组件类只能包含`一个顶层标签`，否则也会报错。\n\n\n添加组件属性，有一个地方需要注意，就是 `class` 属性需要写成 `className` ，`for` 属性需要写成 `htmlFor` ，这是因为 `class` 和 `for` 是 JavaScript 的`保留字`。\n\n\n### this.props.children\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的`所有子节点`\n\n\n这里需要注意， `this.props.children` 的值有三种可能：如果当前组件`没有子节点`，它就是 `undefined` ;如果有`一个子节点`，数据类型是 `object` ；如果有`多个子节点`，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\n\n`React` 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法 [参考官网文档](https://reactjs.org/docs/react-api.html#react.children)\n\n\n\n### PropTypes\n\n组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。\n\n组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求\n\n>注意: `React.PropTypes` 自 React `v15.5` 起已弃用。请使用 [prop-types](https://www.npmjs.com/package/prop-types) 库代替。\n\n\n```\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n\n```\n\n`PropTypes` 包含一整套验证器，可用于确保你接收的数据是有效的。在这个示例中，我们使用了 `PropTypes.string`。当你给属性传递了无效值时，`JavsScript` 控制台将会打印警告。出于性能原因，`propTypes` 只在开发模式下进行检查。\n\n\n下面是使用不同验证器的例子：\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // 你可以将属性声明为以下 JS 原生类型\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何可被渲染的元素（包括数字、字符串、子元素或数组）。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明属性为某个类的实例，这里使用 JS 的\n  // instanceof 操作符实现。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你也可以限制你的属性值是某个特定值之一\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 限制它为列举类型之一的对象\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个指定元素类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 一个指定类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个指定属性及其类型的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你也可以在任何 PropTypes 属性后面加上 `isRequired` \n  // 后缀，这样如果这个属性父组件没有提供时，会打印警告信息\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任意类型的数据\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以指定一个自定义验证器。它应该在验证失败时返回\n  // 一个 Error 对象而不是 `console.warn` 或抛出异常。\n  // 不过在 `oneOfType` 中它不起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 不过你可以提供一个自定义的 `arrayOf` 或 `objectOf` \n  // 验证器，它应该在验证失败时返回一个 Error 对象。 它被用\n  // 于验证数组或对象的每个值。验证器前两个参数的第一个是数组\n  // 或对象本身，第二个是它们对应的键。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n\n```\n\n\n\n### 获取真实的DOM节点 ref\n\n有时需要从组件获取真实 DOM 的节点，这时就要用到 `ref` 属性\n\n\n```\n//es5\nvar MyComponent = React.createClass({\n  handleClick: function() {\n    this.refs.myTextInput.focus();\n  },\n  render: function() {\n    return (\n      <div>\n        <input type=\"text\" ref=\"myTextInput\" />\n        <input type=\"button\" value=\"Focus the text input\" onClick={this.handleClick} />\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('example')\n);\n```\n\n\n\n[参考官方文档](https://doc.react-china.org/docs/refs-and-the-dom.html)\n\n>旧版 API：String 类型的 Refs\n如果你之前使用过 React ，你可能了解过之前的API中的 string 类型的 ref 属性，比如 “textInput” ，你可以通过 this.refs.textInput 访问DOM节点。我们不建议使用它，因为 String 类型的 refs 存在问题。它已过时并可能会在未来的版本是移除。如果你目前还在使用 this.refs.textInput 这种方式访问 refs ，我们建议用回调函数的方式代替。\n\n\n\n\n",
				"html": "<h3 id=\"知识体系\"><a href=\"#知识体系\" class=\"headerlink\" title=\"知识体系\"></a>知识体系</h3><h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入<code>&lt;HelloMessage /&gt;</code> 时，会自动生成 <code>HelloMessage</code> 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n<p>注意，组件类的第一个字母必须大写，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>。<br><br><br>另外，组件类只能包含<code>一个顶层标签</code>，否则也会报错。</p>\n<p>添加组件属性，有一个地方需要注意，就是 <code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code> ，这是因为 <code>class</code> 和 <code>for</code> 是 JavaScript 的<code>保留字</code>。</p>\n<h3 id=\"this-props-children\"><a href=\"#this-props-children\" class=\"headerlink\" title=\"this.props.children\"></a>this.props.children</h3><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的<code>所有子节点</code></p>\n<p>这里需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件<code>没有子节点</code>，它就是 <code>undefined</code> ;如果有<code>一个子节点</code>，数据类型是 <code>object</code> ；如果有<code>多个子节点</code>，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。</p>\n<p><code>React</code> 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。更多的 <code>React.Children</code> 的方法 <a href=\"https://reactjs.org/docs/react-api.html#react.children\" target=\"_blank\" rel=\"noopener\">参考官网文档</a></p>\n<h3 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h3><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。</p>\n<p>组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求</p>\n<blockquote>\n<p>注意: <code>React.PropTypes</code> 自 React <code>v15.5</code> 起已弃用。请使用 <a href=\"https://www.npmjs.com/package/prop-types\" target=\"_blank\" rel=\"noopener\">prop-types</a> 库代替。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeting extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Greeting.propTypes = &#123;</span><br><span class=\"line\">  name: PropTypes.string</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>PropTypes</code> 包含一整套验证器，可用于确保你接收的数据是有效的。在这个示例中，我们使用了 <code>PropTypes.string</code>。当你给属性传递了无效值时，<code>JavsScript</code> 控制台将会打印警告。出于性能原因，<code>propTypes</code> 只在开发模式下进行检查。</p>\n<p>下面是使用不同验证器的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import PropTypes from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  // 你可以将属性声明为以下 JS 原生类型</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 任何可被渲染的元素（包括数字、字符串、子元素或数组）。</span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个 React 元素</span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以声明属性为某个类的实例，这里使用 JS 的</span><br><span class=\"line\">  // instanceof 操作符实现。</span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以限制你的属性值是某个特定值之一</span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 限制它为列举类型之一的对象</span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个指定元素类型的数组</span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个指定类型的对象</span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 一个指定属性及其类型的对象</span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以在任何 PropTypes 属性后面加上 `isRequired` </span><br><span class=\"line\">  // 后缀，这样如果这个属性父组件没有提供时，会打印警告信息</span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 任意类型的数据</span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 你也可以指定一个自定义验证器。它应该在验证失败时返回</span><br><span class=\"line\">  // 一个 Error 对象而不是 `console.warn` 或抛出异常。</span><br><span class=\"line\">  // 不过在 `oneOfType` 中它不起作用。</span><br><span class=\"line\">  customProp: function(props, propName, componentName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(props[propName])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 不过你可以提供一个自定义的 `arrayOf` 或 `objectOf` </span><br><span class=\"line\">  // 验证器，它应该在验证失败时返回一个 Error 对象。 它被用</span><br><span class=\"line\">  // 于验证数组或对象的每个值。验证器前两个参数的第一个是数组</span><br><span class=\"line\">  // 或对象本身，第二个是它们对应的键。</span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) &#123;</span><br><span class=\"line\">    if (!/matchme/.test(propValue[key])) &#123;</span><br><span class=\"line\">      return new Error(</span><br><span class=\"line\">        &apos;Invalid prop `&apos; + propFullName + &apos;` supplied to&apos; +</span><br><span class=\"line\">        &apos; `&apos; + componentName + &apos;`. Validation failed.&apos;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取真实的DOM节点-ref\"><a href=\"#获取真实的DOM节点-ref\" class=\"headerlink\" title=\"获取真实的DOM节点 ref\"></a>获取真实的DOM节点 ref</h3><p>有时需要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//es5</span><br><span class=\"line\">var MyComponent = React.createClass(&#123;</span><br><span class=\"line\">  handleClick: function() &#123;</span><br><span class=\"line\">    this.refs.myTextInput.focus();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot; /&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyComponent /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://doc.react-china.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"noopener\">参考官方文档</a></p>\n<blockquote>\n<p>旧版 API：String 类型的 Refs<br>如果你之前使用过 React ，你可能了解过之前的API中的 string 类型的 ref 属性，比如 “textInput” ，你可以通过 this.refs.textInput 访问DOM节点。我们不建议使用它，因为 String 类型的 refs 存在问题。它已过时并可能会在未来的版本是移除。如果你目前还在使用 this.refs.textInput 这种方式访问 refs ，我们建议用回调函数的方式代替。</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1491117614000,
				"created_by": 2,
				"updated_at": 1520839253000,
				"updated_by": 2,
				"published_at": 1491117614000,
				"published_by": 2
			},
			{
				"id": "cjf28iamx001icu7th3yczmld",
				"title": "react es6",
				"slug": "react-es6",
				"markdown": "\n\n```\n// Correct\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment\n}));\n\n// Correct\nthis.setState(function(prevState, props) {\n  return {\n    counter: prevState.counter + props.increment\n  };\n});\n\n箭头函数 ：\nvar aaa = (a,b) => {console.log(a)}\n\nvar aaa = function (a,b){\n    console.log(a)\n}\n\n\nvar aaa = (a,b) =>(\n    a+b\n)\n\nvar  aaa = function(a,b){\n    return a+b\n}\n\n\nvar aaa = (a,b) =>(\n    {a:a,b:b}\n)\n\nvar  aaa = function(a,b){\n    return {a:a,b:b}\n}\n\n\n```\n\n\n计算属性 \n\n```\n**es6**\nthis.setState({\n  [name]: value\n});\n\n**es5**\nvar partialState = {};\npartialState[name] = value;\nthis.setState(partialState);\n```",
				"html": "<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Correct</span><br><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;</span><br><span class=\"line\">  counter: prevState.counter + props.increment</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// Correct</span><br><span class=\"line\">this.setState(function(prevState, props) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    counter: prevState.counter + props.increment</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">箭头函数 ：</span><br><span class=\"line\">var aaa = (a,b) =&gt; &#123;console.log(a)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var aaa = function (a,b)&#123;</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var aaa = (a,b) =&gt;(</span><br><span class=\"line\">    a+b</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var  aaa = function(a,b)&#123;</span><br><span class=\"line\">    return a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var aaa = (a,b) =&gt;(</span><br><span class=\"line\">    &#123;a:a,b:b&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var  aaa = function(a,b)&#123;</span><br><span class=\"line\">    return &#123;a:a,b:b&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>计算属性 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**es6**</span><br><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\">  [name]: value</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">**es5**</span><br><span class=\"line\">var partialState = &#123;&#125;;</span><br><span class=\"line\">partialState[name] = value;</span><br><span class=\"line\">this.setState(partialState);</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1490167152000,
				"created_by": 2,
				"updated_at": 1520839197000,
				"updated_by": 2,
				"published_at": 1490167152000,
				"published_by": 2
			},
			{
				"id": "cjf28ialy000acu7tw869rjnj",
				"title": "es6语法简介",
				"slug": "es6-grammar",
				"markdown": "\n\n## let与var用法区别\n\n```\n//var \nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n\n------------------------------\n\n//let\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n\n\n------------------------------\n\n\n//如果不用 let 实现类似功能\nfunction iteratorFactory(i){\n    var onclick = function(e){\n        console.log(i)\n    }\n    return onclick;\n}\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = iteratorFactory(i)\n}\n\n\n```\n\n\n## class, extends, super\n\n```\n\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        console.log(this.type + ' says ' + say)\n    }\n}\n\nlet animal = new Animal()\nanimal.says('hello') //animal says hello\n\n//继承\nclass Cat extends Animal {\n    constructor(){\n        super()\n        this.type = 'cat'\n    }\n}\n\nlet cat = new Cat()\ncat.says('hello') //cat says hello\n\n```\n\n上面代码首先用`class`定义了一个“类”，可以看到里面有一个`constructor`方法，这就是构造方法，而`this`关键字则代表实例对象。简单地说，`constructor`内定义的方法和属性是实例对象自己的，而`constructor`外定义的方法和属性则是所有实例对象可以共享的。\n\n`Class`之间可以通过`extends`关键字实现继承，这比`ES5`的通过修改原型链实现继承，要清晰和方便很多。\n\n`super`关键字，它指代父类的实例（即父类的`this`对象）。子类必须在`constructor`方法中调用`super`方法，否则新建实例时会报错。\n这是因为子类没有自己的`this`对象，而是继承父类的`this`对象，然后对其进行加工。如果不调用`super`方法，子类就得不到`this`对象。\n\n`ES6`的继承机制，实质是先创造父类的实例对象`this`（所以必须先调用`super`方法），然后再用子类的构造函数修改`this`。\n\n\n## 箭头函数 arrow function\n\n```\nfunction(i){ return i + 1; } //ES5\n(i) => i + 1 //ES6\n```\n\n如果方程比较复杂，则需要用`{}`把代码包起来：\n\n```\n//es5\nfunction(x, y) { \n    x++;\n    y--;\n    return x + y;\n}\n//es6\n(x, y) => {x++; y--; return x+y}\n```\n\n除了看上去更简洁以外，`arrow function`还有一项超级无敌的功能！\n长期以来，JavaScript语言的`this`对象一直是一个令人头痛的问题，在对象方法中使用`this`，必须非常小心。例如：\n\n```\n//错误代码\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        setTimeout(function(){\n            console.log(this.type + ' says ' + say)\n        }, 1000)\n    }\n}\n\n var animal = new Animal()\n animal.says('hi')  //undefined says hi\n\n\n```\n\n运行上面的代码会报错，这是因为`setTimeout`中的`this`指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：\n\n\n1.第一种是将`this`传给`self`,再用`self`来指代`this`\n\n```\nsays(say){\n   var self = this;\n   setTimeout(function(){\n       console.log(self.type + ' says ' + say)\n}, 1000)\n```\n\n2.第二种方法是用`bind(this)`,即\n\n```\nsays(say){\n    setTimeout(function(){\n        console.log(this.type + ' says ' + say)\n    }.bind(this), 1000)\n}\n```\n\n但现在我们有了箭头函数，就不需要这么麻烦了：\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        setTimeout( () => {\n            console.log(this.type + ' says ' + say)\n        }, 1000)\n    }\n}\n var animal = new Animal()\n animal.says('hi')  //animal says hi\n\n```\n\n当我们使用箭头函数时，函数体内的`this`对象，就是`定义时`所在的对象，而不是使用时所在的对象。\n并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本`没有自己的this`，它的this是`继承外面的`，因此内部的this就是外层代码块的this。\n\n\n## 模板字符串 template string\n\n```\n//不用模板字符串 写法\n$(\"#result\").append(\n  \"There are <b>\" + basket.count + \"</b> \" +\n  \"items in your basket, \" +\n  \"<em>\" + basket.onSale +\n  \"</em> are on sale!\"\n);\n\n\n//使用模板字符串写法\n$(\"#result\").append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n\n```\n\n> 用反引号（\\`）来标识起始，用`${}`来引用变量，而且所有的`空格和缩进`都会被保留在输出之中(==这个需要注意==)\n\n\n\n## 解构 destructuring\n\n`ES6`允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（`Destructuring`）。\n\n```\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat: cat, dog: dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n\n//使用es6解构\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat, dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n\n//反过来可以这么写：\nlet dog = {type: 'animal', many: 2}\nlet { type, many} = dog\nconsole.log(type, many)   //animal 2\n\n```\n\n\n## 默认值 default\n\n\n```\n\nfunction animal(type){\n    type = type || 'cat'  \n    console.log(type)\n}\nanimal()\n\n//ES6\nfunction animal(type = 'cat'){\n    console.log(type)\n}\nanimal()\n\n```\n\n\n## 展开操作符 rest arguments (...)\n\n[扩展运算符详细介绍](http://blog.csdn.net/qq_30100043/article/details/53391308)\n\n```\nfunction animals(...types){\n    console.log(types)\n}\nanimals('cat', 'dog', 'fish') //[\"cat\", \"dog\", \"fish\"]\n```\n\n## import export\n\n**传统的写法**CommonJS(服务器端)和AMD（浏览器端，如require.js）\n\nAMD写法\n\n```\n\n//content.js\ndefine('content.js', function(){\n    return 'A cat';\n})\n\n//index.js\nrequire(['./content.js'], function(animal){\n    console.log(animal);   //A cat\n})\n\n```\n\nCommonJS\n\n```\n//index.js\nvar animal = require('./content.js')\n\n//content.js\nmodule.exports = 'A cat'\n\n```\n\nES6的写法\n\n```\n//index.js\nimport animal from './content'\n\n//content.js\nexport default 'A cat'\n\n```\n\nES6 module的其他高级用法\n\n```\n//content.js\nexport default 'A cat'    \nexport function say(){\n    return 'Hello!'\n}    \nexport const type = 'dog' \n\n\n\n\n//index.js\nimport { say, type } from './content'  \nlet says = say()\nconsole.log(`The ${type} says ${says}`)  //The dog says Hello\n```\n\n>这里输入的时候要注意：`大括号`里面的`变量名`，必须与被导入模块（content.js）对外接口的`名称相同`。\n>如果还希望输入content.js中输出的`默认值`(default), 可以写在大括号外面。\n\n```\n//index.js\nimport animal, { say, type } from './content'  \nlet says = say()\nconsole.log(`The ${type} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n```\n\n修改变量名\n\n此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用`as`实现一键换名。\n\n```\n//index.js\nimport animal, { say, type as animalType } from './content'  \nlet says = say()\nconsole.log(`The ${animalType} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n\n```\n\n\n模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（`*`）指定一个对象，所有输出值都加载在这个对象上面。\n\n```\n//index.js\n\nimport animal, * as content from './content'  \nlet says = content.say()\nconsole.log(`The ${content.type} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n\n```\n\n>通常星号`*`结合`as`一起使用比较合适。\n\n\n# 其他 特性\n\n[阮一峰老师的es6入门](http://es6.ruanyifeng.com/)\n\n\n\n----\n[参考1](https://segmentfault.com/a/1190000004368132)\n\n[参考2](https://segmentfault.com/a/1190000004365693)",
				"html": "<h2 id=\"let与var用法区别\"><a href=\"#let与var用法区别\" class=\"headerlink\" title=\"let与var用法区别\"></a>let与var用法区别</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//var </span><br><span class=\"line\">var a = [];</span><br><span class=\"line\">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  a[i] = function () &#123;</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[6](); // 10</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">//let</span><br><span class=\"line\">var a = [];</span><br><span class=\"line\">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">  a[i] = function () &#123;</span><br><span class=\"line\">    console.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[6](); // 6</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//如果不用 let 实现类似功能</span><br><span class=\"line\">function iteratorFactory(i)&#123;</span><br><span class=\"line\">    var onclick = function(e)&#123;</span><br><span class=\"line\">        console.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return onclick;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var clickBoxs = document.querySelectorAll(&apos;.clickBox&apos;)</span><br><span class=\"line\">for (var i = 0; i &lt; clickBoxs.length; i++)&#123;</span><br><span class=\"line\">    clickBoxs[i].onclick = iteratorFactory(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"class-extends-super\"><a href=\"#class-extends-super\" class=\"headerlink\" title=\"class, extends, super\"></a>class, extends, super</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Animal &#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        this.type = &apos;animal&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        console.log(this.type + &apos; says &apos; + say)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let animal = new Animal()</span><br><span class=\"line\">animal.says(&apos;hello&apos;) //animal says hello</span><br><span class=\"line\"></span><br><span class=\"line\">//继承</span><br><span class=\"line\">class Cat extends Animal &#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        super()</span><br><span class=\"line\">        this.type = &apos;cat&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let cat = new Cat()</span><br><span class=\"line\">cat.says(&apos;hello&apos;) //cat says hello</span><br></pre></td></tr></table></figure>\n<p>上面代码首先用<code>class</code>定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键字则代表实例对象。简单地说，<code>constructor</code>内定义的方法和属性是实例对象自己的，而<code>constructor</code>外定义的方法和属性则是所有实例对象可以共享的。</p>\n<p><code>Class</code>之间可以通过<code>extends</code>关键字实现继承，这比<code>ES5</code>的通过修改原型链实现继承，要清晰和方便很多。</p>\n<p><code>super</code>关键字，它指代父类的实例（即父类的<code>this</code>对象）。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。<br>这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p>\n<p><code>ES6</code>的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用<code>super</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>\n<h2 id=\"箭头函数-arrow-function\"><a href=\"#箭头函数-arrow-function\" class=\"headerlink\" title=\"箭头函数 arrow function\"></a>箭头函数 arrow function</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(i)&#123; return i + 1; &#125; //ES5</span><br><span class=\"line\">(i) =&gt; i + 1 //ES6</span><br></pre></td></tr></table></figure>\n<p>如果方程比较复杂，则需要用<code>{}</code>把代码包起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//es5</span><br><span class=\"line\">function(x, y) &#123; </span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    y--;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//es6</span><br><span class=\"line\">(x, y) =&gt; &#123;x++; y--; return x+y&#125;</span><br></pre></td></tr></table></figure>\n<p>除了看上去更简洁以外，<code>arrow function</code>还有一项超级无敌的功能！<br>长期以来，JavaScript语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//错误代码</span><br><span class=\"line\">class Animal &#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        this.type = &apos;animal&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        setTimeout(function()&#123;</span><br><span class=\"line\">            console.log(this.type + &apos; says &apos; + say)</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> var animal = new Animal()</span><br><span class=\"line\"> animal.says(&apos;hi&apos;)  //undefined says hi</span><br></pre></td></tr></table></figure>\n<p>运行上面的代码会报错，这是因为<code>setTimeout</code>中的<code>this</code>指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>\n<p>1.第一种是将<code>this</code>传给<code>self</code>,再用<code>self</code>来指代<code>this</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">says(say)&#123;</span><br><span class=\"line\">   var self = this;</span><br><span class=\"line\">   setTimeout(function()&#123;</span><br><span class=\"line\">       console.log(self.type + &apos; says &apos; + say)</span><br><span class=\"line\">&#125;, 1000)</span><br></pre></td></tr></table></figure>\n<p>2.第二种方法是用<code>bind(this)</code>,即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">says(say)&#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        console.log(this.type + &apos; says &apos; + say)</span><br><span class=\"line\">    &#125;.bind(this), 1000)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但现在我们有了箭头函数，就不需要这么麻烦了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal &#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        this.type = &apos;animal&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        setTimeout( () =&gt; &#123;</span><br><span class=\"line\">            console.log(this.type + &apos; says &apos; + say)</span><br><span class=\"line\">        &#125;, 1000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> var animal = new Animal()</span><br><span class=\"line\"> animal.says(&apos;hi&apos;)  //animal says hi</span><br></pre></td></tr></table></figure>\n<p>当我们使用箭头函数时，函数体内的<code>this</code>对象，就是<code>定义时</code>所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本<code>没有自己的this</code>，它的this是<code>继承外面的</code>，因此内部的this就是外层代码块的this。</p>\n<h2 id=\"模板字符串-template-string\"><a href=\"#模板字符串-template-string\" class=\"headerlink\" title=\"模板字符串 template string\"></a>模板字符串 template string</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不用模板字符串 写法</span><br><span class=\"line\">$(&quot;#result&quot;).append(</span><br><span class=\"line\">  &quot;There are &lt;b&gt;&quot; + basket.count + &quot;&lt;/b&gt; &quot; +</span><br><span class=\"line\">  &quot;items in your basket, &quot; +</span><br><span class=\"line\">  &quot;&lt;em&gt;&quot; + basket.onSale +</span><br><span class=\"line\">  &quot;&lt;/em&gt; are on sale!&quot;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//使用模板字符串写法</span><br><span class=\"line\">$(&quot;#result&quot;).append(`</span><br><span class=\"line\">  There are &lt;b&gt;$&#123;basket.count&#125;&lt;/b&gt; items</span><br><span class=\"line\">   in your basket, &lt;em&gt;$&#123;basket.onSale&#125;&lt;/em&gt;</span><br><span class=\"line\">  are on sale!</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用反引号（`）来标识起始，用<code>${}</code>来引用变量，而且所有的<code>空格和缩进</code>都会被保留在输出之中(==这个需要注意==)</p>\n</blockquote>\n<h2 id=\"解构-destructuring\"><a href=\"#解构-destructuring\" class=\"headerlink\" title=\"解构 destructuring\"></a>解构 destructuring</h2><p><code>ES6</code>允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（<code>Destructuring</code>）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let cat = &apos;ken&apos;</span><br><span class=\"line\">let dog = &apos;lili&apos;</span><br><span class=\"line\">let zoo = &#123;cat: cat, dog: dog&#125;</span><br><span class=\"line\">console.log(zoo)  //Object &#123;cat: &quot;ken&quot;, dog: &quot;lili&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用es6解构</span><br><span class=\"line\">let cat = &apos;ken&apos;</span><br><span class=\"line\">let dog = &apos;lili&apos;</span><br><span class=\"line\">let zoo = &#123;cat, dog&#125;</span><br><span class=\"line\">console.log(zoo)  //Object &#123;cat: &quot;ken&quot;, dog: &quot;lili&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//反过来可以这么写：</span><br><span class=\"line\">let dog = &#123;type: &apos;animal&apos;, many: 2&#125;</span><br><span class=\"line\">let &#123; type, many&#125; = dog</span><br><span class=\"line\">console.log(type, many)   //animal 2</span><br></pre></td></tr></table></figure>\n<h2 id=\"默认值-default\"><a href=\"#默认值-default\" class=\"headerlink\" title=\"默认值 default\"></a>默认值 default</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function animal(type)&#123;</span><br><span class=\"line\">    type = type || &apos;cat&apos;  </span><br><span class=\"line\">    console.log(type)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animal()</span><br><span class=\"line\"></span><br><span class=\"line\">//ES6</span><br><span class=\"line\">function animal(type = &apos;cat&apos;)&#123;</span><br><span class=\"line\">    console.log(type)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animal()</span><br></pre></td></tr></table></figure>\n<h2 id=\"展开操作符-rest-arguments-…\"><a href=\"#展开操作符-rest-arguments-…\" class=\"headerlink\" title=\"展开操作符 rest arguments (…)\"></a>展开操作符 rest arguments (…)</h2><p><a href=\"http://blog.csdn.net/qq_30100043/article/details/53391308\" target=\"_blank\" rel=\"noopener\">扩展运算符详细介绍</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animals(...types)&#123;</span><br><span class=\"line\">    console.log(types)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animals(&apos;cat&apos;, &apos;dog&apos;, &apos;fish&apos;) //[&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import export\"></a>import export</h2><p><strong>传统的写法</strong>CommonJS(服务器端)和AMD（浏览器端，如require.js）</p>\n<p>AMD写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//content.js</span><br><span class=\"line\">define(&apos;content.js&apos;, function()&#123;</span><br><span class=\"line\">    return &apos;A cat&apos;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//index.js</span><br><span class=\"line\">require([&apos;./content.js&apos;], function(animal)&#123;</span><br><span class=\"line\">    console.log(animal);   //A cat</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>CommonJS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">var animal = require(&apos;./content.js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//content.js</span><br><span class=\"line\">module.exports = &apos;A cat&apos;</span><br></pre></td></tr></table></figure>\n<p>ES6的写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">import animal from &apos;./content&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//content.js</span><br><span class=\"line\">export default &apos;A cat&apos;</span><br></pre></td></tr></table></figure>\n<p>ES6 module的其他高级用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//content.js</span><br><span class=\"line\">export default &apos;A cat&apos;    </span><br><span class=\"line\">export function say()&#123;</span><br><span class=\"line\">    return &apos;Hello!&apos;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">export const type = &apos;dog&apos; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//index.js</span><br><span class=\"line\">import &#123; say, type &#125; from &apos;./content&apos;  </span><br><span class=\"line\">let says = say()</span><br><span class=\"line\">console.log(`The $&#123;type&#125; says $&#123;says&#125;`)  //The dog says Hello</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里输入的时候要注意：<code>大括号</code>里面的<code>变量名</code>，必须与被导入模块（content.js）对外接口的<code>名称相同</code>。<br>如果还希望输入content.js中输出的<code>默认值</code>(default), 可以写在大括号外面。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">import animal, &#123; say, type &#125; from &apos;./content&apos;  </span><br><span class=\"line\">let says = say()</span><br><span class=\"line\">console.log(`The $&#123;type&#125; says $&#123;says&#125; to $&#123;animal&#125;`)  </span><br><span class=\"line\">//The dog says Hello to A cat</span><br></pre></td></tr></table></figure>\n<p>修改变量名</p>\n<p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用<code>as</code>实现一键换名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">import animal, &#123; say, type as animalType &#125; from &apos;./content&apos;  </span><br><span class=\"line\">let says = say()</span><br><span class=\"line\">console.log(`The $&#123;animalType&#125; says $&#123;says&#125; to $&#123;animal&#125;`)  </span><br><span class=\"line\">//The dog says Hello to A cat</span><br></pre></td></tr></table></figure>\n<p>模块的整体加载</p>\n<p>除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\"></span><br><span class=\"line\">import animal, * as content from &apos;./content&apos;  </span><br><span class=\"line\">let says = content.say()</span><br><span class=\"line\">console.log(`The $&#123;content.type&#125; says $&#123;says&#125; to $&#123;animal&#125;`)  </span><br><span class=\"line\">//The dog says Hello to A cat</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通常星号<code>*</code>结合<code>as</code>一起使用比较合适。</p>\n</blockquote>\n<h1 id=\"其他-特性\"><a href=\"#其他-特性\" class=\"headerlink\" title=\"其他 特性\"></a>其他 特性</h1><p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰老师的es6入门</a></p>\n<hr>\n<p><a href=\"https://segmentfault.com/a/1190000004368132\" target=\"_blank\" rel=\"noopener\">参考1</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000004365693\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1485327369000,
				"created_by": 2,
				"updated_at": 1520839911000,
				"updated_by": 2,
				"published_at": 1485327369000,
				"published_by": 2
			},
			{
				"id": "cjf28iamn0016cu7tlcjymdhy",
				"title": "nodejs+express开发笔记",
				"slug": "nodejs-document",
				"markdown": "\n# nodejs 开发笔记\n\n## supervisor\n\n在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 `supervisor` 可以解决这个繁琐的问题，全局安装 `supervisor`：\n\n```\nnpm install -g supervisor\n```\n\n运行 `supervisor --harmony index` 启动程序，如下所示：\n\n```\n$ supervisor --harmony index\n\nRunning node-supervisor with\n  program '--harmony index'\n  --watch '.'\n  --extensions 'node,js'\n  --exec 'node'\n\nStarting child process with 'node --harmony index'\nWatching directory '/Users/shanshanxue/Documents/workspace/aym_admin_nav' for changes.\nPress rs for restarting the process.\n\n```\nsupervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。\n\n\n## 路由\n\n```\nvar express = require('express');\nvar app = express();\n\napp.get('/', function(req, res) {\n  res.send('hello, express');\n});\n\napp.get('/users/:name', function(req, res) {\n  res.send('hello, ' + req.params.name);\n});\n\napp.listen(3000);\n```\n\n以上代码的意思是：当访问根路径时，依然返回 `hello`, `express`，当访问如 `localhost:3000/users/nswbmw` 路径时，返回 `hello`, `nswbmw`。路径中 `:name` 起了占位符的作用，这个占位符的名字是 `name`，可以通过 `req.params.name` 取到实际的值。\n\n>小提示：express 使用了 `path-to-regexp` 模块实现的路由匹配。\n\n不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 express 官方文档。下面介绍几个常用的 req 的属性：\n\n\n* `req.query`: 解析后的 `url` 中的 `querystring`，如 `?name=haha`，`req.query` 的值为 `{name: 'haha'}`\n* `req.params`: 解析 `url` 中的占位符，如 `/:name`，访问 `/haha`，`req.params` 的值为 `{name: 'haha'}`\n* `req.body`: 解析后请求体，需使用相关的模块，如 `body-parser`，请求体为 `{\"name\": \"haha\"}`，则 `req.body` 为 `{name: 'haha'}`\n\n\n## 模板引擎ejs\n\n模板引擎有很多，`ejs` 是其中一种，因为它使用起来十分简单，而且与 `express` 集成良好，所以我们使用 `ejs`。安装 `ejs`：\n\n```\nnpm i ejs --save\n```\n\n**ejs文件**\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {padding: 50px;font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;}\n    </style>\n  </head>\n  <body>\n    <h1><%= name.toUpperCase() %></h1>\n    <p>hello, <%= name %></p>\n  </body>\n</html>\n```\n\n**routes**\n\n```\nvar express = require('express');\nvar router = express.Router();\n\nrouter.get('/:name', function(req, res) {\n  res.render('users', {\n    name: req.params.name\n  });\n});\n\nmodule.exports = router;\n```\n\n通过调用 `res.render` 函数渲染 `ejs` 模板，`res.render` 第一个参数是模板的名字，这里是 `users` 则会匹配 `views/users.ejs`，第二个参数是传给模板的数据，这里传入 `name`，则在 `ejs` 模板中可使用 `name`。`res.render` 的作用就是将模板和数据结合生成 `html`，同时设置响应头中的 `Content-Type: text/html`，告诉浏览器我返回的是 `html`，不是纯文本，要按 `html` 展示\n\n\n\n上面代码可以看到，我们在模板 `<%= name.toUpperCase() %>` 中使用了 `JavaScript` 的语法 `.toUpperCase()` 将名字转化为大写，那这个 `<%= xxx %>` 是什么东西呢？`ejs` 有 `3` 种常用标签：\n\n1. `<% code %>`：运行 `JavaScript` 代码，不输出\n2. `<%= code %>`：显示转义后的 `HTML` 内容\n3. `<%- code %>`：显示原始 `HTML` 内容\n\n>注意：`<%= code %>` 和 `<%- code %>` 都可以是 `JavaScript` 表达式生成的字符串，当变量 `code` 为普通字符串时，两者没有区别。当 `code` 比如为 `<h1>hello</h1>` 这种字符串时，`<%= code %>` 会原样输出 `<h1>hello</h1>`，而 `<%- code %>` 则会显示 `H1` 大的 `hello` 字符串。\n\n下面的例子解释了 `<% code %>` 的用法：\n\nData\n\n```\nsupplies: ['mop', 'broom', 'duster']\n```\n\nTemplate\n\n```\n<ul>\n<% for(var i=0; i<supplies.length; i++) {%>\n   <li><%= supplies[i] %></li>\n<% } %>\n</ul>\n```\n\nResult\n\n```\n<ul>\n  <li>mop</li>\n  <li>broom</li>\n  <li>duster</li>\n</ul>\n```\n\n#### includes\n\n我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：\n\n\n**views/header.ejs**\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      body {padding: 50px;font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;}\n    </style>\n  </head>\n  <body>\n  ```\n  \n  \n**views/footer.ejs**\n\n```\n  </body>\n</html>\n```\n\n**views/users.ejs**\n\n```\n<%- include('header') %>\n  <h1><%= name.toUpperCase() %></h1>\n  <p>hello, <%= name %></p>\n<%- include('footer') %>\n```\n\n我们将原来的 `users.ejs` 拆成出了 `header.ejs` 和 `footer.ejs`，并在 `users.ejs` 通过 `ejs` 内置的 `include` 方法引入，从而实现了跟以前一个模板文件相同的功能。\n\n>小提示：拆分模板组件通常有两个好处：\n>\n>1. 模板可复用，减少重复代码\n>\n>2. 主模板结构清晰\n\n\n\n>注意：要用 `<%- include('header') %>` 而不是 `<%= include('header') %>`\n\n\n## 开发准备\n\n### 目录结构\n\n对应文件及文件夹的用处：\n\n1. `models`: 存放操作数据库的文件\n2. `public`: 存放静态文件，如样式、图片等\n3. `routes`: 存放路由文件\n4. `views`: 存放模板文件\n5. `index.js`: 程序主文件\n6. `package.json`: 存储项目名、描述、作者、依赖等等信息\n\n>小提示：不知读者发现了没有，我们遵循了 `MVC`（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。\n\n\n### 安装依赖模块\n\n运行以下命令安装所需的模块：\n\n```\nnpm i config-lite connect-flash connect-mongo ejs express express-formidable express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save\n```\n\n对应模块的用处：\n\n\n1. `express`: web 框架\n2. `express-session`: session 中间件\n3. `connect-mongo`: 将 session 存储于 mongodb，结合 express-session 使用\n4. `connect-flash`: 页面通知提示的中间件，基于 session 实现\n5. `ejs`: 模板\n6. `express-formidable`: 接收表单及文件的上传中间件\n7. `config-lite`: 读取配置文件\n8. `marked`: markdown 解析\n9. `moment`: 时间格式化\n10. `mongolass`: mongodb 驱动\n11. `objectid-to-timestamp`: 根据 ObjectId 生成时间戳\n12. `sha1`: sha1 加密，用于密码加密\n13. `winston`: 日志\n14. `express-winston`: 基于 winston 的用于 express 的日志中间件\n\n\n\n## config-lite\n\n不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，如 `config.js` 或 `config.json` ，并放到项目的根目录下。但通常我们都会有许多环境，如本地开发环境、测试环境和线上环境等，不同的环境的配置不同，我们不可能每次部署时都要去修改引用 `config.test.js` 或者 `config.production.js`。`config-lite` 模块正是你需要的。\n\n`config-lite` 是一个轻量的读取配置文件的模块。`config-lite` 会根据环境变量（`NODE_ENV`）的不同从当前执行进程目录下的 `config` 目录加载不同的配置文件。如果不设置 `NODE_ENV`，则读取默认的 `default` 配置文件，如果设置了 `NODE_ENV`，则会合并指定的配置文件和 `default` 配置文件作为配置，`config-lite` 支持 `.js`、`.json`、`.node`、`.yml`、`.yaml` 后缀的文件。\n\n如果程序以 `NODE_ENV=test node app` 启动，则 `config-lite` 会依次降级查找 `config/test.js`、`config/test.json`、`config/test.node`、`config/test.yml`、`config/test.yaml` 并合并 `default` 配置; 如果程序以 `NODE_ENV=production node app` 启动，则 `config-lite` 会依次降级查找 `config/production.js`、`config/production.json`、`config/production.node`、`config/production.yml`、`config/production.yaml` 并合并 `default` 配置。\n\n在 `myblog` 下新建 `config` 目录，在该目录下新建 `default.js`，添加如下代码：\n\n**config/default.js**\n\n```\nmodule.exports = {\n  port: 3000,\n  session: {\n    secret: 'myblog',\n    key: 'myblog',\n    maxAge: 2592000000\n  },\n  mongodb: 'mongodb://localhost:27017/myblog'\n};\n```\n\n配置释义：\n\n1. `port`: 程序启动要监听的端口号\n2. `session`: `express-session` 的配置信息，后面介绍\n3. `mongodb`: `mongodb` 的地址，`myblog` 为 `db` 名\n\n\n\n\n\n## 功能与路由设计\n\n功能列表：\n路由设计如下：\n\n\n```\n注册 \n\t* 注册页 ：GET /signup\n\t* 注册方法： POST /signup\n\n登陆：\n\t* 登陆页：GET /signin\n\t* 登录：POST /signin\n\n登出：GET /signout\n\n\t\n类目:\n查看类目 ： GET /category\n发表类目 ：\n   * 发表类目页面：GET /category/create\n   * 发表类目： POST /category\n修改类目： \n\t修改类目页面： GET /category/:categoryId/edit\n\t修改类目：POST /category/:categoryId/edit\n删除类目：GET /category/:categoryId/remove\n\n\nNAV :\n查看nav\n\t个人主页： GET /nav?user=xxx\n发表nav ：\n   * 发表nav页面：GET /nav/create\n   * 发表nav： POST /nav\n修改nav： \n\t修改nav页面： GET /nav/:navId/edit\n\t修改nav：POST /nav/:navId/edit\n删除nav：GET /nav/:navId/remove\n\n\n用户与nav分类关联信息：\nuser To Nav Category :\n添加分类页面： GET /userToCategory\n更新nav分类管理信息 ：POST /userToCategory/updata?userId=xxx&categorys=1,2,3,4,4,5,6\n\n\n\n```\n\n用户表：\n\n名称 | name\n---|------\nid|id\n用户名|name\n密码|password\n\n\nnav表：\n\n名称 | name\n---|------\nid | id\n名称 | title\n内容 | content\n图片url | imgUrl\n类别 | categoryId\n作者ID | userId\npv | pv\n\n\nnav分类：\n\n名称 | name\n---|------\nid |id\n名称 | name\n\n\n用户个人分类表（根据此表展示当前用户选择的分类下的所有nav）：\n\n名称 | name\n---|------\nid | id\n用户id| userId\n分类ID  （1，2，3，4，5）| categoryId\n\n\n\n接口结果格式：\n\n\n```\n{\nsuccess : true，\nmsg : '',\ncode : '200',\nobj : {}\n}\n```\n\n\n\n\n\n",
				"html": "<h1 id=\"nodejs-开发笔记\"><a href=\"#nodejs-开发笔记\" class=\"headerlink\" title=\"nodejs 开发笔记\"></a>nodejs 开发笔记</h1><h2 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h2><p>在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 <code>supervisor</code> 可以解决这个繁琐的问题，全局安装 <code>supervisor</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g supervisor</span><br></pre></td></tr></table></figure>\n<p>运行 <code>supervisor --harmony index</code> 启动程序，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ supervisor --harmony index</span><br><span class=\"line\"></span><br><span class=\"line\">Running node-supervisor with</span><br><span class=\"line\">  program &apos;--harmony index&apos;</span><br><span class=\"line\">  --watch &apos;.&apos;</span><br><span class=\"line\">  --extensions &apos;node,js&apos;</span><br><span class=\"line\">  --exec &apos;node&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Starting child process with &apos;node --harmony index&apos;</span><br><span class=\"line\">Watching directory &apos;/Users/shanshanxue/Documents/workspace/aym_admin_nav&apos; for changes.</span><br><span class=\"line\">Press rs for restarting the process.</span><br></pre></td></tr></table></figure>\n<p>supervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。</p>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;hello, express&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/users/:name&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.send(&apos;hello, &apos; + req.params.name);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n<p>以上代码的意思是：当访问根路径时，依然返回 <code>hello</code>, <code>express</code>，当访问如 <code>localhost:3000/users/nswbmw</code> 路径时，返回 <code>hello</code>, <code>nswbmw</code>。路径中 <code>:name</code> 起了占位符的作用，这个占位符的名字是 <code>name</code>，可以通过 <code>req.params.name</code> 取到实际的值。</p>\n<blockquote>\n<p>小提示：express 使用了 <code>path-to-regexp</code> 模块实现的路由匹配。</p>\n</blockquote>\n<p>不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 express 官方文档。下面介绍几个常用的 req 的属性：</p>\n<ul>\n<li><code>req.query</code>: 解析后的 <code>url</code> 中的 <code>querystring</code>，如 <code>?name=haha</code>，<code>req.query</code> 的值为 <code>{name: &#39;haha&#39;}</code></li>\n<li><code>req.params</code>: 解析 <code>url</code> 中的占位符，如 <code>/:name</code>，访问 <code>/haha</code>，<code>req.params</code> 的值为 <code>{name: &#39;haha&#39;}</code></li>\n<li><code>req.body</code>: 解析后请求体，需使用相关的模块，如 <code>body-parser</code>，请求体为 <code>{&quot;name&quot;: &quot;haha&quot;}</code>，则 <code>req.body</code> 为 <code>{name: &#39;haha&#39;}</code></li>\n</ul>\n<h2 id=\"模板引擎ejs\"><a href=\"#模板引擎ejs\" class=\"headerlink\" title=\"模板引擎ejs\"></a>模板引擎ejs</h2><p>模板引擎有很多，<code>ejs</code> 是其中一种，因为它使用起来十分简单，而且与 <code>express</code> 集成良好，所以我们使用 <code>ejs</code>。安装 <code>ejs</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i ejs --save</span><br></pre></td></tr></table></figure>\n<p><strong>ejs文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">      body &#123;padding: 50px;font: 14px &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif;&#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;&lt;%= name.toUpperCase() %&gt;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;p&gt;hello, &lt;%= name %&gt;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>routes</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/:name&apos;, function(req, res) &#123;</span><br><span class=\"line\">  res.render(&apos;users&apos;, &#123;</span><br><span class=\"line\">    name: req.params.name</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure>\n<p>通过调用 <code>res.render</code> 函数渲染 <code>ejs</code> 模板，<code>res.render</code> 第一个参数是模板的名字，这里是 <code>users</code> 则会匹配 <code>views/users.ejs</code>，第二个参数是传给模板的数据，这里传入 <code>name</code>，则在 <code>ejs</code> 模板中可使用 <code>name</code>。<code>res.render</code> 的作用就是将模板和数据结合生成 <code>html</code>，同时设置响应头中的 <code>Content-Type: text/html</code>，告诉浏览器我返回的是 <code>html</code>，不是纯文本，要按 <code>html</code> 展示</p>\n<p>上面代码可以看到，我们在模板 <code>&lt;%= name.toUpperCase() %&gt;</code> 中使用了 <code>JavaScript</code> 的语法 <code>.toUpperCase()</code> 将名字转化为大写，那这个 <code>&lt;%= xxx %&gt;</code> 是什么东西呢？<code>ejs</code> 有 <code>3</code> 种常用标签：</p>\n<ol>\n<li><code>&lt;% code %&gt;</code>：运行 <code>JavaScript</code> 代码，不输出</li>\n<li><code>&lt;%= code %&gt;</code>：显示转义后的 <code>HTML</code> 内容</li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 <code>HTML</code> 内容</li>\n</ol>\n<blockquote>\n<p>注意：<code>&lt;%= code %&gt;</code> 和 <code>&lt;%- code %&gt;</code> 都可以是 <code>JavaScript</code> 表达式生成的字符串，当变量 <code>code</code> 为普通字符串时，两者没有区别。当 <code>code</code> 比如为 <code>&lt;h1&gt;hello&lt;/h1&gt;</code> 这种字符串时，<code>&lt;%= code %&gt;</code> 会原样输出 <code>&lt;h1&gt;hello&lt;/h1&gt;</code>，而 <code>&lt;%- code %&gt;</code> 则会显示 <code>H1</code> 大的 <code>hello</code> 字符串。</p>\n</blockquote>\n<p>下面的例子解释了 <code>&lt;% code %&gt;</code> 的用法：</p>\n<p>Data</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supplies: [&apos;mop&apos;, &apos;broom&apos;, &apos;duster&apos;]</span><br></pre></td></tr></table></figure>\n<p>Template</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;% for(var i=0; i&lt;supplies.length; i++) &#123;%&gt;</span><br><span class=\"line\">   &lt;li&gt;&lt;%= supplies[i] %&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>Result</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;mop&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;broom&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;duster&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h4><p>我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：</p>\n<p><strong>views/header.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">      body &#123;padding: 50px;font: 14px &quot;Lucida Grande&quot;, Helvetica, Arial, sans-serif;&#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>views/footer.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>views/users.ejs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- include(&apos;header&apos;) %&gt;</span><br><span class=\"line\">  &lt;h1&gt;&lt;%= name.toUpperCase() %&gt;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;p&gt;hello, &lt;%= name %&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;%- include(&apos;footer&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n<p>我们将原来的 <code>users.ejs</code> 拆成出了 <code>header.ejs</code> 和 <code>footer.ejs</code>，并在 <code>users.ejs</code> 通过 <code>ejs</code> 内置的 <code>include</code> 方法引入，从而实现了跟以前一个模板文件相同的功能。</p>\n<blockquote>\n<p>小提示：拆分模板组件通常有两个好处：</p>\n<ol>\n<li><p>模板可复用，减少重复代码</p>\n</li>\n<li><p>主模板结构清晰</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>注意：要用 <code>&lt;%- include(&#39;header&#39;) %&gt;</code> 而不是 <code>&lt;%= include(&#39;header&#39;) %&gt;</code></p>\n</blockquote>\n<h2 id=\"开发准备\"><a href=\"#开发准备\" class=\"headerlink\" title=\"开发准备\"></a>开发准备</h2><h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>对应文件及文件夹的用处：</p>\n<ol>\n<li><code>models</code>: 存放操作数据库的文件</li>\n<li><code>public</code>: 存放静态文件，如样式、图片等</li>\n<li><code>routes</code>: 存放路由文件</li>\n<li><code>views</code>: 存放模板文件</li>\n<li><code>index.js</code>: 程序主文件</li>\n<li><code>package.json</code>: 存储项目名、描述、作者、依赖等等信息</li>\n</ol>\n<blockquote>\n<p>小提示：不知读者发现了没有，我们遵循了 <code>MVC</code>（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。</p>\n</blockquote>\n<h3 id=\"安装依赖模块\"><a href=\"#安装依赖模块\" class=\"headerlink\" title=\"安装依赖模块\"></a>安装依赖模块</h3><p>运行以下命令安装所需的模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i config-lite connect-flash connect-mongo ejs express express-formidable express-session marked moment mongolass objectid-to-timestamp sha1 winston express-winston --save</span><br></pre></td></tr></table></figure>\n<p>对应模块的用处：</p>\n<ol>\n<li><code>express</code>: web 框架</li>\n<li><code>express-session</code>: session 中间件</li>\n<li><code>connect-mongo</code>: 将 session 存储于 mongodb，结合 express-session 使用</li>\n<li><code>connect-flash</code>: 页面通知提示的中间件，基于 session 实现</li>\n<li><code>ejs</code>: 模板</li>\n<li><code>express-formidable</code>: 接收表单及文件的上传中间件</li>\n<li><code>config-lite</code>: 读取配置文件</li>\n<li><code>marked</code>: markdown 解析</li>\n<li><code>moment</code>: 时间格式化</li>\n<li><code>mongolass</code>: mongodb 驱动</li>\n<li><code>objectid-to-timestamp</code>: 根据 ObjectId 生成时间戳</li>\n<li><code>sha1</code>: sha1 加密，用于密码加密</li>\n<li><code>winston</code>: 日志</li>\n<li><code>express-winston</code>: 基于 winston 的用于 express 的日志中间件</li>\n</ol>\n<h2 id=\"config-lite\"><a href=\"#config-lite\" class=\"headerlink\" title=\"config-lite\"></a>config-lite</h2><p>不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，如 <code>config.js</code> 或 <code>config.json</code> ，并放到项目的根目录下。但通常我们都会有许多环境，如本地开发环境、测试环境和线上环境等，不同的环境的配置不同，我们不可能每次部署时都要去修改引用 <code>config.test.js</code> 或者 <code>config.production.js</code>。<code>config-lite</code> 模块正是你需要的。</p>\n<p><code>config-lite</code> 是一个轻量的读取配置文件的模块。<code>config-lite</code> 会根据环境变量（<code>NODE_ENV</code>）的不同从当前执行进程目录下的 <code>config</code> 目录加载不同的配置文件。如果不设置 <code>NODE_ENV</code>，则读取默认的 <code>default</code> 配置文件，如果设置了 <code>NODE_ENV</code>，则会合并指定的配置文件和 <code>default</code> 配置文件作为配置，<code>config-lite</code> 支持 <code>.js</code>、<code>.json</code>、<code>.node</code>、<code>.yml</code>、<code>.yaml</code> 后缀的文件。</p>\n<p>如果程序以 <code>NODE_ENV=test node app</code> 启动，则 <code>config-lite</code> 会依次降级查找 <code>config/test.js</code>、<code>config/test.json</code>、<code>config/test.node</code>、<code>config/test.yml</code>、<code>config/test.yaml</code> 并合并 <code>default</code> 配置; 如果程序以 <code>NODE_ENV=production node app</code> 启动，则 <code>config-lite</code> 会依次降级查找 <code>config/production.js</code>、<code>config/production.json</code>、<code>config/production.node</code>、<code>config/production.yml</code>、<code>config/production.yaml</code> 并合并 <code>default</code> 配置。</p>\n<p>在 <code>myblog</code> 下新建 <code>config</code> 目录，在该目录下新建 <code>default.js</code>，添加如下代码：</p>\n<p><strong>config/default.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  session: &#123;</span><br><span class=\"line\">    secret: &apos;myblog&apos;,</span><br><span class=\"line\">    key: &apos;myblog&apos;,</span><br><span class=\"line\">    maxAge: 2592000000</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mongodb: &apos;mongodb://localhost:27017/myblog&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>配置释义：</p>\n<ol>\n<li><code>port</code>: 程序启动要监听的端口号</li>\n<li><code>session</code>: <code>express-session</code> 的配置信息，后面介绍</li>\n<li><code>mongodb</code>: <code>mongodb</code> 的地址，<code>myblog</code> 为 <code>db</code> 名</li>\n</ol>\n<h2 id=\"功能与路由设计\"><a href=\"#功能与路由设计\" class=\"headerlink\" title=\"功能与路由设计\"></a>功能与路由设计</h2><p>功能列表：<br>路由设计如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册 </span><br><span class=\"line\">\t* 注册页 ：GET /signup</span><br><span class=\"line\">\t* 注册方法： POST /signup</span><br><span class=\"line\"></span><br><span class=\"line\">登陆：</span><br><span class=\"line\">\t* 登陆页：GET /signin</span><br><span class=\"line\">\t* 登录：POST /signin</span><br><span class=\"line\"></span><br><span class=\"line\">登出：GET /signout</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">类目:</span><br><span class=\"line\">查看类目 ： GET /category</span><br><span class=\"line\">发表类目 ：</span><br><span class=\"line\">   * 发表类目页面：GET /category/create</span><br><span class=\"line\">   * 发表类目： POST /category</span><br><span class=\"line\">修改类目： </span><br><span class=\"line\">\t修改类目页面： GET /category/:categoryId/edit</span><br><span class=\"line\">\t修改类目：POST /category/:categoryId/edit</span><br><span class=\"line\">删除类目：GET /category/:categoryId/remove</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NAV :</span><br><span class=\"line\">查看nav</span><br><span class=\"line\">\t个人主页： GET /nav?user=xxx</span><br><span class=\"line\">发表nav ：</span><br><span class=\"line\">   * 发表nav页面：GET /nav/create</span><br><span class=\"line\">   * 发表nav： POST /nav</span><br><span class=\"line\">修改nav： </span><br><span class=\"line\">\t修改nav页面： GET /nav/:navId/edit</span><br><span class=\"line\">\t修改nav：POST /nav/:navId/edit</span><br><span class=\"line\">删除nav：GET /nav/:navId/remove</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">用户与nav分类关联信息：</span><br><span class=\"line\">user To Nav Category :</span><br><span class=\"line\">添加分类页面： GET /userToCategory</span><br><span class=\"line\">更新nav分类管理信息 ：POST /userToCategory/updata?userId=xxx&amp;categorys=1,2,3,4,4,5,6</span><br></pre></td></tr></table></figure>\n<p>用户表：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>id</td>\n</tr>\n<tr>\n<td>用户名</td>\n<td>name</td>\n</tr>\n<tr>\n<td>密码</td>\n<td>password</td>\n</tr>\n</tbody>\n</table>\n<p>nav表：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>id</td>\n</tr>\n<tr>\n<td>名称</td>\n<td>title</td>\n</tr>\n<tr>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>图片url</td>\n<td>imgUrl</td>\n</tr>\n<tr>\n<td>类别</td>\n<td>categoryId</td>\n</tr>\n<tr>\n<td>作者ID</td>\n<td>userId</td>\n</tr>\n<tr>\n<td>pv</td>\n<td>pv</td>\n</tr>\n</tbody>\n</table>\n<p>nav分类：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>id</td>\n</tr>\n<tr>\n<td>名称</td>\n<td>name</td>\n</tr>\n</tbody>\n</table>\n<p>用户个人分类表（根据此表展示当前用户选择的分类下的所有nav）：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>id</td>\n</tr>\n<tr>\n<td>用户id</td>\n<td>userId</td>\n</tr>\n<tr>\n<td>分类ID  （1，2，3，4，5）</td>\n<td>categoryId</td>\n</tr>\n</tbody>\n</table>\n<p>接口结果格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">success : true，</span><br><span class=\"line\">msg : &apos;&apos;,</span><br><span class=\"line\">code : &apos;200&apos;,</span><br><span class=\"line\">obj : &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1478589355000,
				"created_by": 2,
				"updated_at": 1520839000000,
				"updated_by": 2,
				"published_at": 1478589355000,
				"published_by": 2
			},
			{
				"id": "cjf28iama000mcu7tbc2bztfz",
				"title": "设置清除html5页面缓存",
				"slug": "h5-wipe-cache",
				"markdown": "\n### `html5`端设置 `meta` 标签：\n\n```\n<meta http-equiv=\"Pragma\" content=\"no-cache\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\" />\n<meta http-equiv=\"Expires\" content=\"0\" />\n```\n\n>  设置上面的只是紧紧可以保证`html`文件每次从服务器中获取，不从缓存文件中拿，而对于外链`CSS` `JS` `图片` 等文件仍旧是从缓存中获取的；\n>\n\n\n### 设置 `css` `JS`文件不从缓存中读取:\n\n通过添加版本号的和随机数的方法，保证每次加载`JS` `CSS`连接都是最新的，通常的做法是添加一个版本号，在每次更新了`JS` `CSS`时给**版本号+1**，保证没有更新时采用缓存文件。\n\n> 不推荐加随机数的方法，每次都是最新的，没办法利用缓存提高性能。\n\n```\n<script type=\"text/javascript\" src=\"/js/index.js?v=1.0.0\"></script>\n```\n\n\n> 转载请注明出处\n>\n> 作者：xuess<wuniu2010@126.com>\n> \n> 时间：2017年08月08日\n> \n> 最后修改时间：2017年08月08日",
				"html": "<h3 id=\"html5端设置-meta-标签：\"><a href=\"#html5端设置-meta-标签：\" class=\"headerlink\" title=\"html5端设置 meta 标签：\"></a><code>html5</code>端设置 <code>meta</code> 标签：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot; /&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 设置上面的只是紧紧可以保证<code>html</code>文件每次从服务器中获取，不从缓存文件中拿，而对于外链<code>CSS</code> <code>JS</code> <code>图片</code> 等文件仍旧是从缓存中获取的；</p>\n</blockquote>\n<h3 id=\"设置-css-JS文件不从缓存中读取\"><a href=\"#设置-css-JS文件不从缓存中读取\" class=\"headerlink\" title=\"设置 css JS文件不从缓存中读取:\"></a>设置 <code>css</code> <code>JS</code>文件不从缓存中读取:</h3><p>通过添加版本号的和随机数的方法，保证每次加载<code>JS</code> <code>CSS</code>连接都是最新的，通常的做法是添加一个版本号，在每次更新了<code>JS</code> <code>CSS</code>时给<strong>版本号+1</strong>，保证没有更新时采用缓存文件。</p>\n<blockquote>\n<p>不推荐加随机数的方法，每次都是最新的，没办法利用缓存提高性能。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/index.js?v=1.0.0&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载请注明出处</p>\n<p>作者：xuess<a href=\"mailto:&#x77;&#x75;&#110;&#105;&#117;&#50;&#x30;&#x31;&#48;&#x40;&#x31;&#x32;&#54;&#46;&#x63;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x77;&#x75;&#110;&#105;&#117;&#50;&#x30;&#x31;&#48;&#x40;&#x31;&#x32;&#54;&#46;&#x63;&#111;&#x6d;</a></p>\n<p>时间：2017年08月08日</p>\n<p>最后修改时间：2017年08月08日</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1472971882000,
				"created_by": 2,
				"updated_at": 1520840044000,
				"updated_by": 2,
				"published_at": 1472971882000,
				"published_by": 2
			},
			{
				"id": "cjf28iam3000ecu7tpw3qy6tl",
				"title": "重排重绘",
				"slug": "h5-css-js-redraw",
				"markdown": "\n\n### 什么是重排和重绘\n浏览器下载完页面中的所有组件——HTML标记、JavaScript、CSS、图片之后会解析生成两个内部数据结构——**DOM树和渲染树**。\n\n\nDOM树表示页面结构，渲染树表示DOM节点如何显示。\n\n\nDOM树中的每一个需要显示的节点在渲染树中至少存在一个对应的节点（隐藏的DOM元素disply值为none 在渲染树中没有对应的节点）。\n\n渲染树中的节点被称为“帧”或“盒\",符合CSS模型的定义，理解页面元素为一个具有填充，边距，边框和位置的盒子。\n\n一旦DOM和渲染树构建完成，浏览器就开始显示（绘制）页面元素。\n\n\n\n\n`document.createDocumentFragment()` ： 创建的是一次性的，用完即销毁\n\n\n当DOM的变化影响了元素的几何属性(宽和高)，浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。\n \n重排：浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。\n \n重绘：完成重排后，浏览器会重新绘制受影响的部分到屏幕中。\n\n重排何时发生：\n \n \n添加或删除可见的DOM元素\n元素位置的改变\n元素尺寸改变\n内容改变\n页面渲染器初始化\n浏览器窗口尺寸的改变",
				"html": "<h3 id=\"什么是重排和重绘\"><a href=\"#什么是重排和重绘\" class=\"headerlink\" title=\"什么是重排和重绘\"></a>什么是重排和重绘</h3><p>浏览器下载完页面中的所有组件——HTML标记、JavaScript、CSS、图片之后会解析生成两个内部数据结构——<strong>DOM树和渲染树</strong>。</p>\n<p>DOM树表示页面结构，渲染树表示DOM节点如何显示。</p>\n<p>DOM树中的每一个需要显示的节点在渲染树中至少存在一个对应的节点（隐藏的DOM元素disply值为none 在渲染树中没有对应的节点）。</p>\n<p>渲染树中的节点被称为“帧”或“盒”,符合CSS模型的定义，理解页面元素为一个具有填充，边距，边框和位置的盒子。</p>\n<p>一旦DOM和渲染树构建完成，浏览器就开始显示（绘制）页面元素。</p>\n<p><code>document.createDocumentFragment()</code> ： 创建的是一次性的，用完即销毁</p>\n<p>当DOM的变化影响了元素的几何属性(宽和高)，浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。</p>\n<p>重排：浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。</p>\n<p>重绘：完成重排后，浏览器会重新绘制受影响的部分到屏幕中。</p>\n<p>重排何时发生：</p>\n<p>添加或删除可见的DOM元素<br>元素位置的改变<br>元素尺寸改变<br>内容改变<br>页面渲染器初始化<br>浏览器窗口尺寸的改变</p>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1471935177000,
				"created_by": 2,
				"updated_at": 1520840001000,
				"updated_by": 2,
				"published_at": 1471935177000,
				"published_by": 2
			},
			{
				"id": "cjf28ialt0005cu7tc3ul4tvi",
				"title": "常用代码片段",
				"slug": "code-block",
				"markdown": "\n\n# 常用代码片段\n\n\n### a标签创建连接点击跳转\n\n```javascript\nvar el = document.createElement(\"a\");\ndocument.body.appendChild(el);\nel.href = 'http://www.baidu.com'; //url 是你得到的连接\n//el.target = '_new'; //指定在新窗口打开\nel.click();\ndocument.body.removeChild(el);\nreturn ;\n```\n\n\n### transform垂直左右居中\n\n```\nwidth: 80%;\npadding: 10px;\nborder: 1px solid #E94637;\nposition: fixed;\ntext-align: center;\nz-index: 13;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);\n-webkit-transform: translate(-50%, -50%);\n```\n\n### js异步上传 from表单\n\n```javascript\n//异步上传\nnew FormData($('#uploadForm')[0])\n```\n\n\n\n### 事件节流\n\n```javascript\n/**\n * 事件节流 或者 防止滚动卡顿 17毫秒左右每帧\n * @param {Object} fn\n * @param {Object} interval\n */\nfunction throttle(fn, interval) {\n\tvar doing = false;\n\treturn function() {\n\t\tif(doing) {\n\t\t\treturn;\n\t\t}\n\t\tdoing = true;\n\t\tfn.apply(this, arguments);\n\t\tsetTimeout(function() {\n\t\t\tdoing = false;\n\t\t}, interval);\n\t};\n};\n\n```\n\n### vue初始化模板\n\n```javascript\nvar vm = new Vue({\n\tel: \"#main\",\n\tdata: {\n\n\t},\n\t//计算属性\n\tcomputed: {\n\n\t},\n\t//方法\n\tmethods: {\n\t\t\n\t},\n\t//监听\n\twatch: {\n\n\t},\n\t//\t生命周期钩子的一些使用方法：\n\n\t//\tbeforecreate : 可以在这加个loading事件，在加载实例时触发\n\t//\tcreated : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用\n\t//\tmounted : 挂载元素，获取到DOM节点\n\t//\tupdated : 如果对数据统一处理，在这里写上相应函数\n\t//\tbeforeDestroy : 可以做一个确认停止事件的确认框\n\t//\tnextTick : 更新数据后立即操作dom\n\n\t//vue实例创建之前\n\tbeforecreate: function() {\n\n\t},\n\t//vue实例创建之后\n\tcreated: function() {\n\n\t}\n});\n```",
				"html": "<h1 id=\"常用代码片段\"><a href=\"#常用代码片段\" class=\"headerlink\" title=\"常用代码片段\"></a>常用代码片段</h1><h3 id=\"a标签创建连接点击跳转\"><a href=\"#a标签创建连接点击跳转\" class=\"headerlink\" title=\"a标签创建连接点击跳转\"></a>a标签创建连接点击跳转</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el);</span><br><span class=\"line\">el.href = <span class=\"string\">'http://www.baidu.com'</span>; <span class=\"comment\">//url 是你得到的连接</span></span><br><span class=\"line\"><span class=\"comment\">//el.target = '_new'; //指定在新窗口打开</span></span><br><span class=\"line\">el.click();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.removeChild(el);</span><br><span class=\"line\"><span class=\"keyword\">return</span> ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"transform垂直左右居中\"><a href=\"#transform垂直左右居中\" class=\"headerlink\" title=\"transform垂直左右居中\"></a>transform垂直左右居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width: 80%;</span><br><span class=\"line\">padding: 10px;</span><br><span class=\"line\">border: 1px solid #E94637;</span><br><span class=\"line\">position: fixed;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">z-index: 13;</span><br><span class=\"line\">left: 50%;</span><br><span class=\"line\">top: 50%;</span><br><span class=\"line\">transform: translate(-50%, -50%);</span><br><span class=\"line\">-webkit-transform: translate(-50%, -50%);</span><br></pre></td></tr></table></figure>\n<h3 id=\"js异步上传-from表单\"><a href=\"#js异步上传-from表单\" class=\"headerlink\" title=\"js异步上传 from表单\"></a>js异步上传 from表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异步上传</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> FormData($(<span class=\"string\">'#uploadForm'</span>)[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件节流\"><a href=\"#事件节流\" class=\"headerlink\" title=\"事件节流\"></a>事件节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 事件节流 或者 防止滚动卡顿 17毫秒左右每帧</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; fn</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; interval</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, interval</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> doing = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(doing) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdoing = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\tdoing = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;, interval);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"vue初始化模板\"><a href=\"#vue初始化模板\" class=\"headerlink\" title=\"vue初始化模板\"></a>vue初始化模板</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">\"#main\"</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//计算属性</span></span><br><span class=\"line\">\tcomputed: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">\tmethods: &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//监听</span></span><br><span class=\"line\">\twatch: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//\t生命周期钩子的一些使用方法：</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//\tbeforecreate : 可以在这加个loading事件，在加载实例时触发</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcreated : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tmounted : 挂载元素，获取到DOM节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tupdated : 如果对数据统一处理，在这里写上相应函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tbeforeDestroy : 可以做一个确认停止事件的确认框</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tnextTick : 更新数据后立即操作dom</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//vue实例创建之前</span></span><br><span class=\"line\">\tbeforecreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//vue实例创建之后</span></span><br><span class=\"line\">\tcreated: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1465454841000,
				"created_by": 2,
				"updated_at": 1520839829000,
				"updated_by": 2,
				"published_at": 1465454841000,
				"published_by": 2
			},
			{
				"id": "cjf28iald0000cu7tpbjl5dic",
				"title": "前端命名与写法规范",
				"slug": "FE-standardization",
				"markdown": "\n\n## 外部命名规范\n\n\n\n### html 、js 、css文件名称命名规范\n\n```\nmy_script.js\nmy_camel_case_name.css\nmy_index.html\n```\n\n\n### 路径规范 不写http、https\n\n* js \n\n```\n<script src=\"//cdn.com/test.min.js\"></script>\n```\n\n* css\n\n```\n.example {\n  background: url(//static.example.com/images/bg.jpg);\n}\n```\n\n> html,js,css文档上部分 增加作者注释，开发时间，功能，最后一次修改时间（多次）\n\n\n\n##html命名规范\n\n### 文档格式\n\n* css 文件放在 `head`标签中，js放到 `body`尾部 \n* 使用 `utf-8` 文字编码\n* html 标签一律使用`小写`\n* 属性使用双引号\n\n\n```\n<!--\n\t作者：xuess\n\t时间：2017-06-22\n\t描述：测试页面\n-->\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title></title>\n\t\t<meta http-equiv=\"Access-Control-Allow-Origin\" content=\"*\">\n\t\t<!--rem先关首先加载-->\n\t\t<script src=\"https://g.alicdn.com/mtb/??lib-flexible/0.3.2/flexible_css.js,lib-flexible/0.3.2/flexible.js\"></script>\n\t\t<!--css在head-->\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"xxx.css\" />\n\t</head>\n\n\t<body>\n\t\t<div>\n\t\t\t<div></div>\n\t\t</div>\n\t\t<!--js在文档尾部-->\n\t\t<script src=\"xxx.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\t</body>\n\n</html>\n```\n\n### 推荐使用语义化标签\n\n\n```\n<header>\n\t<h1>My page title</h1>\n</header>\n\n<nav class=\"top-navigation\">\n\t<ul>\n\t\t<li class=\"nav-item\">\n\t\t\t<a href=\"#home\">Home</a>\n\t\t</li>\n\t\t<li class=\"nav-item\">\n\t\t\t<a href=\"#news\">News</a>\n\t\t</li>\n\t\t<li class=\"nav-item\">\n\t\t\t<a href=\"#about\">About</a>\n\t\t</li>\n\t</ul>\n</nav>\n<section class=\"page-section news\">\n\t<header>\n\t\t<h2 class=\"title\">All news articles</h2>\n\t</header>\n\n\t<article class=\"news-article\">\n\t\t<header>\n\t\t\t<div class=\"article-title\">Good article</div>\n\t\t\t<small class=\"intro\">Introduction sub-title</small>\n\t\t</header>\n\n\t\t<div class=\"content\">\n\t\t\t<p>This is a good example for HTML semantics</p>\n\t\t</div>\n\t\t<aside class=\"article-side-notes\">\n\t\t\t<p>I think I'm more on the side and should not receive the main credits</p>\n\t\t</aside>\n\t\t<footer class=\"article-foot-notes\">\n\t\t\t<p>This article was created by David <time datetime=\"2018-01-01 00:00\" class=\"time\">1 month ago</time></p>\n\t\t</footer>\n\t</article>\n\n\t<footer class=\"section-footer\">\n\t\t<p>Related sections: Events, Public holidays</p>\n\t</footer>\n</section>\n\n<footer class=\"page-footer\">\n\tCopyright 2017\n</footer>\n```\n\n\n### 结构、表现、行为三者分离\n\n```\n1. 不要写行内样式\n2. 不使用表象元素（`b`, `u`, `center`, `font`, `i`）\n3. 不要在html 中写js代码\n4. 元素自定义属性 使用`data-`开头\n```\n\n\n## js命名规范\n\n### 变量声明\n\n```\n1. 推荐使用es6语法规范，局部作用域变量用let，常量用const\n2. 常量使用全大写命名（const FAIL_STATE = 101）\n3. 普通变量名称用小写字母开头，驼峰式（let userInfo = {}）\n4. 对象命名以大写字母开头，大驼峰式（function User(){//...}）\n5. 声明字符串建议使用单引号（let msg = 'This is some HTML <div class=\"makes-sense\"></div>';）\n\n```\n\n\n#### 变量赋值时的逻辑操作\n\n```\n//不推荐\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n\n//推荐\nlet x = x || y || 1;\n\n```\n\n\n\n\n##css 命名规范\n\n### css权重\n\n```\n第一等：代表内联样式，如: style=””，权值为1000\n\n第二等：代表ID选择器，如：#content，权值为100\n\n第三等：代表类，伪类和属性选择器，如：.content，权值为10\n\n第四等：代表类型选择器和伪元素选择器，如：div p，权值为1\n\n```\n\n### 基本原则\n\n```\n1. 选择器应该避免使用ID，一般情况ID不应该用于样式\n2. 选择器中避免直接写标签名，没有语义，而且很容被重叠\n3. 选择器应该尽可能的精确，推荐使用 大于号`>`\n4. 尽量使用简写，如：padding: 10px 35px;\n5. 0px、0rem，不用写单位\n6. 颜色尽量使用简写，如：用 #fff 代替 #ffffff;\n7. 书写代码前, 考虑并提高样式重复使用率，可以定义一些常用的简写样式\n8. 选择器要尽可能短，并且尽量限制组成选择器的个数，建议不要超过3层\n9. 多写有效注释，小伙伴看了会比较明了\n10. 为避免重叠，单独模块，可以使用命名空间\n```\n\n\n### 命名规范\n\n```\n1. class名称使用`-`中划线链接（短横线命名），不推荐使用大小写的驼峰式。\n2. 需要绑定事件的class名称，应该单独写。不要与样式class公用。事件与样式区分开。推荐`J_xxx`开头\n3. 语义明确的情况下，class名称尽量言简意赅\n```\n\n### 声明顺序\n\n```\n1. 结构性属性：\ndisplay\nposition, left, top, right etc.\noverflow, float, clear etc.\nmargin, padding\n2. 表现性属性：\nbackground, border etc.\nfont, text\n```\n\n> 转载请注明出处\n>\n> 作者：xuess<wuniu2010@126.com>\n> \n> 时间：2017年06月16日\n> \n> 最后修改时间：2017年06月16日\n\n",
				"html": "<h2 id=\"外部命名规范\"><a href=\"#外部命名规范\" class=\"headerlink\" title=\"外部命名规范\"></a>外部命名规范</h2><h3 id=\"html-、js-、css文件名称命名规范\"><a href=\"#html-、js-、css文件名称命名规范\" class=\"headerlink\" title=\"html 、js 、css文件名称命名规范\"></a>html 、js 、css文件名称命名规范</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_script.js</span><br><span class=\"line\">my_camel_case_name.css</span><br><span class=\"line\">my_index.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"路径规范-不写http、https\"><a href=\"#路径规范-不写http、https\" class=\"headerlink\" title=\"路径规范 不写http、https\"></a>路径规范 不写http、https</h3><ul>\n<li>js </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//cdn.com/test.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>css</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.example &#123;</span><br><span class=\"line\">  background: url(//static.example.com/images/bg.jpg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>html,js,css文档上部分 增加作者注释，开发时间，功能，最后一次修改时间（多次）</p>\n</blockquote>\n<p>##html命名规范</p>\n<h3 id=\"文档格式\"><a href=\"#文档格式\" class=\"headerlink\" title=\"文档格式\"></a>文档格式</h3><ul>\n<li>css 文件放在 <code>head</code>标签中，js放到 <code>body</code>尾部 </li>\n<li>使用 <code>utf-8</code> 文字编码</li>\n<li>html 标签一律使用<code>小写</code></li>\n<li>属性使用双引号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t作者：xuess</span><br><span class=\"line\">\t时间：2017-06-22</span><br><span class=\"line\">\t描述：测试页面</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;meta http-equiv=&quot;Access-Control-Allow-Origin&quot; content=&quot;*&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!--rem先关首先加载--&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://g.alicdn.com/mtb/??lib-flexible/0.3.2/flexible_css.js,lib-flexible/0.3.2/flexible.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t\t&lt;!--css在head--&gt;</span><br><span class=\"line\">\t\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;xxx.css&quot; /&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;!--js在文档尾部--&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;xxx.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"推荐使用语义化标签\"><a href=\"#推荐使用语义化标签\" class=\"headerlink\" title=\"推荐使用语义化标签\"></a>推荐使用语义化标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header&gt;</span><br><span class=\"line\">\t&lt;h1&gt;My page title&lt;/h1&gt;</span><br><span class=\"line\">&lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;nav class=&quot;top-navigation&quot;&gt;</span><br><span class=\"line\">\t&lt;ul&gt;</span><br><span class=\"line\">\t\t&lt;li class=&quot;nav-item&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;</span><br><span class=\"line\">\t\t&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li class=&quot;nav-item&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;a href=&quot;#news&quot;&gt;News&lt;/a&gt;</span><br><span class=\"line\">\t\t&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li class=&quot;nav-item&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;</span><br><span class=\"line\">\t\t&lt;/li&gt;</span><br><span class=\"line\">\t&lt;/ul&gt;</span><br><span class=\"line\">&lt;/nav&gt;</span><br><span class=\"line\">&lt;section class=&quot;page-section news&quot;&gt;</span><br><span class=\"line\">\t&lt;header&gt;</span><br><span class=\"line\">\t\t&lt;h2 class=&quot;title&quot;&gt;All news articles&lt;/h2&gt;</span><br><span class=\"line\">\t&lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;article class=&quot;news-article&quot;&gt;</span><br><span class=\"line\">\t\t&lt;header&gt;</span><br><span class=\"line\">\t\t\t&lt;div class=&quot;article-title&quot;&gt;Good article&lt;/div&gt;</span><br><span class=\"line\">\t\t\t&lt;small class=&quot;intro&quot;&gt;Introduction sub-title&lt;/small&gt;</span><br><span class=\"line\">\t\t&lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;This is a good example for HTML semantics&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;aside class=&quot;article-side-notes&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;I think I&apos;m more on the side and should not receive the main credits&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/aside&gt;</span><br><span class=\"line\">\t\t&lt;footer class=&quot;article-foot-notes&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;This article was created by David &lt;time datetime=&quot;2018-01-01 00:00&quot; class=&quot;time&quot;&gt;1 month ago&lt;/time&gt;&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/footer&gt;</span><br><span class=\"line\">\t&lt;/article&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;footer class=&quot;section-footer&quot;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;Related sections: Events, Public holidays&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/footer&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;footer class=&quot;page-footer&quot;&gt;</span><br><span class=\"line\">\tCopyright 2017</span><br><span class=\"line\">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构、表现、行为三者分离\"><a href=\"#结构、表现、行为三者分离\" class=\"headerlink\" title=\"结构、表现、行为三者分离\"></a>结构、表现、行为三者分离</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 不要写行内样式</span><br><span class=\"line\">2. 不使用表象元素（`b`, `u`, `center`, `font`, `i`）</span><br><span class=\"line\">3. 不要在html 中写js代码</span><br><span class=\"line\">4. 元素自定义属性 使用`data-`开头</span><br></pre></td></tr></table></figure>\n<h2 id=\"js命名规范\"><a href=\"#js命名规范\" class=\"headerlink\" title=\"js命名规范\"></a>js命名规范</h2><h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 推荐使用es6语法规范，局部作用域变量用let，常量用const</span><br><span class=\"line\">2. 常量使用全大写命名（const FAIL_STATE = 101）</span><br><span class=\"line\">3. 普通变量名称用小写字母开头，驼峰式（let userInfo = &#123;&#125;）</span><br><span class=\"line\">4. 对象命名以大写字母开头，大驼峰式（function User()&#123;//...&#125;）</span><br><span class=\"line\">5. 声明字符串建议使用单引号（let msg = &apos;This is some HTML &lt;div class=&quot;makes-sense&quot;&gt;&lt;/div&gt;&apos;;）</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量赋值时的逻辑操作\"><a href=\"#变量赋值时的逻辑操作\" class=\"headerlink\" title=\"变量赋值时的逻辑操作\"></a>变量赋值时的逻辑操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不推荐</span><br><span class=\"line\">if(!x) &#123;</span><br><span class=\"line\">  if(!y) &#123;</span><br><span class=\"line\">    x = 1;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//推荐</span><br><span class=\"line\">let x = x || y || 1;</span><br></pre></td></tr></table></figure>\n<p>##css 命名规范</p>\n<h3 id=\"css权重\"><a href=\"#css权重\" class=\"headerlink\" title=\"css权重\"></a>css权重</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一等：代表内联样式，如: style=””，权值为1000</span><br><span class=\"line\"></span><br><span class=\"line\">第二等：代表ID选择器，如：#content，权值为100</span><br><span class=\"line\"></span><br><span class=\"line\">第三等：代表类，伪类和属性选择器，如：.content，权值为10</span><br><span class=\"line\"></span><br><span class=\"line\">第四等：代表类型选择器和伪元素选择器，如：div p，权值为1</span><br></pre></td></tr></table></figure>\n<h3 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 选择器应该避免使用ID，一般情况ID不应该用于样式</span><br><span class=\"line\">2. 选择器中避免直接写标签名，没有语义，而且很容被重叠</span><br><span class=\"line\">3. 选择器应该尽可能的精确，推荐使用 大于号`&gt;`</span><br><span class=\"line\">4. 尽量使用简写，如：padding: 10px 35px;</span><br><span class=\"line\">5. 0px、0rem，不用写单位</span><br><span class=\"line\">6. 颜色尽量使用简写，如：用 #fff 代替 #ffffff;</span><br><span class=\"line\">7. 书写代码前, 考虑并提高样式重复使用率，可以定义一些常用的简写样式</span><br><span class=\"line\">8. 选择器要尽可能短，并且尽量限制组成选择器的个数，建议不要超过3层</span><br><span class=\"line\">9. 多写有效注释，小伙伴看了会比较明了</span><br><span class=\"line\">10. 为避免重叠，单独模块，可以使用命名空间</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. class名称使用`-`中划线链接（短横线命名），不推荐使用大小写的驼峰式。</span><br><span class=\"line\">2. 需要绑定事件的class名称，应该单独写。不要与样式class公用。事件与样式区分开。推荐`J_xxx`开头</span><br><span class=\"line\">3. 语义明确的情况下，class名称尽量言简意赅</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明顺序\"><a href=\"#声明顺序\" class=\"headerlink\" title=\"声明顺序\"></a>声明顺序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 结构性属性：</span><br><span class=\"line\">display</span><br><span class=\"line\">position, left, top, right etc.</span><br><span class=\"line\">overflow, float, clear etc.</span><br><span class=\"line\">margin, padding</span><br><span class=\"line\">2. 表现性属性：</span><br><span class=\"line\">background, border etc.</span><br><span class=\"line\">font, text</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载请注明出处</p>\n<p>作者：xuess<a href=\"mailto:&#119;&#x75;&#x6e;&#x69;&#x75;&#x32;&#48;&#x31;&#48;&#x40;&#49;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#119;&#x75;&#x6e;&#x69;&#x75;&#x32;&#48;&#x31;&#48;&#x40;&#49;&#50;&#x36;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p>时间：2017年06月16日</p>\n<p>最后修改时间：2017年06月16日</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1465022899000,
				"created_by": 2,
				"updated_at": 1520839970000,
				"updated_by": 2,
				"published_at": 1465022899000,
				"published_by": 2
			},
			{
				"id": "cjf28ialu0006cu7t7nm0j82s",
				"title": "css3animation动画",
				"slug": "css3-animation",
				"markdown": "\n\n##CSS3 transition\n\ndemo\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>css3 transition</title>\n\t</head>\n\t<body>\n\t\t<style type=\"text/css\">\n\t\t\tspan {\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 30px;\n\t\t\t\tleft: 50px;\n\t\t\t\twidth: 200px;\n\t\t\t\theight: 200px;\n\t\t\t\tbackground: gold;\n\t\t\t\tcolor: #000000;\n\t\t\t\tfont-size: 12px;\n\t\t\t\ttransition: width 10s,background-color 10s, height 10s, left 10s, top 10s, font-size 10s, line-height 10s;\n\t\t\t\t-webkit-transition: width 10s,background-color 10s, height 10s, left 10s, top 10s, font-size 10s, line-height 10s;\n\t\t\t}\n\t\t\tspan:hover {\n\t\t\t\ttop: 300px;\n\t\t\t\tleft: 500px;\n\t\t\t\twidth: 100px;\n\t\t\t\theight: 100px;\n\t\t\t\tfont-size: 35px;\n\t\t\t\tbackground: green;\n\t\t\t}\n\t\t</style>\n\t\t<span>aaa</span>\n\t</body>\n\n</html>\n\n```\n\n说明：\n\ntransition 属性是一个简写属性，用于设置四个过渡属性：\n\n* transition-property\n* transition-duration\n* transition-timing-function\n* transition-delay\n\n值| 描述\n---|----\n默认值：| all 0 ease 0 | \nJavaScript 语法：| `object.style.transition=\"width 2s\"`\n\n语法\n\n```\ntransition: property duration timing-function delay;\n```\n\n\n\n值| 描述\n---|----\ntransition-property |\t规定设置过渡效果的 CSS 属性的名称。 如：`transition-property:width;`\ntransition-duration\t| 规定完成过渡效果需要多少秒或毫秒。如：`transition-duration: 5s;`\ntransition-timing-function\t | 规定速度效果的速度曲线。如：`transition-timing-function: linear;`\ntransition-delay\t| 定义过渡效果何时开始。如： `transition-delay: 2s;` 在过渡效果开始前等待 2 秒：\n\n\n\n\n### transition-timing-function 速度曲线属性说明\n\n\n####  定义和用法\ntransition-timing-function 属性规定过渡效果的速度曲线。\n\n该属性允许过渡效果随着时间来改变其速度。\n\n值| 描述\n---|----\n默认值：| ease | \nJavaScript 语法：| `object.style.transitionTimingFunction=\"linear\"`\n\n\n\n语法\n\n```\ntransition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-\nbezier(n,n,n,n);\n```\n\n\n值\t| 描述\n---| ----\nlinear\t|规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。\nease\t|规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。\nease-in\t|规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。\nease-out\t|规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。\nease-in-out\t|规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。\ncubic-bezier(n,n,n,n)\t|在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。\n\n>提示：请在实例中测试不同的值，这样可以更好地理解它们的工作原理。\n\n\ndemo\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<style> \ndiv\n{\nwidth:100px;\nheight:50px;\nbackground:red;\ncolor:white;\nfont-weight:bold;\ntransition:width 2s;\n-moz-transition:width 2s; /* Firefox 4 */\n-webkit-transition:width 2s; /* Safari and Chrome */\n-o-transition:width 2s; /* Opera */\n}\n\n#div1 {transition-timing-function: linear;}\n#div2 {transition-timing-function: ease;}\n#div3 {transition-timing-function: ease-in;}\n#div4 {transition-timing-function: ease-out;}\n#div5 {transition-timing-function: ease-in-out;}\n\n/* Firefox 4: */\n#div1 {-moz-transition-timing-function: linear;}\n#div2 {-moz-transition-timing-function: ease;}\n#div3 {-moz-transition-timing-function: ease-in;}\n#div4 {-moz-transition-timing-function: ease-out;}\n#div5 {-moz-transition-timing-function: ease-in-out;}\n\n/* Safari and Chrome: */\n#div1 {-webkit-transition-timing-function: linear;}\n#div2 {-webkit-transition-timing-function: ease;}\n#div3 {-webkit-transition-timing-function: ease-in;}\n#div4 {-webkit-transition-timing-function: ease-out;}\n#div5 {-webkit-transition-timing-function: ease-in-out;}\n\n/* Opera: */\n#div1 {-o-transition-timing-function: linear;}\n#div2 {-o-transition-timing-function: ease;}\n#div3 {-o-transition-timing-function: ease-in;}\n#div4 {-o-transition-timing-function: ease-out;}\n#div5 {-o-transition-timing-function: ease-in-out;}\n\ndiv:hover\n{\nwidth:300px;\n}\n</style>\n</head>\n<body>\n\n<div id=\"div1\" style=\"top:100px\">linear</div>\n<div id=\"div2\" style=\"top:150px\">ease</div>\n<div id=\"div3\" style=\"top:200px\">ease-in</div>\n<div id=\"div4\" style=\"top:250px\">ease-out</div>\n<div id=\"div5\" style=\"top:300px\">ease-in-out</div>\n\n<p>请把鼠标指针移动到红色的 div 元素上，就可以看到过渡效果。</p>\n\n<p><b>注释：</b>本例在 Internet Explorer 中无效。</p>\n\n</body>\n</html>\n\n```\n\ndemo2\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<style> \ndiv\n{\nwidth:100px;\nheight:50px;\nbackground:red;\ncolor:white;\nfont-weight:bold;\ntransition:width 2s;\n-moz-transition:width 2s; /* Firefox 4 */\n-webkit-transition:width 2s; /* Safari and Chrome */\n-o-transition:width 2s; /* Opera */\n}\n\n#div1 {transition-timing-function: cubic-bezier(0,0,0.25,1);}\n#div2 {transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);}\n#div3 {transition-timing-function: cubic-bezier(0.42,0,1,1);}\n#div4 {transition-timing-function: cubic-bezier(0,0,0.58,1);}\n#div5 {transition-timing-function: cubic-bezier(0.42,0,0.58,1);}\n\n/* Firefox 4: */\n#div1 {-moz-transition-timing-function: cubic-bezier(0,0,0.25,1);}\n#div2 {-moz-transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);}\n#div3 {-moz-transition-timing-function: cubic-bezier(0.42,0,1,1);}\n#div4 {-moz-transition-timing-function: cubic-bezier(0,0,0.58,1);}\n#div5 {-moz-transition-timing-function: cubic-bezier(0.42,0,0.58,1);}\n\n/* Safari and Chrome: */\n#div1 {-webkit-transition-timing-function: cubic-bezier(0,0,0.25,1);}\n#div2 {-webkit-transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);}\n#div3 {-webkit-transition-timing-function: cubic-bezier(0.42,0,1,1);}\n#div4 {-webkit-transition-timing-function: cubic-bezier(0,0,0.58,1);}\n#div5 {-webkit-transition-timing-function: cubic-bezier(0.42,0,0.58,1);}\n\n/* Opera: */\n#div1 {-o-transition-timing-function: cubic-bezier(0,0,0.25,1);}\n#div2 {-o-transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);}\n#div3 {-o-transition-timing-function: cubic-bezier(0.42,0,1,1);}\n#div4 {-o-transition-timing-function: cubic-bezier(0,0,0.58,1);}\n#div5 {-o-transition-timing-function: cubic-bezier(0.42,0,0.58,1);}\n\ndiv:hover\n{\nwidth:300px;\n}\n</style>\n</head>\n<body>\n\n<div id=\"div1\" style=\"top:100px\">linear</div>\n<div id=\"div2\" style=\"top:150px\">ease</div>\n<div id=\"div3\" style=\"top:200px\">ease-in</div>\n<div id=\"div4\" style=\"top:250px\">ease-out</div>\n<div id=\"div5\" style=\"top:300px\">ease-in-out</div>\n\n<p>请把鼠标指针移动到红色的 div 元素上，就可以看到过渡效果。</p>\n\n<p><b>注释：</b>本例在 Internet Explorer 中无效。</p>\n\n</body>\n</html>\n\n```\n\n\n### 多个属性写法\n\n```\n a {\n    -moz-transition: background 0.5s ease-in,color 0.3s ease-out;\n    -webkit-transition: background 0.5s ease-in,color 0.3s ease-out;\n    -o-transition: background 0.5s ease-in,color 0.3s ease-out;\n    transition: background 0.5s ease-in,color 0.3s ease-out;\n  }\n\n\n原文: http://www.w3cplus.com/content/css3-transition\n```\n\n### 所有属性写法\n\n```\n  a {\n    -moz-transition: all 0.5s ease-in;\n    -webkit-transition: all 0.5s ease-in;\n    -o-transition: all 0.5s ease-in;\n    transition: all 0.5s ease-in;\n  }\n原文: http://www.w3cplus.com/content/css3-transition © w3cplus.com\n```\n\n\n\n\n> 要加前缀\n>\n\n\n\n\n\n\n# animation @keyframes\n\n### CSS3 `@keyframes` 规则\n\n如需在 `CSS3` 中创建动画，您需要学习 `@keyframes` 规则。\n\n`@keyframes` 规则用于创建动画。在 `@keyframes` 中规定某项 `CSS` 样式，就能创建由当前样式逐渐改为新样式的动画效果。\n\n\n>目前浏览器都不支持 `@keyframes` 规则。\n>\n>Firefox 支持替代的 `@-moz-keyframes` 规则。\n>\n>Opera 支持替代的 `@-o-keyframes` 规则。\n>\n>Safari 和 Chrome 支持替代的 `@-webkit-keyframes` 规则。\n\n\n### 定义和用法\n通过 `@keyframes` 规则，您能够创建动画。\n\n创建动画的原理是，将一套 `CSS` 样式逐渐变化为另一套样式。\n\n在动画过程中，您能够多次改变这套 `CSS` 样式。\n\n以百分比来规定改变发生的时间，或者通过关键词 `from` 和 `to`，等价于 `0%` 和 `100%`。\n\n`0%` 是动画的开始时间，`100%` 动画的结束时间。\n\n为了获得最佳的浏览器支持，您应该始终定义 `0%` 和 `100%` 选择器。\n\n>注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。\n\n\n### 语法\n\n```\n@keyframes animationname {keyframes-selector {css-styles;}}\n```\n\n值 | 描述\n---|----\nanimationname | 必需。定义动画的名称。\nkeyframes-selector | 必需。动画时长的百分比。 <br> 合法的值：<br>  0-100% <br> from（与 0% 相同） <br> to（与 100% 相同）\ncss-styles | 必需。一个或多个合法的 CSS 样式属性。\n\n\n\n\n当您在 `@keyframes` 中创建动画时，请把它捆绑到某个选择器，否则不会产生动画效果。\n\n通过规定至少以下两项 `CSS3` 动画属性，即可将动画绑定到选择器：\n\n* 规定动画的名称\n\n* 规定动画的时长\n\n\n### animation \n\n>Internet Explorer 10、Firefox 以及 Opera 支持 animation 属性。\n>\n>Safari 和 Chrome 支持替代的 -webkit-animation 属性。\n>\n>注释：Internet Explorer 9 以及更早的版本不支持 animation 属性。\n>\n\n\n实例\n\n```\ndiv{\n\tanimation:mymove 5s infinite;\n\t-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n```\n\n\n定义和用法\n\nanimation 属性是一个简写属性，用于设置六个动画属性：\n\n* animation-name\n* animation-duration\n* animation-timing-function\n* animation-delay\n* animation-iteration-count\n* animation-direction\n\n> 注释：请始终规定 `animation-duration` 属性，否则时长为 `0`，就不会播放动画了。\n\n\n值| 内容\n----|-----\n默认值： |\tnone 0 ease 0 1 normal\n继承性： |\tno\n版本：|\tCSS3\nJavaScript |语法：\tobject.style.animation=\"mymove 5s infinite\"\n\n\n\n语法：\n\n```\nanimation: name duration timing-function delay iteration-count direction;\n```\n\n值| 内容\n----|-----\nanimation-name\t| 规定需要绑定到选择器的 keyframe 名称。。\nanimation-duration\t| 规定完成动画所花费的时间，以秒或毫秒计。\nanimation-timing-function| \t规定动画的速度曲线。\nanimation-delay\t| 规定在动画开始之前的延迟。\nanimation-iteration-count\t| 规定动画应该播放的次数。\nanimation-direction\t| 规定是否应该轮流反向播放动画。\n\n\n\n\ndemo\n\n```\n<!--\n\tauthor：xuess\n\temail：wuniu2010@126.com\n\tdate：2017-08-11\n-->\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>小球运动</title>\n\t</head>\n\n\t<body>\n\n\t\t<style type=\"text/css\">\n\t\t\t#ball {\n\t\t\t\tbackground: #F0A8BD;\n\t\t\t\theight: 100px;\n\t\t\t\twidth: 100px;\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 10px;\n\t\t\t\tleft: 20px;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tanimation: bounce 2s infinite;\n\t\t\t}\n\t\t\t\n\t\t\t#ball1 {\n\t\t\t\tbackground: #00008B;\n\t\t\t\theight: 100px;\n\t\t\t\twidth: 100px;\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 10px;\n\t\t\t\tleft: 200px;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tanimation: bounce1 2s infinite;\n\t\t\t}\n\t\t\t\n\t\t\t#ball2 {\n\t\t\t\tbackground: #008000;\n\t\t\t\theight: 100px;\n\t\t\t\twidth: 100px;\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 10px;\n\t\t\t\tleft: 400px;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tanimation: bounce2 2s infinite;\n\t\t\t}\n\t\t\t\n\t\t\t@-webkit-keyframes bounce2 {\n\t\t\t\t0 % {\n\t\t\t\t\ttransform: translate3d(0, 20px, 0);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttransform: translate3d(0, 300px, 0);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttransform: translate3d(0, 20px, 0);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t@keyframes bounce2 {\n\t\t\t\t0 % {\n\t\t\t\t\ttransform: translate3d(0, 20px, 0);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttransform: translate3d(0, 300px, 0);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttransform: translate3d(0, 20px, 0);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t@-webkit-keyframes bounce1 {\n\t\t\t\t0 % {\n\t\t\t\t\ttransform: translate(0, 20px);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttransform: translate(0, 300px);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttransform: translate(0, 20px);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t@keyframes bounce1 {\n\t\t\t\t0 % {\n\t\t\t\t\ttransform: translate(0, 20px);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttransform: translate(0, 300px);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttransform: translate(0, 20px);\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t@-webkit-keyframes bounce {\n\t\t\t\t0 % {\n\t\t\t\t\ttop: 20px;\n\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttop: 300px;\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttop: 20px;\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t@keyframes bounce {\n\t\t\t\t0 % {\n\t\t\t\t\ttop: 20px;\n\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttop: 300px;\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttop: 20px;\n\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\n\t\t<div id=\"ball\"></div>\n\t\t<div id=\"ball1\"></div>\n\t\t<div id=\"ball2\"></div>\n\t</body>\n\n</html>\n```\n\n\n\n> 转载请注明出处\n>\n> 作者：xuess<wuniu2010@126.com>\n> \n> 时间：2017年08月11日\n> \n> 最后修改时间：2017年08月11日",
				"html": "<p>##CSS3 transition</p>\n<p>demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;css3 transition&lt;/title&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t\tspan &#123;</span><br><span class=\"line\">\t\t\t\tposition: absolute;</span><br><span class=\"line\">\t\t\t\ttop: 30px;</span><br><span class=\"line\">\t\t\t\tleft: 50px;</span><br><span class=\"line\">\t\t\t\twidth: 200px;</span><br><span class=\"line\">\t\t\t\theight: 200px;</span><br><span class=\"line\">\t\t\t\tbackground: gold;</span><br><span class=\"line\">\t\t\t\tcolor: #000000;</span><br><span class=\"line\">\t\t\t\tfont-size: 12px;</span><br><span class=\"line\">\t\t\t\ttransition: width 10s,background-color 10s, height 10s, left 10s, top 10s, font-size 10s, line-height 10s;</span><br><span class=\"line\">\t\t\t\t-webkit-transition: width 10s,background-color 10s, height 10s, left 10s, top 10s, font-size 10s, line-height 10s;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tspan:hover &#123;</span><br><span class=\"line\">\t\t\t\ttop: 300px;</span><br><span class=\"line\">\t\t\t\tleft: 500px;</span><br><span class=\"line\">\t\t\t\twidth: 100px;</span><br><span class=\"line\">\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\tfont-size: 35px;</span><br><span class=\"line\">\t\t\t\tbackground: green;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;/style&gt;</span><br><span class=\"line\">\t\t&lt;span&gt;aaa&lt;/span&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p>transition 属性是一个简写属性，用于设置四个过渡属性：</p>\n<ul>\n<li>transition-property</li>\n<li>transition-duration</li>\n<li>transition-timing-function</li>\n<li>transition-delay</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认值：</td>\n<td>all 0 ease 0</td>\n<td></td>\n</tr>\n<tr>\n<td>JavaScript 语法：</td>\n<td><code>object.style.transition=&quot;width 2s&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition: property duration timing-function delay;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>transition-property</td>\n<td>规定设置过渡效果的 CSS 属性的名称。 如：<code>transition-property:width;</code></td>\n</tr>\n<tr>\n<td>transition-duration</td>\n<td>规定完成过渡效果需要多少秒或毫秒。如：<code>transition-duration: 5s;</code></td>\n</tr>\n<tr>\n<td>transition-timing-function</td>\n<td>规定速度效果的速度曲线。如：<code>transition-timing-function: linear;</code></td>\n</tr>\n<tr>\n<td>transition-delay</td>\n<td>定义过渡效果何时开始。如： <code>transition-delay: 2s;</code> 在过渡效果开始前等待 2 秒：</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"transition-timing-function-速度曲线属性说明\"><a href=\"#transition-timing-function-速度曲线属性说明\" class=\"headerlink\" title=\"transition-timing-function 速度曲线属性说明\"></a>transition-timing-function 速度曲线属性说明</h3><h4 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p>transition-timing-function 属性规定过渡效果的速度曲线。</p>\n<p>该属性允许过渡效果随着时间来改变其速度。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认值：</td>\n<td>ease</td>\n<td></td>\n</tr>\n<tr>\n<td>JavaScript 语法：</td>\n<td><code>object.style.transitionTimingFunction=&quot;linear&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-</span><br><span class=\"line\">bezier(n,n,n,n);</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>linear</td>\n<td>规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td>\n</tr>\n<tr>\n<td>ease</td>\n<td>规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td>\n</tr>\n<tr>\n<td>ease-in</td>\n<td>规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td>\n</tr>\n<tr>\n<td>ease-out</td>\n<td>规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td>\n</tr>\n<tr>\n<td>ease-in-out</td>\n<td>规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td>\n</tr>\n<tr>\n<td>cubic-bezier(n,n,n,n)</td>\n<td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示：请在实例中测试不同的值，这样可以更好地理解它们的工作原理。</p>\n</blockquote>\n<p>demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;style&gt; </span><br><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">width:100px;</span><br><span class=\"line\">height:50px;</span><br><span class=\"line\">background:red;</span><br><span class=\"line\">color:white;</span><br><span class=\"line\">font-weight:bold;</span><br><span class=\"line\">transition:width 2s;</span><br><span class=\"line\">-moz-transition:width 2s; /* Firefox 4 */</span><br><span class=\"line\">-webkit-transition:width 2s; /* Safari and Chrome */</span><br><span class=\"line\">-o-transition:width 2s; /* Opera */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#div1 &#123;transition-timing-function: linear;&#125;</span><br><span class=\"line\">#div2 &#123;transition-timing-function: ease;&#125;</span><br><span class=\"line\">#div3 &#123;transition-timing-function: ease-in;&#125;</span><br><span class=\"line\">#div4 &#123;transition-timing-function: ease-out;&#125;</span><br><span class=\"line\">#div5 &#123;transition-timing-function: ease-in-out;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Firefox 4: */</span><br><span class=\"line\">#div1 &#123;-moz-transition-timing-function: linear;&#125;</span><br><span class=\"line\">#div2 &#123;-moz-transition-timing-function: ease;&#125;</span><br><span class=\"line\">#div3 &#123;-moz-transition-timing-function: ease-in;&#125;</span><br><span class=\"line\">#div4 &#123;-moz-transition-timing-function: ease-out;&#125;</span><br><span class=\"line\">#div5 &#123;-moz-transition-timing-function: ease-in-out;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Safari and Chrome: */</span><br><span class=\"line\">#div1 &#123;-webkit-transition-timing-function: linear;&#125;</span><br><span class=\"line\">#div2 &#123;-webkit-transition-timing-function: ease;&#125;</span><br><span class=\"line\">#div3 &#123;-webkit-transition-timing-function: ease-in;&#125;</span><br><span class=\"line\">#div4 &#123;-webkit-transition-timing-function: ease-out;&#125;</span><br><span class=\"line\">#div5 &#123;-webkit-transition-timing-function: ease-in-out;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Opera: */</span><br><span class=\"line\">#div1 &#123;-o-transition-timing-function: linear;&#125;</span><br><span class=\"line\">#div2 &#123;-o-transition-timing-function: ease;&#125;</span><br><span class=\"line\">#div3 &#123;-o-transition-timing-function: ease-in;&#125;</span><br><span class=\"line\">#div4 &#123;-o-transition-timing-function: ease-out;&#125;</span><br><span class=\"line\">#div5 &#123;-o-transition-timing-function: ease-in-out;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div:hover</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">width:300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;div1&quot; style=&quot;top:100px&quot;&gt;linear&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div2&quot; style=&quot;top:150px&quot;&gt;ease&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div3&quot; style=&quot;top:200px&quot;&gt;ease-in&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div4&quot; style=&quot;top:250px&quot;&gt;ease-out&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div5&quot; style=&quot;top:300px&quot;&gt;ease-in-out&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;请把鼠标指针移动到红色的 div 元素上，就可以看到过渡效果。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;b&gt;注释：&lt;/b&gt;本例在 Internet Explorer 中无效。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>demo2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;style&gt; </span><br><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">width:100px;</span><br><span class=\"line\">height:50px;</span><br><span class=\"line\">background:red;</span><br><span class=\"line\">color:white;</span><br><span class=\"line\">font-weight:bold;</span><br><span class=\"line\">transition:width 2s;</span><br><span class=\"line\">-moz-transition:width 2s; /* Firefox 4 */</span><br><span class=\"line\">-webkit-transition:width 2s; /* Safari and Chrome */</span><br><span class=\"line\">-o-transition:width 2s; /* Opera */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#div1 &#123;transition-timing-function: cubic-bezier(0,0,0.25,1);&#125;</span><br><span class=\"line\">#div2 &#123;transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);&#125;</span><br><span class=\"line\">#div3 &#123;transition-timing-function: cubic-bezier(0.42,0,1,1);&#125;</span><br><span class=\"line\">#div4 &#123;transition-timing-function: cubic-bezier(0,0,0.58,1);&#125;</span><br><span class=\"line\">#div5 &#123;transition-timing-function: cubic-bezier(0.42,0,0.58,1);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Firefox 4: */</span><br><span class=\"line\">#div1 &#123;-moz-transition-timing-function: cubic-bezier(0,0,0.25,1);&#125;</span><br><span class=\"line\">#div2 &#123;-moz-transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);&#125;</span><br><span class=\"line\">#div3 &#123;-moz-transition-timing-function: cubic-bezier(0.42,0,1,1);&#125;</span><br><span class=\"line\">#div4 &#123;-moz-transition-timing-function: cubic-bezier(0,0,0.58,1);&#125;</span><br><span class=\"line\">#div5 &#123;-moz-transition-timing-function: cubic-bezier(0.42,0,0.58,1);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Safari and Chrome: */</span><br><span class=\"line\">#div1 &#123;-webkit-transition-timing-function: cubic-bezier(0,0,0.25,1);&#125;</span><br><span class=\"line\">#div2 &#123;-webkit-transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);&#125;</span><br><span class=\"line\">#div3 &#123;-webkit-transition-timing-function: cubic-bezier(0.42,0,1,1);&#125;</span><br><span class=\"line\">#div4 &#123;-webkit-transition-timing-function: cubic-bezier(0,0,0.58,1);&#125;</span><br><span class=\"line\">#div5 &#123;-webkit-transition-timing-function: cubic-bezier(0.42,0,0.58,1);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Opera: */</span><br><span class=\"line\">#div1 &#123;-o-transition-timing-function: cubic-bezier(0,0,0.25,1);&#125;</span><br><span class=\"line\">#div2 &#123;-o-transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);&#125;</span><br><span class=\"line\">#div3 &#123;-o-transition-timing-function: cubic-bezier(0.42,0,1,1);&#125;</span><br><span class=\"line\">#div4 &#123;-o-transition-timing-function: cubic-bezier(0,0,0.58,1);&#125;</span><br><span class=\"line\">#div5 &#123;-o-transition-timing-function: cubic-bezier(0.42,0,0.58,1);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div:hover</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">width:300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;div1&quot; style=&quot;top:100px&quot;&gt;linear&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div2&quot; style=&quot;top:150px&quot;&gt;ease&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div3&quot; style=&quot;top:200px&quot;&gt;ease-in&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div4&quot; style=&quot;top:250px&quot;&gt;ease-out&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div5&quot; style=&quot;top:300px&quot;&gt;ease-in-out&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;请把鼠标指针移动到红色的 div 元素上，就可以看到过渡效果。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;b&gt;注释：&lt;/b&gt;本例在 Internet Explorer 中无效。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多个属性写法\"><a href=\"#多个属性写法\" class=\"headerlink\" title=\"多个属性写法\"></a>多个属性写法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> a &#123;</span><br><span class=\"line\">    -moz-transition: background 0.5s ease-in,color 0.3s ease-out;</span><br><span class=\"line\">    -webkit-transition: background 0.5s ease-in,color 0.3s ease-out;</span><br><span class=\"line\">    -o-transition: background 0.5s ease-in,color 0.3s ease-out;</span><br><span class=\"line\">    transition: background 0.5s ease-in,color 0.3s ease-out;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">原文: http://www.w3cplus.com/content/css3-transition</span><br></pre></td></tr></table></figure>\n<h3 id=\"所有属性写法\"><a href=\"#所有属性写法\" class=\"headerlink\" title=\"所有属性写法\"></a>所有属性写法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  a &#123;</span><br><span class=\"line\">    -moz-transition: all 0.5s ease-in;</span><br><span class=\"line\">    -webkit-transition: all 0.5s ease-in;</span><br><span class=\"line\">    -o-transition: all 0.5s ease-in;</span><br><span class=\"line\">    transition: all 0.5s ease-in;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">原文: http://www.w3cplus.com/content/css3-transition © w3cplus.com</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>要加前缀</p>\n</blockquote>\n<h1 id=\"animation-keyframes\"><a href=\"#animation-keyframes\" class=\"headerlink\" title=\"animation @keyframes\"></a>animation @keyframes</h1><h3 id=\"CSS3-keyframes-规则\"><a href=\"#CSS3-keyframes-规则\" class=\"headerlink\" title=\"CSS3 @keyframes 规则\"></a>CSS3 <code>@keyframes</code> 规则</h3><p>如需在 <code>CSS3</code> 中创建动画，您需要学习 <code>@keyframes</code> 规则。</p>\n<p><code>@keyframes</code> 规则用于创建动画。在 <code>@keyframes</code> 中规定某项 <code>CSS</code> 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p>\n<blockquote>\n<p>目前浏览器都不支持 <code>@keyframes</code> 规则。</p>\n<p>Firefox 支持替代的 <code>@-moz-keyframes</code> 规则。</p>\n<p>Opera 支持替代的 <code>@-o-keyframes</code> 规则。</p>\n<p>Safari 和 Chrome 支持替代的 <code>@-webkit-keyframes</code> 规则。</p>\n</blockquote>\n<h3 id=\"定义和用法-1\"><a href=\"#定义和用法-1\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h3><p>通过 <code>@keyframes</code> 规则，您能够创建动画。</p>\n<p>创建动画的原理是，将一套 <code>CSS</code> 样式逐渐变化为另一套样式。</p>\n<p>在动画过程中，您能够多次改变这套 <code>CSS</code> 样式。</p>\n<p>以百分比来规定改变发生的时间，或者通过关键词 <code>from</code> 和 <code>to</code>，等价于 <code>0%</code> 和 <code>100%</code>。</p>\n<p><code>0%</code> 是动画的开始时间，<code>100%</code> 动画的结束时间。</p>\n<p>为了获得最佳的浏览器支持，您应该始终定义 <code>0%</code> 和 <code>100%</code> 选择器。</p>\n<blockquote>\n<p>注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>animationname</td>\n<td>必需。定义动画的名称。</td>\n</tr>\n<tr>\n<td>keyframes-selector</td>\n<td>必需。动画时长的百分比。 <br> 合法的值：<br>  0-100% <br> from（与 0% 相同） <br> to（与 100% 相同）</td>\n</tr>\n<tr>\n<td>css-styles</td>\n<td>必需。一个或多个合法的 CSS 样式属性。</td>\n</tr>\n</tbody>\n</table>\n<p>当您在 <code>@keyframes</code> 中创建动画时，请把它捆绑到某个选择器，否则不会产生动画效果。</p>\n<p>通过规定至少以下两项 <code>CSS3</code> 动画属性，即可将动画绑定到选择器：</p>\n<ul>\n<li><p>规定动画的名称</p>\n</li>\n<li><p>规定动画的时长</p>\n</li>\n</ul>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h3><blockquote>\n<p>Internet Explorer 10、Firefox 以及 Opera 支持 animation 属性。</p>\n<p>Safari 和 Chrome 支持替代的 -webkit-animation 属性。</p>\n<p>注释：Internet Explorer 9 以及更早的版本不支持 animation 属性。</p>\n</blockquote>\n<p>实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">\tanimation:mymove 5s infinite;</span><br><span class=\"line\">\t-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义和用法</p>\n<p>animation 属性是一个简写属性，用于设置六个动画属性：</p>\n<ul>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-direction</li>\n</ul>\n<blockquote>\n<p>注释：请始终规定 <code>animation-duration</code> 属性，否则时长为 <code>0</code>，就不会播放动画了。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认值：</td>\n<td>none 0 ease 0 1 normal</td>\n</tr>\n<tr>\n<td>继承性：</td>\n<td>no</td>\n</tr>\n<tr>\n<td>版本：</td>\n<td>CSS3</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>语法：    object.style.animation=”mymove 5s infinite”</td>\n</tr>\n</tbody>\n</table>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animation: name duration timing-function delay iteration-count direction;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>animation-name</td>\n<td>规定需要绑定到选择器的 keyframe 名称。。</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>规定完成动画所花费的时间，以秒或毫秒计。</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>规定动画的速度曲线。</td>\n</tr>\n<tr>\n<td>animation-delay</td>\n<td>规定在动画开始之前的延迟。</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>规定动画应该播放的次数。</td>\n</tr>\n<tr>\n<td>animation-direction</td>\n<td>规定是否应该轮流反向播放动画。</td>\n</tr>\n</tbody>\n</table>\n<p>demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">\tauthor：xuess</span><br><span class=\"line\">\temail：wuniu2010@126.com</span><br><span class=\"line\">\tdate：2017-08-11</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;小球运动&lt;/title&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t\t#ball &#123;</span><br><span class=\"line\">\t\t\t\tbackground: #F0A8BD;</span><br><span class=\"line\">\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\twidth: 100px;</span><br><span class=\"line\">\t\t\t\tposition: absolute;</span><br><span class=\"line\">\t\t\t\ttop: 10px;</span><br><span class=\"line\">\t\t\t\tleft: 20px;</span><br><span class=\"line\">\t\t\t\tborder-radius: 50%;</span><br><span class=\"line\">\t\t\t\tanimation: bounce 2s infinite;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t#ball1 &#123;</span><br><span class=\"line\">\t\t\t\tbackground: #00008B;</span><br><span class=\"line\">\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\twidth: 100px;</span><br><span class=\"line\">\t\t\t\tposition: absolute;</span><br><span class=\"line\">\t\t\t\ttop: 10px;</span><br><span class=\"line\">\t\t\t\tleft: 200px;</span><br><span class=\"line\">\t\t\t\tborder-radius: 50%;</span><br><span class=\"line\">\t\t\t\tanimation: bounce1 2s infinite;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t#ball2 &#123;</span><br><span class=\"line\">\t\t\t\tbackground: #008000;</span><br><span class=\"line\">\t\t\t\theight: 100px;</span><br><span class=\"line\">\t\t\t\twidth: 100px;</span><br><span class=\"line\">\t\t\t\tposition: absolute;</span><br><span class=\"line\">\t\t\t\ttop: 10px;</span><br><span class=\"line\">\t\t\t\tleft: 400px;</span><br><span class=\"line\">\t\t\t\tborder-radius: 50%;</span><br><span class=\"line\">\t\t\t\tanimation: bounce2 2s infinite;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@-webkit-keyframes bounce2 &#123;</span><br><span class=\"line\">\t\t\t\t0 % &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate3d(0, 20px, 0);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t50% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate3d(0, 300px, 0);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t100% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate3d(0, 20px, 0);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@keyframes bounce2 &#123;</span><br><span class=\"line\">\t\t\t\t0 % &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate3d(0, 20px, 0);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t50% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate3d(0, 300px, 0);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t100% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate3d(0, 20px, 0);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@-webkit-keyframes bounce1 &#123;</span><br><span class=\"line\">\t\t\t\t0 % &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate(0, 20px);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t50% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate(0, 300px);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t100% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate(0, 20px);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@keyframes bounce1 &#123;</span><br><span class=\"line\">\t\t\t\t0 % &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate(0, 20px);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t50% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate(0, 300px);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t100% &#123;</span><br><span class=\"line\">\t\t\t\t\ttransform: translate(0, 20px);</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@-webkit-keyframes bounce &#123;</span><br><span class=\"line\">\t\t\t\t0 % &#123;</span><br><span class=\"line\">\t\t\t\t\ttop: 20px;</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t50% &#123;</span><br><span class=\"line\">\t\t\t\t\ttop: 300px;</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t100% &#123;</span><br><span class=\"line\">\t\t\t\t\ttop: 20px;</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@keyframes bounce &#123;</span><br><span class=\"line\">\t\t\t\t0 % &#123;</span><br><span class=\"line\">\t\t\t\t\ttop: 20px;</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(1, 0, 0.96, 0.91);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t50% &#123;</span><br><span class=\"line\">\t\t\t\t\ttop: 300px;</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t100% &#123;</span><br><span class=\"line\">\t\t\t\t\ttop: 20px;</span><br><span class=\"line\">\t\t\t\t\tanimation-timing-function: cubic-bezier(0, 0.27, 0.32, 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;ball&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div id=&quot;ball1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div id=&quot;ball2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载请注明出处</p>\n<p>作者：xuess<a href=\"mailto:&#x77;&#x75;&#x6e;&#105;&#117;&#50;&#x30;&#49;&#48;&#x40;&#x31;&#50;&#54;&#x2e;&#99;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#x77;&#x75;&#x6e;&#105;&#117;&#50;&#x30;&#49;&#48;&#x40;&#x31;&#50;&#54;&#x2e;&#99;&#x6f;&#109;</a></p>\n<p>时间：2017年08月11日</p>\n<p>最后修改时间：2017年08月11日</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1462949737000,
				"created_by": 2,
				"updated_at": 1520839865000,
				"updated_by": 2,
				"published_at": 1462949737000,
				"published_by": 2
			},
			{
				"id": "cjf28ian5001scu7tn87y9ua0",
				"title": "vue使用速查",
				"slug": "vue-code",
				"markdown": "\n\n\n### 组件直接数据传递\n\n### 使用 Prop 传递数据\n\n\n```javascript\n\n子组件要显式地用 props 选项声明它预期的数据：\n\nVue.component('child', {\n  // 声明 props\n  props: ['message'],\n  // 就像 data 一样，prop 也可以在模板中使用\n  // 同样也可以在 vm 实例中通过 this.message 来使用\n  template: '<span>{{ message }}</span>'\n})\n\n\n然后我们可以这样向它传入一个普通字符串：\n\n<child message=\"hello!\"></child>\n\n\n```\n\n```javascript\n//HTML 特性是不区分大小写的。所以，当使用的不是字符串模板时，camelCase (驼峰式命名) 的 prop 需要转换为相对应的 kebab-case (短横线分隔式命名)：\n\n\nVue.component('child', {\n  // 在 JavaScript 中使用 camelCase\n  props: ['myMessage'],\n  template: '<span>{{ myMessage }}</span>'\n})\n\n<!-- 在 HTML 中使用 kebab-case -->\n<child my-message=\"hello!\"></child>\n\n\n如果你使用字符串模板，则没有这些限制。\n```\n\n\n## 动态 Prop\n\n```html\n\n与绑定到任何普通的 HTML 特性相类似，我们可以用 v-bind 来动态地将 prop 绑定到父组件的数据。每当父组件的数据变化时，\n\n该变化也会传导给子组件：\n\n<div>\n  <input v-model=\"parentMsg\">\n  <br>\n  <child v-bind:my-message=\"parentMsg\"></child>\n</div>\n\n\n你也可以使用 v-bind 的缩写语法：\n\n<child :my-message=\"parentMsg\"></child>\n\n\n```\n\n\n```css\n\n如果你想把一个对象的所有属性作为 prop 进行传递，可以使用不带任何参数的 v-bind (即用 v-bind 而不是 v-bind:prop-name)。\n\n例如，已知一个 todo 对象：\n\ntodo: {\n  text: 'Learn Vue',\n  isComplete: false\n}\n\n然后：\n\n<todo-item v-bind=\"todo\"></todo-item>\n\n将等价于：\n\n<todo-item\n  v-bind:text=\"todo.text\"\n  v-bind:is-complete=\"todo.isComplete\"\n>\n</todo-item>\n\n```\n\n\n### 字面量语法 vs 动态语法\n\n初学者常犯的一个错误是使用字面量语法传递数值：\n\n```html\n<!-- 传递了一个字符串 \"1\" -->\n<comp some-prop=\"1\"></comp>\n因为它是一个字面量 prop，它的值是字符串 \"1\" 而不是一个数值。如果想传递一个真正的 JavaScript 数值，则需要使用 v-bind，从而让它的值被当作 JavaScript 表达式计算：\n\n<!-- 传递真正的数值 -->\n<comp v-bind:some-prop=\"1\"></comp>\n\n```\n\n### 单向数据流\n\nProp 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。\n\n另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。\n\n在两种情况下，我们很容易忍不住想去修改 prop 中数据：\n\n1.Prop 作为初始值传入后，子组件想把它当作局部数据来用；\n\n2.Prop 作为原始数据传入，由子组件处理成其它数据输出。\n\n\n对这两种情况，正确的应对方式是：\n\n\n\n```javascript\n//定义一个局部变量，并用 prop 的值初始化它：\nprops: ['initialCounter'],\ndata: function () {\n  return { counter: this.initialCounter }\n}\n\n\n//定义一个计算属性，处理 prop 的值并返回：\nprops: ['size'],\ncomputed: {\n  normalizedSize: function () {\n    return this.size.trim().toLowerCase()\n  }\n}\n\n```\n\n> 注意在 JavaScript 中对象和数组是`引用类型`，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会`影响父组件`的状态。\n\n\n\n### Prop 验证\n\n我们可以为组件的 prop 指定验证规则。如果传入的数据不符合要求，Vue 会发出警告。这对于开发给他人使用的组件非常有用。\n\n防止数据类型错误，引起难以排查的错误\n\n\n要指定验证规则，需要用`对象`的形式来定义`prop`，而不能用字符串数组：\n\n```javascript\n\nVue.component('example', {\n  props: {\n    // 基础类型检测 (`null` 指允许任何类型)\n    propA: Number,\n    // 可能是多种类型\n    propB: [String, Number],\n    // 必传且是字符串\n    propC: {\n      type: String,\n      required: true\n    },\n    // 数值且有默认值\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // 数组/对象的默认值应当由一个工厂函数返回\n    propE: {\n      type: Object,\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // 自定义验证函数\n    propF: {\n      validator: function (value) {\n        return value > 10\n      }\n    }\n  }\n})\n\n\n\n```\n\ntype 可以是下面原生构造器：\n\n```bash \nString\nNumber\nBoolean\nFunction\nObject\nArray\nSymbol\n```\n\ntype 也可以是一个自定义构造器函数，使用 instanceof 检测。\n\n> 当 prop 验证失败，Vue 会抛出警告 (如果使用的是开发版本)。注意 prop 会在组件实例创建之前进行校验，所以在 default 或 validator 函数里，诸如 data、computed 或 methods 等实例属性还无法使用。\n\n\n\n### 非 Prop 特性\n所谓非 prop 特性，就是指它可以直接传入组件，而不需要定义相应的 `prop`。\n\n尽管为组件定义明确的 `prop` 是推荐的传参方式，组件的作者却并不总能预见到组件被使用的场景。所以，组件可以接收任意传入的特性，这些特性都会被添加到组件的根元素上。\n\n例如，假设我们使用了第三方组件 `bs-date-input`，它包含一个 `Bootstrap` 插件，该插件需要在 `input` 上添加 `data-3d-date-picker` 这个特性。这时可以把特性直接添加到组件上 (不需要事先定义 prop)：\n\n```html\n<bs-date-input data-3d-date-picker=\"true\"></bs-date-input>\n\n```\n添加属性 `data-3d-date-picker=\"true\"` 之后，它会被自动添加到 `bs-date-input` 的根元素上。\n\n#### 替换/合并现有的特性\n\n假设这是 bs-date-input 的模板：\n\n```html\n<input type=\"date\" class=\"form-control\">\n```\n\n为了给该日期选择器插件增加一个特殊的主题，我们可能需要增加一个特殊的 `class`，比如：\n\n```html\n<bs-date-input\n  data-3d-date-picker=\"true\"\n  class=\"date-picker-theme-dark\"\n></bs-date-input>\n```\n\n在这个例子当中，我们定义了两个不同的 `class` 值：\n\n* `form-control`，来自组件自身的模板\n* `date-picker-theme-dark`，来自父组件\n* \n对于多数特性来说，传递给组件的值会覆盖组件本身设定的值。即例如传递 `type=\"large\"` 将会覆盖 `type=\"date\"` 且有可能破坏该组件！所幸我们对待 `class` 和 `style` 特性会更聪明一些，这两个特性的值都会做合并 (`merge`) 操作，让最终生成的值为：`form-control date-picker-theme-dark`。\n\n\n### 自定义事件\n\n我们知道，父组件使用 prop 传递数据给子组件。但子组件怎么跟父组件通信呢？这个时候 Vue 的自定义事件系统就派得上用场了。\n\n\n####  使用 v-on 绑定自定义事件\n\n每个 Vue 实例都实现了事件接口，即：\n\n使用 `$on(eventName)` 监听事件\n使用 `$emit(eventName)` 触发事件\n\n> Vue 的事件系统与浏览器的`EventTarget API` 有所不同。尽管它们的运行起来类似，但是 `$on` 和 `$emit` 并不是`addEventListener` 和 `dispatchEvent` 的别名。\n\n另外，父组件可以在使用子组件的地方直接用 `v-on` 来监听子组件触发的事件。\n\n> 不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子。\n\n下面是一个例子：\n\n```html\n<div id=\"counter-event-example\">\n  <p>{{ total }}</p>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n  <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n</div>\n```\n\n```javascript\nVue.component('button-counter', {\n  template: '<button v-on:click=\"incrementCounter\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    incrementCounter: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n\n```\n\n在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，因为父组件可能会关心这些事件。请注意这一点很重要。\n\n\n#### 给组件绑定原生事件\n\n有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 `v-on` 的修饰符 `.native`。例如：\n\n```html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n\n",
				"html": "<h3 id=\"组件直接数据传递\"><a href=\"#组件直接数据传递\" class=\"headerlink\" title=\"组件直接数据传递\"></a>组件直接数据传递</h3><h3 id=\"使用-Prop-传递数据\"><a href=\"#使用-Prop-传递数据\" class=\"headerlink\" title=\"使用 Prop 传递数据\"></a>使用 Prop 传递数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">子组件要显式地用 props 选项声明它预期的数据：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明 props</span></span><br><span class=\"line\">  props: [<span class=\"string\">'message'</span>],</span><br><span class=\"line\">  <span class=\"comment\">// 就像 data 一样，prop 也可以在模板中使用</span></span><br><span class=\"line\">  <span class=\"comment\">// 同样也可以在 vm 实例中通过 this.message 来使用</span></span><br><span class=\"line\">  template: <span class=\"string\">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">然后我们可以这样向它传入一个普通字符串：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;child message=<span class=\"string\">\"hello!\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//HTML 特性是不区分大小写的。所以，当使用的不是字符串模板时，camelCase (驼峰式命名) 的 prop 需要转换为相对应的 kebab-case (短横线分隔式命名)：</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在 JavaScript 中使用 camelCase</span></span><br><span class=\"line\">  props: [<span class=\"string\">'myMessage'</span>],</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 在 HTML 中使用 kebab-<span class=\"keyword\">case</span> --&gt;</span><br><span class=\"line\">&lt;child my-message=<span class=\"string\">\"hello!\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">如果你使用字符串模板，则没有这些限制。</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态-Prop\"><a href=\"#动态-Prop\" class=\"headerlink\" title=\"动态 Prop\"></a>动态 Prop</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">与绑定到任何普通的 HTML 特性相类似，我们可以用 v-bind 来动态地将 prop 绑定到父组件的数据。每当父组件的数据变化时，</span><br><span class=\"line\"></span><br><span class=\"line\">该变化也会传导给子组件：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">你也可以使用 v-bind 的缩写语法：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:my-message</span>=<span class=\"string\">\"parentMsg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">如果你想把一个对象的所有属性作为 <span class=\"selector-tag\">prop</span> 进行传递，可以使用不带任何参数的 <span class=\"selector-tag\">v-bind</span> (即用 <span class=\"selector-tag\">v-bind</span> 而不是 <span class=\"selector-tag\">v-bind</span><span class=\"selector-pseudo\">:prop-name)</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，已知一个 <span class=\"selector-tag\">todo</span> 对象：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">todo</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"string\">'Learn Vue'</span>,</span><br><span class=\"line\">  isComplete: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">然后：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;todo-item v-bind=\"todo\"&gt;&lt;/todo-item&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">将等价于：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"selector-tag\">todo-item</span></span><br><span class=\"line\">  v-bind:text=\"todo.text\"</span><br><span class=\"line\">  v-bind:is-complete=\"todo.isComplete\"</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/todo-item&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字面量语法-vs-动态语法\"><a href=\"#字面量语法-vs-动态语法\" class=\"headerlink\" title=\"字面量语法 vs 动态语法\"></a>字面量语法 vs 动态语法</h3><p>初学者常犯的一个错误是使用字面量语法传递数值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 传递了一个字符串 \"1\" --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br><span class=\"line\">因为它是一个字面量 prop，它的值是字符串 \"1\" 而不是一个数值。如果想传递一个真正的 JavaScript 数值，则需要使用 v-bind，从而让它的值被当作 JavaScript 表达式计算：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 传递真正的数值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-bind:some-prop</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。</p>\n<p>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。</p>\n<p>在两种情况下，我们很容易忍不住想去修改 prop 中数据：</p>\n<p>1.Prop 作为初始值传入后，子组件想把它当作局部数据来用；</p>\n<p>2.Prop 作为原始数据传入，由子组件处理成其它数据输出。</p>\n<p>对这两种情况，正确的应对方式是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个局部变量，并用 prop 的值初始化它：</span></span><br><span class=\"line\">props: [<span class=\"string\">'initialCounter'</span>],</span><br><span class=\"line\">data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">counter</span>: <span class=\"keyword\">this</span>.initialCounter &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个计算属性，处理 prop 的值并返回：</span></span><br><span class=\"line\">props: [<span class=\"string\">'size'</span>],</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  normalizedSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.size.trim().toLowerCase()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意在 JavaScript 中对象和数组是<code>引用类型</code>，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会<code>影响父组件</code>的状态。</p>\n</blockquote>\n<h3 id=\"Prop-验证\"><a href=\"#Prop-验证\" class=\"headerlink\" title=\"Prop 验证\"></a>Prop 验证</h3><p>我们可以为组件的 prop 指定验证规则。如果传入的数据不符合要求，Vue 会发出警告。这对于开发给他人使用的组件非常有用。</p>\n<p>防止数据类型错误，引起难以排查的错误</p>\n<p>要指定验证规则，需要用<code>对象</code>的形式来定义<code>prop</code>，而不能用字符串数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.component(<span class=\"string\">'example'</span>, &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基础类型检测 (`null` 指允许任何类型)</span></span><br><span class=\"line\">    propA: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 可能是多种类型</span></span><br><span class=\"line\">    propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 必传且是字符串</span></span><br><span class=\"line\">    propC: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 数值且有默认值</span></span><br><span class=\"line\">    propD: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 数组/对象的默认值应当由一个工厂函数返回</span></span><br><span class=\"line\">    propE: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 自定义验证函数</span></span><br><span class=\"line\">    propF: &#123;</span><br><span class=\"line\">      validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value &gt; <span class=\"number\">10</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>type 可以是下面原生构造器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String</span><br><span class=\"line\">Number</span><br><span class=\"line\">Boolean</span><br><span class=\"line\">Function</span><br><span class=\"line\">Object</span><br><span class=\"line\">Array</span><br><span class=\"line\">Symbol</span><br></pre></td></tr></table></figure>\n<p>type 也可以是一个自定义构造器函数，使用 instanceof 检测。</p>\n<blockquote>\n<p>当 prop 验证失败，Vue 会抛出警告 (如果使用的是开发版本)。注意 prop 会在组件实例创建之前进行校验，所以在 default 或 validator 函数里，诸如 data、computed 或 methods 等实例属性还无法使用。</p>\n</blockquote>\n<h3 id=\"非-Prop-特性\"><a href=\"#非-Prop-特性\" class=\"headerlink\" title=\"非 Prop 特性\"></a>非 Prop 特性</h3><p>所谓非 prop 特性，就是指它可以直接传入组件，而不需要定义相应的 <code>prop</code>。</p>\n<p>尽管为组件定义明确的 <code>prop</code> 是推荐的传参方式，组件的作者却并不总能预见到组件被使用的场景。所以，组件可以接收任意传入的特性，这些特性都会被添加到组件的根元素上。</p>\n<p>例如，假设我们使用了第三方组件 <code>bs-date-input</code>，它包含一个 <code>Bootstrap</code> 插件，该插件需要在 <code>input</code> 上添加 <code>data-3d-date-picker</code> 这个特性。这时可以把特性直接添加到组件上 (不需要事先定义 prop)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bs-date-input</span> <span class=\"attr\">data-3d-date-picker</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bs-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加属性 <code>data-3d-date-picker=&quot;true&quot;</code> 之后，它会被自动添加到 <code>bs-date-input</code> 的根元素上。</p>\n<h4 id=\"替换-合并现有的特性\"><a href=\"#替换-合并现有的特性\" class=\"headerlink\" title=\"替换/合并现有的特性\"></a>替换/合并现有的特性</h4><p>假设这是 bs-date-input 的模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>为了给该日期选择器插件增加一个特殊的主题，我们可能需要增加一个特殊的 <code>class</code>，比如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bs-date-input</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-3d-date-picker</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"date-picker-theme-dark\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bs-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子当中，我们定义了两个不同的 <code>class</code> 值：</p>\n<ul>\n<li><code>form-control</code>，来自组件自身的模板</li>\n<li><code>date-picker-theme-dark</code>，来自父组件</li>\n<li>对于多数特性来说，传递给组件的值会覆盖组件本身设定的值。即例如传递 <code>type=&quot;large&quot;</code> 将会覆盖 <code>type=&quot;date&quot;</code> 且有可能破坏该组件！所幸我们对待 <code>class</code> 和 <code>style</code> 特性会更聪明一些，这两个特性的值都会做合并 (<code>merge</code>) 操作，让最终生成的值为：<code>form-control date-picker-theme-dark</code>。</li>\n</ul>\n<h3 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h3><p>我们知道，父组件使用 prop 传递数据给子组件。但子组件怎么跟父组件通信呢？这个时候 Vue 的自定义事件系统就派得上用场了。</p>\n<h4 id=\"使用-v-on-绑定自定义事件\"><a href=\"#使用-v-on-绑定自定义事件\" class=\"headerlink\" title=\"使用 v-on 绑定自定义事件\"></a>使用 v-on 绑定自定义事件</h4><p>每个 Vue 实例都实现了事件接口，即：</p>\n<p>使用 <code>$on(eventName)</code> 监听事件<br>使用 <code>$emit(eventName)</code> 触发事件</p>\n<blockquote>\n<p>Vue 的事件系统与浏览器的<code>EventTarget API</code> 有所不同。尽管它们的运行起来类似，但是 <code>$on</code> 和 <code>$emit</code> 并不是<code>addEventListener</code> 和 <code>dispatchEvent</code> 的别名。</p>\n</blockquote>\n<p>另外，父组件可以在使用子组件的地方直接用 <code>v-on</code> 来监听子组件触发的事件。</p>\n<blockquote>\n<p>不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子。</p>\n</blockquote>\n<p>下面是一个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"counter-event-example\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">v-on:increment</span>=<span class=\"string\">\"incrementTotal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'button-counter'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;button v-on:click=\"incrementCounter\"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      counter: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    incrementCounter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.counter += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'increment'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#counter-event-example'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    total: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    incrementTotal: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.total += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件，因为父组件可能会关心这些事件。请注意这一点很重要。</p>\n<h4 id=\"给组件绑定原生事件\"><a href=\"#给组件绑定原生事件\" class=\"headerlink\" title=\"给组件绑定原生事件\"></a>给组件绑定原生事件</h4><p>有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 <code>v-on</code> 的修饰符 <code>.native</code>。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1461655608000,
				"created_by": 2,
				"updated_at": 1520839655000,
				"updated_by": 2,
				"published_at": 1461655608000,
				"published_by": 2
			},
			{
				"id": "cjf28ian6001ucu7twtz97gzm",
				"title": "vue入门教程",
				"slug": "vue-document",
				"markdown": "\n\n## 写在前面\n\n看完此教程可以达到：能看懂并能修改简单的`vue项目`。\n\n看的过程中，请把所有例子都放到`html`文件中跑一遍。\n\n\n## Vue.js 是什么\n\nVue.js（读音 /vjuː/，类似于 view） 是一套构建用户界面的**渐进式框架**。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注**视图层**，它不仅易于上手，还便于与第三方库或既有项目整合。\n\n>什么叫渐进式\n>\n>没有多做职责之外的事,它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。\n>\n>你可以在原有的项目上面，把一两个组件改用它实现，当jQuery用\n>\n>也可以整个用它全家桶开发，当Angular用\n>\n>还可以在页面上当模板引擎用\n>\n\n\n\n### 特点\n1. 轻量级的框架\n2. 双向数据绑定\n3. 指令\n4. 组件化\n\n\n### 优点\n1. 简单：官方文档很清晰，简单易学，国人开发，生态好，社区、文档齐全\n2. 快速：异步批处理方式更新DOM （Virtual DOM）\n3. 组合：解耦的、可复用的组件\n4. 紧凑：28.96kb min+gzip 且无依赖\n5. 强大：性能好，表达式、指令、组件化···\n\n\n\n### 缺点\n\n1. 不支持IE8 \n\n\n## vue的使用\n\n\n### 安装\n\n> vue的 [安装方式](https://cn.vuejs.org/v2/guide/installation.html) 有很多，这里所有的示例都是通过 `<script>` 标签引入, Vue就会被注册为一个全局变量。\n> \n> `<script src=\"https://vuejs.org/js/vue.min.js\"></script>`\n> \n\n\n### 实例\n\n**hello vue！**\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>hello vue!</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"app\">\n\t\t\t{{ message }}\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'Hello Vue!'\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n\n```\n>查看[运行结果](http://runjs.cn/code/uhuk48vf) *此运行页面，仅供查看结果使用，操作时，把代码复制到新建的html文件中运行，下同*\n>\n>\n>\n>我们已经生成了我们的第一个 Vue 应用！看起来这跟单单渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被绑定在一起，所有的元素都是**响应式的**。我们如何知道？打开你的浏览器的控制台（就在这个页面打开,或者右键点击`审查元素`），在控制台输入 `app.message='xxxxx'`，你将看到上例相应地更新。\n\n\n**通过指令绑定数据**\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>指令</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"app\">\n\t\t\t<p>\n\t\t\t\t鼠标悬停在图片上可以看到提示内容\n\t\t\t</p>\n\t\t\t\n\t\t\t<img v-bind:title=\"message\" src=\"https://img.alicdn.com/imgextra/i2/2296013456/TB2ia_RvKJ8puFjy1XbXXagqVXa_!!2296013456.png\"/>\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: '这是个宝箱！'\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n\n```\n\n> 查看[运行结果](http://runjs.cn/code/us07dv4m)  \n> \n> 你看到的 `v-bind` 属性被称为指令。指令带有前缀 `v-`，以表示它们是 Vue 提供的特殊属性。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。简言之，这里该指令的作用是：“将这个元素节点的 title 属性和 Vue 实例的 message 属性保持一致”。\n> \n>\n再次打开浏览器的 JavaScript 控制台输入 `app.message = '新消息'`，就会再一次看到这个绑定了 title 属性的 HTML 已经进行了更新。\n\n\n\n**条件与循环**\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>条件与循环</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"app\">\n\t\t\t<p v-if=\"seen\">现在你看到我了</p>\n\t\t\t\n\t\t\t<ul>\n\t\t\t\t<li v-for=\"todo in todos\">\n\t\t\t      {{ todo.text }}\n\t\t\t    </li>\n\t\t\t</ul>\n\t\t\t\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tseen: true,\n\t\t\t\t\ttodos: [\n\t\t\t\t      { text: '学习 JavaScript' },\n\t\t\t\t      { text: '学习 Vue' },\n\t\t\t\t      { text: '整个牛项目' }\n\t\t\t\t    ]\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n\n```\n\n> [查看结果](http://runjs.cn/code/nslezwtw)\n> \n> 继续在控制台设置 `app.seen = false`，你会发现 `“现在你看到我了”` 消失了。\n> \n> 在控制台里，输入 `app.todos.push({ text: '新项目' })`，你会发现列表中添加了一个新项。\n\n\n\n**双向绑定**\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>表单双向绑定</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"app\">\n\t\t\t<p>{{message}}</p>\n\t\t\t<input type=\"text\" name=\"test\" id=\"test\" value=\"\" v-model=\"message\" />\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\tvar app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage :'hello vue!'\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n```\n\n>  查看[运行结果](http://runjs.cn/code/wq8ioygn)\n> \n> Vue 还提供了 `v-model` 指令，它能轻松实现表单输入和应用状态之间的双向绑定。\n\n\n**使用JavaScript表达式**\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>表达式</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"app\">\n\t\t\t<div v-if=\"Math.random() > 0.5\">\n\t\t\t\t随机数大于 0.5\n\t\t\t</div>\n\t\t\t<div v-else>\n\t\t\t\t随机数不大于 0.5\n\t\t\t</div>\n\t\t</div>\n\t\t<script>\n\t\t\tnew Vue({\n\t\t\t\tel: '#app'\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n\n```\n\n\n> [查看结果](http://runjs.cn/code/9ps7l6dp)\n\n\n\n\n\n\n\n\n\n### 模板语法\n\n\n#### 文本\n\n数据绑定最常见的形式就是使用 `Mustache` 语法（双大括号）的文本插值：\n\n```\n<span>Message: {{ msg }}</span>\n\n```\n\n\n`Mustache` 标签将会被替代为对应数据对象上 `msg` 属性的值。无论何时，绑定的数据对象上 `msg` 属性发生了改变，插值处的内容都会更新。\n\n通过使用 `v-once` 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：\n\n```\n<span v-once>This will never change: {{ msg }}</span>\n```\n\n\n双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 `v-html` 指令：\n\n```\n<div v-html=\"rawHtml\"></div>\n```\n\n这个 div 的内容将会被替换成为属性值 rawHtml，直接作为 HTML —— 数据绑定会被忽略。注意，你不能使用 `v-html` 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。\n\n>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 **XSS** 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。\n\n#### 属性\n\n`Mustache` 不能在 HTML 属性中直接使用，应使用 `v-bind指令`：\n\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n这对布尔值的属性也有效 —— 如果条件被求值为 `false` 的话该属性会被移除：\n\n```\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n\n\n#### 使用 JavaScript 表达式\n\n\n迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。\n\n```\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n```\n\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n\n```\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 `Math` 和 `Date` 。你不应该在模板表达式中试图访问用户定义的全局变量。\n\n\n\n#### 指令\n\n指令（Directives）是带有 `v-` 前缀的特殊属性。指令属性的值预期是单一 `JavaScript` 表达式（除了 `v-for`，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：\n\n```\n<p v-if=\"seen\">现在你看到我了</p>\n```\n\n\n这里， `v-if` 指令将根据表达式 `seen` 的值的真假来移除/插入 `<p>` 元素。\n\n\n#### 参数\n\n一些指令能接受一个“参数”，在指令后以冒号指明。例如， `v-bind` 指令被用来响应地更新 `HTML` 属性：\n\n```\n<a v-bind:href=\"url\"></a>\n```\n\n在这里 `href` 是参数，告知 `v-bind` 指令将该元素的 `href` 属性与表达式 `url` 的值绑定。\n\n另一个例子是 `v-on` 指令，它用于监听 DOM 事件：\n\n```\n<a v-on:click=\"doSomething\">\n```\n\n在这里参数是监听的事件名。我们也会更详细地讨论事件处理。\n\n\n#### 修饰符\n\n修饰符（Modifiers）是以半角句号 `.` 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，`.prevent` 修饰符告诉 `v-on` 指令对于触发的事件调用 `event.preventDefault()`：\n\n```\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n之后当我们更深入地了解 `v-on` 与 `v-model`时，会看到更多修饰符的使用。\n\n\n#### 缩写\n\n`v-` 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 `SPA` 时，`v-` 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：\n\n**v-bind 缩写**\n\n```\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\n```\n\n**v-on 缩写**\n\n```\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n\n>它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。\n\n\n\n\n\n\n\n\n\n\n## 计算属性\n\n模板内的表达式是非常便利的，但是它们实际上只用于简单的运算。在模板中放入太多的逻辑会让模板过重且难以维护。例如：\n\n```\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n在这种情况下，模板不再简单和清晰。在意识到这是反向显示 `message` 之前，你不得不再次确认第二遍。当你想要在模板中多次反向显示 `message` 的时候，问题会变得更糟糕。\n\n这就是对于任何复杂逻辑，你都应当使用计算属性的原因。\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>计算属性</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"example\">\n\t\t\t<p>Original message: \"{{ message }}\"</p>\n\t\t\t<input type=\"text\" name=\"test\" id=\"test\" value=\"\" v-model=\"message\"/>\n\t\t\t<p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n\t\t</div>\n\n\t\t<script>\n\t\t\tvar vm = new Vue({\n\t\t\t\tel: '#example',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'Hello'\n\t\t\t\t},\n\t\t\t\tcomputed: {\n\t\t\t\t\t// a computed getter\n\t\t\t\t\treversedMessage: function() {\n\t\t\t\t\t\t// `this` points to the vm instance\n\t\t\t\t\t\treturn this.message.split('').reverse().join('')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n```\n\n> [查看结果](http://runjs.cn/code/dp4a3t59)\n> \n> \n\n\n这里我们声明了一个计算属性 `reversedMessage` 。我们提供的函数将用作属性 `vm.reversedMessage` 的 `getter` 。\n\n```\nconsole.log(vm.reversedMessage) // -> 'olleH'\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // -> 'eybdooG'\n\n```\n\n你可以打开浏览器的控制台，自行修改例子中的 `vm` 。 `vm.reversedMessage` 的值始终取决于 `vm.message` 的值。\n\n你可以像绑定普通属性一样在模板中绑定计算属性。 Vue 知道 `vm.reversedMessage` 依赖于 `vm.message` ，因此当 vm.message 发生改变时，所有依赖于 `vm.reversedMessage` 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 `getter` 是没有副作用，这使得它易于测试和推理。\n\n\n\n## Class 与 Style 绑定\n\n数据绑定一个常见需求是操作元素的 `class` 列表和它的内联样式。因为它们都是属性 ，我们可以用`v-bind` 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 `v-bind` 用于 `class` 和 `style` 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。\n\n\n\n### 对象语法\n\n我们可以传给 `v-bind:class` 一个对象，以动态地切换 `class` 。\n\n```\n<div v-bind:class=\"{ active: isActive }\"></div>\n```\n\n上面的语法表示 `class active` 的更新将取决于数据属性 `isActive` 是否为真值 。\n我们也可以在对象中传入更多属性用来动态切换多个 `class` 。此外， `v-bind:class` 指令**可以与普通的 class 属性共存**。如下模板:\n\n```\n<div class=\"static\"\n     v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">\n</div>\n```\n\n如下 data:\n\n```\ndata: {\n  isActive: true,\n  hasError: false\n}\n```\n\n渲染为:\n\n```\n<div class=\"static active\"></div>\n```\n\n当 `isActive` 或者 `hasError` 变化时，`class` 列表将相应地更新。例如，如果 `hasError` 的值为 `true` ， class列表将变为 `\"static active text-danger\"`。\n你也可以直接绑定数据里的一个对象：\n\n```\n<div v-bind:class=\"classObject\"></div>\n\ndata: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}\n```\n\n渲染的结果和上面一样。我们也可以在这里绑定返回对象的计算属性。这是一个常用且强大的模式：\n\n```\n<div v-bind:class=\"classObject\"></div>\n\ndata: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal',\n    }\n  }\n}\n```\n\n### 数组语法\n\n我们可以把一个数组传给 `v-bind:class` ，以应用一个 `class` 列表：\n\n```\n<div v-bind:class=\"[activeClass, errorClass]\">\ndata: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}\n```\n\n渲染为:\n\n```\n<div class=\"active text-danger\"></div>\n```\n\n如果你也想根据条件切换列表中的 `class` ，可以用三元表达式：\n\n```\n<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\">\n```\n\n此例始终添加 `errorClass` ，但是只有在 `isActive` 是 `true` 时添加 `activeClass` 。\n不过，当有多个条件 `class` 时这样写有些繁琐。可以在数组语法中使用对象语法：\n\n```\n<div v-bind:class=\"[{ active: isActive }, errorClass]\">\n```\n\n\n\n## 条件渲染\n\n### v-if\n\n语法格式：\n\n```\n<h1 v-if=\"ok\">Yes</h1>\n<h1 v-else>No</h1>\n```\n\n\n#### 在`<template>` 中配合 v-if 条件渲染一整组\n\n因为 `v-if` 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 `<template>` 元素当做包装元素，并在上面使用 `v-if`。最终的渲染结果不会包含 `<template>` 元素。\n\n```\n<template v-if=\"ok\">\n  <h1>Title</h1>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n</template>\n```\n\n### v-else\n\n你可以使用 `v-else` 指令来表示 `v-if` 的 `else` 块：\n\n```\n<div v-if=\"Math.random() > 0.5\">\n  Now you see me\n</div>\n<div v-else>\n  Now you don't\n</div>\n```\n\n> `v-else` 元素必须紧跟在 `v-if` 或者 `v-else-if` 元素的后面——否则它将不会被识别。\n\n\n### v-else-if\n\n>2.1.0 新增\n\n`v-else-if`，顾名思义，充当 `v-if` 的 `else-if` 块。可以链式地使用多次：\n\n```\n<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n```\n\n类似于 `v-else`，`v-else-if` 必须紧跟在 `v-if` 或者 `v-else-if` 元素之后。\n\n\n\n### v-show\n\n另一个用于根据条件展示元素的选项是 `v-show` 指令。用法大致一样：\n\n```\n<h1 v-show=\"ok\">Hello!</h1>\n```\n\n不同的是带有 `v-show` 的元素始终会被渲染并保留在 DOM 中。`v-show` 是简单地切换元素的 `CSS` 属性 `display` 。\n\n> 注意， `v-show` 不支持 `<template>` 语法，也不支持 `v-else`。\n\n### v-if vs v-show\n\n`v-if` 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\n\n`v-if` 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\n\n相比之下， `v-show` 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 `CSS` 进行切换。\n\n一般来说， `v-if` 有更高的切换开销，而 `v-show` 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 `v-show` 较好；如果在运行时条件不太可能改变，则使用 `v-if` 较好。\n\n\n## 列表渲染\n\n\n### v-for\n\n我们用 `v-for` 指令根据一组数组的选项列表进行渲染。 `v-for` 指令需要以 `item in items` 形式的特殊语法， `items` 是源数据数组并且 `item` 是数组元素迭代的别名。\n\n基本用法\n\n```\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n```\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      {message: 'Foo' },\n      {message: 'Bar' }\n    ]\n  }\n})\n```\n\n结果：\n\n```\nFoo\nBar\n```\n\n在 `v-for` 块中，我们拥有对父作用域属性的完全访问权限。 `v-for` 还支持一个可选的第二个参数为当前项的索引。\n\n```\n<ul id=\"example-2\">\n  <li v-for=\"(item, index) in items\">\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  </li>\n</ul>\n```\n\n```\nvar example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  }\n})\n```\n\n结果：\n\n```\nParent - 0 - Foo\nParent - 1 - Bar\n```\n\n你也可以用 `of` 替代 `in` 作为分隔符，因为它是最接近 `JavaScript` 迭代器的语法：\n\n```\n<div v-for=\"item of items\"></div>\n```\n\n\n### Template v-for\n\n如同 `v-if` 模板，你也可以用带有 `v-for` 的 `<template>` 标签来渲染多个元素块。例如：\n\n```\n<ul>\n  <template v-for=\"item in items\">\n    <li>{{ item.msg }}</li>\n    <li class=\"divider\"></li>\n  </template>\n</ul>\n```\n\n\n### 对象迭代 v-for\n\n你也可以用 `v-for` 通过一个对象的属性来迭代。\n\n```\n<ul id=\"repeat-object\" class=\"demo\">\n  <li v-for=\"value in object\">\n    {{ value }}\n  </li>\n</ul>\n```\n\n```\nnew Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      firstName: 'John',\n      lastName: 'Doe',\n      age: 30\n    }\n  }\n})\n```\n\n结果：\n\n```\nJohn\nDoe\n30\n```\n\n\n你也可以提供第二个的参数为键名：\n\n```\n<div v-for=\"(value, key) in object\">\n  {{ key }} : {{ value }}\n</div>\n```\n\n第三个参数为索引：\n\n```\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }} : {{ value }}\n</div>\n```\n\n在遍历对象时，是按 `Object.keys()` 的结果遍历，但是不能保证它的结果在不同的 `JavaScript` 引擎下是一致的。\n\n\n### 整数迭代 v-for\n\n`v-for` 也可以取整数。在这种情况下，它将重复多次模板。\n\n\n```\n<div>\n  <span v-for=\"n in 10\">{{ n }} </span>\n</div>\n```\n\n结果：\n\n```\n1 2 3 4 5 6 7 8 9 10\n```\n\n\n\n## 事件处理器\n\n### 监听事件\n\n可以用 `v-on` 指令监听 `DOM` 事件来触发一些 `JavaScript` 代码。\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>事件处理</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"example-1\">\n\t\t\t<button v-on:click=\"counter += 1\">增加 1</button>\n\t\t\t<p>这个按钮被点击了 {{ counter }} 次。</p>\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar example1 = new Vue({\n\t\t\t\tel: '#example-1',\n\t\t\t\tdata: {\n\t\t\t\t\tcounter: 0\n\t\t\t\t}\n\t\t\t})\n\t\t</script>\n\n\t</body>\n\n</html>\n```\n\n> [查看结果](http://runjs.cn/code/dplb7ulk)\n\n\n\n### 方法事件处理器\n\n许多事件处理的逻辑都很复杂，所以直接把 `JavaScript` 代码写在 `v-on` 指令中是不可行的。因此 `v-on` 可以接收一个定义的方法来调用。\n\n示例：\n\n```\n<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>事件处理</title>\n\t\t<script src=\"https://vuejs.org/js/vue.min.js\"></script>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"example-2\">\n\t\t\t<!-- `greet` 是在下面定义的方法名 -->\n\t\t\t<button v-on:click=\"greet\">Greet</button>\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar example2 = new Vue({\n\t\t\t\tel: '#example-2',\n\t\t\t\tdata: {\n\t\t\t\t\tname: 'Vue.js'\n\t\t\t\t},\n\t\t\t\t// 在 `methods` 对象中定义方法\n\t\t\t\tmethods: {\n\t\t\t\t\tgreet: function(event) {\n\t\t\t\t\t\t// `this` 在方法里指当前 Vue 实例\n\t\t\t\t\t\talert('Hello ' + this.name + '!')\n\t\t\t\t\t\t// `event` 是原生 DOM 事件\n\t\t\t\t\t\tif(event) {\n\t\t\t\t\t\t\talert(event.target.tagName)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t// 也可以用 JavaScript 直接调用方法\n\t\t\texample2.greet() // -> 'Hello Vue.js!'\n\t\t</script>\n\n\t</body>\n\n</html>\n```\n\n> [查看结果](http://runjs.cn/code/urqxhdwy)\n \n\n\n### 内联处理器方法\n\n除了直接绑定到一个方法，也可以用内联 `JavaScript` 语句：\n\n```\n<div id=\"example-3\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n```\n\n\n```\nnew Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n```\n\n结果：\n\n```\nSay hi\nSay what\n```\n\n\n有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 `$event` 把它传入方法：\n\n```\n<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n  Submit\n</button>\n// ...\nmethods: {\n  warn: function (message, event) {\n    // 现在我们可以访问原生事件对象\n    if (event) event.preventDefault()\n    alert(message)\n  }\n}\n```\n\n### 事件修饰符\n\n在事件处理程序中调用 `event.preventDefault()` 或 `event.stopPropagation()` 是非常常见的需求。尽管我们可以在 `methods` 中轻松实现这点，但更好的方式是：`methods` 只有纯粹的数据逻辑，而不是去处理 `DOM` 事件细节。\n\n为了解决这个问题， `Vue.js` 为 `v-on` 提供了 事件修饰符。通过由点`(.)`表示的指令后缀来调用修饰符。\n\n```\n.stop\n.prevent\n.capture\n.self\n.once\n\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（比如不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n<!-- 点击事件将只会触发一次 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n\n>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 `@click.prevent.self` 会阻止所有的点击，而 `@click.self.prevent` 只会阻止元素上的点击。\n\n\n\n\n## 进阶玩法\n\n此篇为入门教程，想成为高级玩家，[请点这里](https://cn.vuejs.org/)\n\n>附上一个vue写的小项目，当做实例：[点我直达](http://ocean.taofen8.com/vip/actPage)\n\n\n\n> 转载请注明出处\n>\n> 作者：xuess<wuniu2010@126.com>\n> \n> 时间：2017年06月16日\n> \n> 最后修改时间：2017年06月16日",
				"html": "<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>看完此教程可以达到：能看懂并能修改简单的<code>vue项目</code>。</p>\n<p>看的过程中，请把所有例子都放到<code>html</code>文件中跑一遍。</p>\n<h2 id=\"Vue-js-是什么\"><a href=\"#Vue-js-是什么\" class=\"headerlink\" title=\"Vue.js 是什么\"></a>Vue.js 是什么</h2><p>Vue.js（读音 /vjuː/，类似于 view） 是一套构建用户界面的<strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注<strong>视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。</p>\n<blockquote>\n<p>什么叫渐进式</p>\n<p>没有多做职责之外的事,它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。</p>\n<p>你可以在原有的项目上面，把一两个组件改用它实现，当jQuery用</p>\n<p>也可以整个用它全家桶开发，当Angular用</p>\n<p>还可以在页面上当模板引擎用</p>\n</blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>轻量级的框架</li>\n<li>双向数据绑定</li>\n<li>指令</li>\n<li>组件化</li>\n</ol>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>简单：官方文档很清晰，简单易学，国人开发，生态好，社区、文档齐全</li>\n<li>快速：异步批处理方式更新DOM （Virtual DOM）</li>\n<li>组合：解耦的、可复用的组件</li>\n<li>紧凑：28.96kb min+gzip 且无依赖</li>\n<li>强大：性能好，表达式、指令、组件化···</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>不支持IE8 </li>\n</ol>\n<h2 id=\"vue的使用\"><a href=\"#vue的使用\" class=\"headerlink\" title=\"vue的使用\"></a>vue的使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>vue的 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">安装方式</a> 有很多，这里所有的示例都是通过 <code>&lt;script&gt;</code> 标签引入, Vue就会被注册为一个全局变量。</p>\n<p><code>&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</code></p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p><strong>hello vue！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;hello vue!&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">\t\t\t&#123;&#123; message &#125;&#125;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tvar app = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#app&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tmessage: &apos;Hello Vue!&apos;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>查看<a href=\"http://runjs.cn/code/uhuk48vf\" target=\"_blank\" rel=\"noopener\">运行结果</a> <em>此运行页面，仅供查看结果使用，操作时，把代码复制到新建的html文件中运行，下同</em></p>\n<p>我们已经生成了我们的第一个 Vue 应用！看起来这跟单单渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被绑定在一起，所有的元素都是<strong>响应式的</strong>。我们如何知道？打开你的浏览器的控制台（就在这个页面打开,或者右键点击<code>审查元素</code>），在控制台输入 <code>app.message=&#39;xxxxx&#39;</code>，你将看到上例相应地更新。</p>\n</blockquote>\n<p><strong>通过指令绑定数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;指令&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;</span><br><span class=\"line\">\t\t\t\t鼠标悬停在图片上可以看到提示内容</span><br><span class=\"line\">\t\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;img v-bind:title=&quot;message&quot; src=&quot;https://img.alicdn.com/imgextra/i2/2296013456/TB2ia_RvKJ8puFjy1XbXXagqVXa_!!2296013456.png&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tvar app = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#app&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tmessage: &apos;这是个宝箱！&apos;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>查看<a href=\"http://runjs.cn/code/us07dv4m\" target=\"_blank\" rel=\"noopener\">运行结果</a>  </p>\n<p>你看到的 <code>v-bind</code> 属性被称为指令。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊属性。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。简言之，这里该指令的作用是：“将这个元素节点的 title 属性和 Vue 实例的 message 属性保持一致”。</p>\n</blockquote>\n<p>再次打开浏览器的 JavaScript 控制台输入 <code>app.message = &#39;新消息&#39;</code>，就会再一次看到这个绑定了 title 属性的 HTML 已经进行了更新。</p>\n<p><strong>条件与循环</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;条件与循环&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li v-for=&quot;todo in todos&quot;&gt;</span><br><span class=\"line\">\t\t\t      &#123;&#123; todo.text &#125;&#125;</span><br><span class=\"line\">\t\t\t    &lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tvar app = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#app&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tseen: true,</span><br><span class=\"line\">\t\t\t\t\ttodos: [</span><br><span class=\"line\">\t\t\t\t      &#123; text: &apos;学习 JavaScript&apos; &#125;,</span><br><span class=\"line\">\t\t\t\t      &#123; text: &apos;学习 Vue&apos; &#125;,</span><br><span class=\"line\">\t\t\t\t      &#123; text: &apos;整个牛项目&apos; &#125;</span><br><span class=\"line\">\t\t\t\t    ]</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://runjs.cn/code/nslezwtw\" target=\"_blank\" rel=\"noopener\">查看结果</a></p>\n<p>继续在控制台设置 <code>app.seen = false</code>，你会发现 <code>“现在你看到我了”</code> 消失了。</p>\n<p>在控制台里，输入 <code>app.todos.push({ text: &#39;新项目&#39; })</code>，你会发现列表中添加了一个新项。</p>\n</blockquote>\n<p><strong>双向绑定</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;表单双向绑定&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;input type=&quot;text&quot; name=&quot;test&quot; id=&quot;test&quot; value=&quot;&quot; v-model=&quot;message&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tvar app = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#app&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tmessage :&apos;hello vue!&apos;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 查看<a href=\"http://runjs.cn/code/wq8ioygn\" target=\"_blank\" rel=\"noopener\">运行结果</a></p>\n<p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p>\n</blockquote>\n<p><strong>使用JavaScript表达式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;表达式&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;</span><br><span class=\"line\">\t\t\t\t随机数大于 0.5</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t&lt;div v-else&gt;</span><br><span class=\"line\">\t\t\t\t随机数不大于 0.5</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;script&gt;</span><br><span class=\"line\">\t\t\tnew Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#app&apos;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://runjs.cn/code/9ps7l6dp\" target=\"_blank\" rel=\"noopener\">查看结果</a></p>\n</blockquote>\n<h3 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h3><h4 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h4><p>数据绑定最常见的形式就是使用 <code>Mustache</code> 语法（双大括号）的文本插值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p><code>Mustache</code> 标签将会被替代为对应数据对象上 <code>msg</code> 属性的值。无论何时，绑定的数据对象上 <code>msg</code> 属性发生了改变，插值处的内容都会更新。</p>\n<p>通过使用 <code>v-once</code> 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span v-once&gt;This will never change: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 <code>v-html</code> 指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这个 div 的内容将会被替换成为属性值 rawHtml，直接作为 HTML —— 数据绑定会被忽略。注意，你不能使用 <code>v-html</code> 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。</p>\n<blockquote>\n<p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 <strong>XSS</strong> 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。</p>\n</blockquote>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p><code>Mustache</code> 不能在 HTML 属性中直接使用，应使用 <code>v-bind指令</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这对布尔值的属性也有效 —— 如果条件被求值为 <code>false</code> 的话该属性会被移除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-JavaScript-表达式\"><a href=\"#使用-JavaScript-表达式\" class=\"headerlink\" title=\"使用 JavaScript 表达式\"></a>使用 JavaScript 表达式</h4><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 <code>Math</code> 和 <code>Date</code> 。你不应该在模板表达式中试图访问用户定义的全局变量。</p>\n</blockquote>\n<h4 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h4><p>指令（Directives）是带有 <code>v-</code> 前缀的特殊属性。指令属性的值预期是单一 <code>JavaScript</code> 表达式（除了 <code>v-for</code>，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p>这里， <code>v-if</code> 指令将根据表达式 <code>seen</code> 的值的真假来移除/插入 <code>&lt;p&gt;</code> 元素。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>一些指令能接受一个“参数”，在指令后以冒号指明。例如， <code>v-bind</code> 指令被用来响应地更新 <code>HTML</code> 属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> 属性与表达式 <code>url</code> 的值绑定。</p>\n<p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>在这里参数是监听的事件名。我们也会更详细地讨论事件处理。</p>\n<h4 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h4><p>修饰符（Modifiers）是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p>之后当我们更深入地了解 <code>v-on</code> 与 <code>v-model</code>时，会看到更多修饰符的使用。</p>\n<h4 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h4><p><code>v-</code> 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 <code>SPA</code> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：</p>\n<p><strong>v-bind 缩写</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"line\">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>v-on 缩写</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"line\">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p>\n</blockquote>\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><p>模板内的表达式是非常便利的，但是它们实际上只用于简单的运算。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;example&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，模板不再简单和清晰。在意识到这是反向显示 <code>message</code> 之前，你不得不再次确认第二遍。当你想要在模板中多次反向显示 <code>message</code> 的时候，问题会变得更糟糕。</p>\n<p>这就是对于任何复杂逻辑，你都应当使用计算属性的原因。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;计算属性&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;example&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;input type=&quot;text&quot; name=&quot;test&quot; id=&quot;test&quot; value=&quot;&quot; v-model=&quot;message&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;script&gt;</span><br><span class=\"line\">\t\t\tvar vm = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#example&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tmessage: &apos;Hello&apos;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\tcomputed: &#123;</span><br><span class=\"line\">\t\t\t\t\t// a computed getter</span><br><span class=\"line\">\t\t\t\t\treversedMessage: function() &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// `this` points to the vm instance</span><br><span class=\"line\">\t\t\t\t\t\treturn this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://runjs.cn/code/dp4a3t59\" target=\"_blank\" rel=\"noopener\">查看结果</a></p>\n</blockquote>\n<p>这里我们声明了一个计算属性 <code>reversedMessage</code> 。我们提供的函数将用作属性 <code>vm.reversedMessage</code> 的 <code>getter</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(vm.reversedMessage) // -&gt; &apos;olleH&apos;</span><br><span class=\"line\">vm.message = &apos;Goodbye&apos;</span><br><span class=\"line\">console.log(vm.reversedMessage) // -&gt; &apos;eybdooG&apos;</span><br></pre></td></tr></table></figure>\n<p>你可以打开浏览器的控制台，自行修改例子中的 <code>vm</code> 。 <code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>\n<p>你可以像绑定普通属性一样在模板中绑定计算属性。 Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code> ，因此当 vm.message 发生改变时，所有依赖于 <code>vm.reversedMessage</code> 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 <code>getter</code> 是没有副作用，这使得它易于测试和推理。</p>\n<h2 id=\"Class-与-Style-绑定\"><a href=\"#Class-与-Style-绑定\" class=\"headerlink\" title=\"Class 与 Style 绑定\"></a>Class 与 Style 绑定</h2><p>数据绑定一个常见需求是操作元素的 <code>class</code> 列表和它的内联样式。因为它们都是属性 ，我们可以用<code>v-bind</code> 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>\n<h3 id=\"对象语法\"><a href=\"#对象语法\" class=\"headerlink\" title=\"对象语法\"></a>对象语法</h3><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 <code>class</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的语法表示 <code>class active</code> 的更新将取决于数据属性 <code>isActive</code> 是否为真值 。<br>我们也可以在对象中传入更多属性用来动态切换多个 <code>class</code> 。此外， <code>v-bind:class</code> 指令<strong>可以与普通的 class 属性共存</strong>。如下模板:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;static&quot;</span><br><span class=\"line\">     v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>如下 data:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>渲染为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;static active&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，<code>class</code> 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code> ， class列表将变为 <code>&quot;static active text-danger&quot;</code>。<br>你也可以直接绑定数据里的一个对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &apos;text-danger&apos;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>渲染的结果和上面一样。我们也可以在这里绑定返回对象的计算属性。这是一个常用且强大的模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组语法\"><a href=\"#数组语法\" class=\"headerlink\" title=\"数组语法\"></a>数组语法</h3><p>我们可以把一个数组传给 <code>v-bind:class</code> ，以应用一个 <code>class</code> 列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  activeClass: &apos;active&apos;,</span><br><span class=\"line\">  errorClass: &apos;text-danger&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>渲染为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>如果你也想根据条件切换列表中的 <code>class</code> ，可以用三元表达式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass]&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>此例始终添加 <code>errorClass</code> ，但是只有在 <code>isActive</code> 是 <code>true</code> 时添加 <code>activeClass</code> 。<br>不过，当有多个条件 <code>class</code> 时这样写有些繁琐。可以在数组语法中使用对象语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class=&quot;[&#123; active: isActive &#125;, errorClass]&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><p>语法格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</span><br><span class=\"line\">&lt;h1 v-else&gt;No&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在-lt-template-gt-中配合-v-if-条件渲染一整组\"><a href=\"#在-lt-template-gt-中配合-v-if-条件渲染一整组\" class=\"headerlink\" title=\"在&lt;template&gt; 中配合 v-if 条件渲染一整组\"></a>在<code>&lt;template&gt;</code> 中配合 v-if 条件渲染一整组</h4><p>因为 <code>v-if</code> 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 <code>v-if</code>。最终的渲染结果不会包含 <code>&lt;template&gt;</code> 元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template v-if=&quot;ok&quot;&gt;</span><br><span class=\"line\">  &lt;h1&gt;Title&lt;/h1&gt;</span><br><span class=\"line\">  &lt;p&gt;Paragraph 1&lt;/p&gt;</span><br><span class=\"line\">  &lt;p&gt;Paragraph 2&lt;/p&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的 <code>else</code> 块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;</span><br><span class=\"line\">  Now you see me</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-else&gt;</span><br><span class=\"line\">  Now you don&apos;t</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>v-else</code> 元素必须紧跟在 <code>v-if</code> 或者 <code>v-else-if</code> 元素的后面——否则它将不会被识别。</p>\n</blockquote>\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><blockquote>\n<p>2.1.0 新增</p>\n</blockquote>\n<p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的 <code>else-if</code> 块。可以链式地使用多次：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</span><br><span class=\"line\">  A</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</span><br><span class=\"line\">  B</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</span><br><span class=\"line\">  C</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div v-else&gt;</span><br><span class=\"line\">  Not A/B/C</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>类似于 <code>v-else</code>，<code>v-else-if</code> 必须紧跟在 <code>v-if</code> 或者 <code>v-else-if</code> 元素之后。</p>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 是简单地切换元素的 <code>CSS</code> 属性 <code>display</code> 。</p>\n<blockquote>\n<p>注意， <code>v-show</code> 不支持 <code>&lt;template&gt;</code> 语法，也不支持 <code>v-else</code>。</p>\n</blockquote>\n<h3 id=\"v-if-vs-v-show\"><a href=\"#v-if-vs-v-show\" class=\"headerlink\" title=\"v-if vs v-show\"></a>v-if vs v-show</h3><p><code>v-if</code> 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下， <code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 <code>CSS</code> 进行切换。</p>\n<p>一般来说， <code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件不太可能改变，则使用 <code>v-if</code> 较好。</p>\n<h2 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h2><h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。 <code>v-for</code> 指令需要以 <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名。</p>\n<p>基本用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var example1 = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#example-1&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [</span><br><span class=\"line\">      &#123;message: &apos;Foo&apos; &#125;,</span><br><span class=\"line\">      &#123;message: &apos;Bar&apos; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo</span><br><span class=\"line\">Bar</span><br></pre></td></tr></table></figure>\n<p>在 <code>v-for</code> 块中，我们拥有对父作用域属性的完全访问权限。 <code>v-for</code> 还支持一个可选的第二个参数为当前项的索引。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var example2 = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#example-2&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parentMessage: &apos;Parent&apos;,</span><br><span class=\"line\">    items: [</span><br><span class=\"line\">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class=\"line\">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parent - 0 - Foo</span><br><span class=\"line\">Parent - 1 - Bar</span><br></pre></td></tr></table></figure>\n<p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它是最接近 <code>JavaScript</code> 迭代器的语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Template-v-for\"><a href=\"#Template-v-for\" class=\"headerlink\" title=\"Template v-for\"></a>Template v-for</h3><p>如同 <code>v-if</code> 模板，你也可以用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 标签来渲染多个元素块。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;template v-for=&quot;item in items&quot;&gt;</span><br><span class=\"line\">    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象迭代-v-for\"><a href=\"#对象迭代-v-for\" class=\"headerlink\" title=\"对象迭代 v-for\"></a>对象迭代 v-for</h3><p>你也可以用 <code>v-for</code> 通过一个对象的属性来迭代。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=&quot;repeat-object&quot; class=&quot;demo&quot;&gt;</span><br><span class=\"line\">  &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; value &#125;&#125;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#repeat-object&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    object: &#123;</span><br><span class=\"line\">      firstName: &apos;John&apos;,</span><br><span class=\"line\">      lastName: &apos;Doe&apos;,</span><br><span class=\"line\">      age: 30</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">John</span><br><span class=\"line\">Doe</span><br><span class=\"line\">30</span><br></pre></td></tr></table></figure>\n<p>你也可以提供第二个的参数为键名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-for=&quot;(value, key) in object&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>第三个参数为索引：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>在遍历对象时，是按 <code>Object.keys()</code> 的结果遍历，但是不能保证它的结果在不同的 <code>JavaScript</code> 引擎下是一致的。</p>\n<h3 id=\"整数迭代-v-for\"><a href=\"#整数迭代-v-for\" class=\"headerlink\" title=\"整数迭代 v-for\"></a>整数迭代 v-for</h3><p><code>v-for</code> 也可以取整数。在这种情况下，它将重复多次模板。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;span v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125; &lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件处理器\"><a href=\"#事件处理器\" class=\"headerlink\" title=\"事件处理器\"></a>事件处理器</h2><h3 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h3><p>可以用 <code>v-on</code> 指令监听 <code>DOM</code> 事件来触发一些 <code>JavaScript</code> 代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;事件处理&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;example-1&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;button v-on:click=&quot;counter += 1&quot;&gt;增加 1&lt;/button&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tvar example1 = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#example-1&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tcounter: 0</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://runjs.cn/code/dplb7ulk\" target=\"_blank\" rel=\"noopener\">查看结果</a></p>\n</blockquote>\n<h3 id=\"方法事件处理器\"><a href=\"#方法事件处理器\" class=\"headerlink\" title=\"方法事件处理器\"></a>方法事件处理器</h3><p>许多事件处理的逻辑都很复杂，所以直接把 <code>JavaScript</code> 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 可以接收一个定义的方法来调用。</p>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;事件处理&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;div id=&quot;example-2&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br><span class=\"line\">\t\t\t&lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\t\tvar example2 = new Vue(&#123;</span><br><span class=\"line\">\t\t\t\tel: &apos;#example-2&apos;,</span><br><span class=\"line\">\t\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\t\tname: &apos;Vue.js&apos;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t// 在 `methods` 对象中定义方法</span><br><span class=\"line\">\t\t\t\tmethods: &#123;</span><br><span class=\"line\">\t\t\t\t\tgreet: function(event) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// `this` 在方法里指当前 Vue 实例</span><br><span class=\"line\">\t\t\t\t\t\talert(&apos;Hello &apos; + this.name + &apos;!&apos;)</span><br><span class=\"line\">\t\t\t\t\t\t// `event` 是原生 DOM 事件</span><br><span class=\"line\">\t\t\t\t\t\tif(event) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\talert(event.target.tagName)</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t// 也可以用 JavaScript 直接调用方法</span><br><span class=\"line\">\t\t\texample2.greet() // -&gt; &apos;Hello Vue.js!&apos;</span><br><span class=\"line\">\t\t&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://runjs.cn/code/urqxhdwy\" target=\"_blank\" rel=\"noopener\">查看结果</a></p>\n</blockquote>\n<h3 id=\"内联处理器方法\"><a href=\"#内联处理器方法\" class=\"headerlink\" title=\"内联处理器方法\"></a>内联处理器方法</h3><p>除了直接绑定到一个方法，也可以用内联 <code>JavaScript</code> 语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class=\"line\">  &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class=\"line\">  &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#example-3&apos;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    say: function (message) &#123;</span><br><span class=\"line\">      alert(message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Say hi</span><br><span class=\"line\">Say what</span><br></pre></td></tr></table></figure>\n<p>有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:click=&quot;warn(&apos;Form cannot be submitted yet.&apos;, $event)&quot;&gt;</span><br><span class=\"line\">  Submit</span><br><span class=\"line\">&lt;/button&gt;</span><br><span class=\"line\">// ...</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  warn: function (message, event) &#123;</span><br><span class=\"line\">    // 现在我们可以访问原生事件对象</span><br><span class=\"line\">    if (event) event.preventDefault()</span><br><span class=\"line\">    alert(message)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在 <code>methods</code> 中轻松实现这点，但更好的方式是：<code>methods</code> 只有纯粹的数据逻辑，而不是去处理 <code>DOM</code> 事件细节。</p>\n<p>为了解决这个问题， <code>Vue.js</code> 为 <code>v-on</code> 提供了 事件修饰符。通过由点<code>(.)</code>表示的指令后缀来调用修饰符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.stop</span><br><span class=\"line\">.prevent</span><br><span class=\"line\">.capture</span><br><span class=\"line\">.self</span><br><span class=\"line\">.once</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class=\"line\">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 只当事件在该元素本身（比如不是子元素）触发时触发回调 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <a href=\"mailto:`@click.prevent.self\" target=\"_blank\" rel=\"noopener\">`@click.prevent.self</a><code>会阻止所有的点击，而</code>@click.self.prevent` 只会阻止元素上的点击。</p>\n</blockquote>\n<h2 id=\"进阶玩法\"><a href=\"#进阶玩法\" class=\"headerlink\" title=\"进阶玩法\"></a>进阶玩法</h2><p>此篇为入门教程，想成为高级玩家，<a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">请点这里</a></p>\n<blockquote>\n<p>附上一个vue写的小项目，当做实例：<a href=\"http://ocean.taofen8.com/vip/actPage\" target=\"_blank\" rel=\"noopener\">点我直达</a></p>\n</blockquote>\n<blockquote>\n<p>转载请注明出处</p>\n<p>作者：xuess<a href=\"mailto:&#x77;&#x75;&#110;&#x69;&#x75;&#50;&#x30;&#x31;&#48;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#x77;&#x75;&#110;&#x69;&#x75;&#50;&#x30;&#x31;&#48;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#x6f;&#109;</a></p>\n<p>时间：2017年06月16日</p>\n<p>最后修改时间：2017年06月16日</p>\n</blockquote>\n",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1459581945000,
				"created_by": 2,
				"updated_at": 1520839592000,
				"updated_by": 2,
				"published_at": 1459581945000,
				"published_by": 2
			},
			{
				"id": "cjf28iali0001cu7tzckxrc5z",
				"title": "api多版本方案",
				"slug": "api-multi-version",
				"markdown": "\n1.利用url\n\n```\nhttps://www.taofen8.com/api/v2/getXXX\n```\n\n\n2.利用自定义请求头 api-version\n\n```\nhttps://www.taofen8.com/api/getXXX\napi-version: 2\n```\n\n\n3.请求头内容协商\n\n```\nhttps://www.taofen8.com/api/getXXX\nAccept: application/vnd.taofen8+json; version=2.0 \n```\n\n4.通过参数形式\n\n```\nhttps://www.taofen8.com/api/getXXX?v=2\n```\n\n或者\n\n```\nvar param = {\n\"version\":\"2.0\",\n\"method\":\"getXXX\",\n}\n\nhttps://www.taofen8.com/api/{param}\n```",
				"html": "<p>1.利用url</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.taofen8.com/api/v2/getXXX</span><br></pre></td></tr></table></figure>\n<p>2.利用自定义请求头 api-version</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.taofen8.com/api/getXXX</span><br><span class=\"line\">api-version: 2</span><br></pre></td></tr></table></figure>\n<p>3.请求头内容协商</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.taofen8.com/api/getXXX</span><br><span class=\"line\">Accept: application/vnd.taofen8+json; version=2.0</span><br></pre></td></tr></table></figure>\n<p>4.通过参数形式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.taofen8.com/api/getXXX?v=2</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var param = &#123;</span><br><span class=\"line\">&quot;version&quot;:&quot;2.0&quot;,</span><br><span class=\"line\">&quot;method&quot;:&quot;getXXX&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.taofen8.com/api/&#123;param&#125;</span><br></pre></td></tr></table></figure>",
				"image": null,
				"featured": 0,
				"page": 0,
				"status": "published",
				"language": "",
				"meta_title": null,
				"meta_description": null,
				"author_id": 2,
				"created_at": 1457754729000,
				"created_by": 2,
				"updated_at": 1520838033000,
				"updated_by": 2,
				"published_at": 1457754729000,
				"published_by": 2
			}
		],
		"tags": [
			{
				"id": "cjf28iamz001kcu7tmh9rqsh0",
				"name": "node",
				"slug": "node",
				"description": ""
			},
			{
				"id": "cjf28ialv0007cu7tl7rg1byb",
				"name": "php,showdoc",
				"slug": "php-showdoc",
				"description": ""
			},
			{
				"id": "cjf28iamm0013cu7t1fgz85l0",
				"name": "vps",
				"slug": "vps",
				"description": ""
			},
			{
				"id": "cjf28iamm0013cu7t1fgz85l0",
				"name": "vps",
				"slug": "vps",
				"description": ""
			},
			{
				"id": "cjf28iamz001kcu7tmh9rqsh0",
				"name": "node",
				"slug": "node",
				"description": ""
			},
			{
				"id": "cjf28iamm0013cu7t1fgz85l0",
				"name": "vps",
				"slug": "vps",
				"description": ""
			},
			{
				"id": "cjf28iami000ycu7t1orq5vn2",
				"name": "linux,vps",
				"slug": "linux-vps",
				"description": ""
			},
			{
				"id": "cjf28iami000ycu7t1orq5vn2",
				"name": "linux,vps",
				"slug": "linux-vps",
				"description": ""
			},
			{
				"id": "cjf28ialz000bcu7tnpn9s0z2",
				"name": "linux",
				"slug": "linux",
				"description": ""
			},
			{
				"id": "cjf28iam8000jcu7tzosapezy",
				"name": "js",
				"slug": "js",
				"description": ""
			},
			{
				"id": "cjf28iamc000ocu7thu8mu0hd",
				"name": "html5",
				"slug": "html5",
				"description": ""
			},
			{
				"id": "cjf28ialz000bcu7tnpn9s0z2",
				"name": "linux",
				"slug": "linux",
				"description": ""
			},
			{
				"id": "cjf28ialz000bcu7tnpn9s0z2",
				"name": "linux",
				"slug": "linux",
				"description": ""
			},
			{
				"id": "cjf28iamf000tcu7tspje0pco",
				"name": "h5,css",
				"slug": "h5-css",
				"description": ""
			},
			{
				"id": "cjf28iamw001gcu7trbuvty0s",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "cjf28ialz000bcu7tnpn9s0z2",
				"name": "linux",
				"slug": "linux",
				"description": ""
			},
			{
				"id": "cjf28ian9001wcu7t686alxpu",
				"name": "react,flux",
				"slug": "react-flux",
				"description": ""
			},
			{
				"id": "cjf28ian6001tcu7tnu009ksw",
				"name": "react",
				"slug": "react",
				"description": ""
			},
			{
				"id": "cjf28ian6001tcu7tnu009ksw",
				"name": "react",
				"slug": "react",
				"description": ""
			},
			{
				"id": "cjf28iamw001gcu7trbuvty0s",
				"name": "nodejs",
				"slug": "nodejs",
				"description": ""
			},
			{
				"id": "cjf28iam5000fcu7t7rbuszku",
				"name": "css3",
				"slug": "css3",
				"description": ""
			},
			{
				"id": "cjf28iand0022cu7tlk4hikgz",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "cjf28iand0022cu7tlk4hikgz",
				"name": "vue",
				"slug": "vue",
				"description": ""
			},
			{
				"id": "cjf28ialo0003cu7t0vk5kf8z",
				"name": "api",
				"slug": "api",
				"description": ""
			}
		],
		"posts_tags": [
			{
				"tag_id": "cjf28iamz001kcu7tmh9rqsh0",
				"post_id": "cjf28iamo0017cu7tytnt4qvr"
			},
			{
				"tag_id": "cjf28ialv0007cu7tl7rg1byb",
				"post_id": "cjf28ialm0002cu7tzgjg661q"
			},
			{
				"tag_id": "cjf28iamm0013cu7t1fgz85l0",
				"post_id": "cjf28iamm0014cu7t3v99e7va"
			},
			{
				"tag_id": "cjf28iamm0013cu7t1fgz85l0",
				"post_id": "cjf28iamg000xcu7tf96anxd2"
			},
			{
				"tag_id": "cjf28iamz001kcu7tmh9rqsh0",
				"post_id": "cjf28iamr001acu7t8zwxzwe2"
			},
			{
				"tag_id": "cjf28iamm0013cu7t1fgz85l0",
				"post_id": "cjf28iame000scu7teoqqupvq"
			},
			{
				"tag_id": "cjf28iami000ycu7t1orq5vn2",
				"post_id": "cjf28iami000zcu7tk5eqitqg"
			},
			{
				"tag_id": "cjf28iami000ycu7t1orq5vn2",
				"post_id": "cjf28iam9000kcu7tl6u48t2j"
			},
			{
				"tag_id": "cjf28ialz000bcu7tnpn9s0z2",
				"post_id": "cjf28iamc000qcu7tfxm3pj59"
			},
			{
				"tag_id": "cjf28iam8000jcu7tzosapezy",
				"post_id": "cjf28iam0000ccu7t7nj75db3"
			},
			{
				"tag_id": "cjf28iamc000ocu7thu8mu0hd",
				"post_id": "cjf28iam5000gcu7txn653xie"
			},
			{
				"tag_id": "cjf28ialz000bcu7tnpn9s0z2",
				"post_id": "cjf28ialr0004cu7t6pd9ehs0"
			},
			{
				"tag_id": "cjf28ialz000bcu7tnpn9s0z2",
				"post_id": "cjf28ian0001lcu7te2gnolzn"
			},
			{
				"tag_id": "cjf28iamf000tcu7tspje0pco",
				"post_id": "cjf28iam7000icu7txu3t4npm"
			},
			{
				"tag_id": "cjf28iamw001gcu7trbuvty0s",
				"post_id": "cjf28iamv001fcu7t9m65xl0v"
			},
			{
				"tag_id": "cjf28ialz000bcu7tnpn9s0z2",
				"post_id": "cjf28iamb000ncu7tgo6qiotq"
			},
			{
				"tag_id": "cjf28ian9001wcu7t686alxpu",
				"post_id": "cjf28iamu001ecu7tylf0dl47"
			},
			{
				"tag_id": "cjf28ian6001tcu7tnu009ksw",
				"post_id": "cjf28iams001bcu7tl2pcvvux"
			},
			{
				"tag_id": "cjf28ian6001tcu7tnu009ksw",
				"post_id": "cjf28iamx001icu7th3yczmld"
			},
			{
				"tag_id": "cjf28iamw001gcu7trbuvty0s",
				"post_id": "cjf28iamn0016cu7tlcjymdhy"
			},
			{
				"tag_id": "cjf28iam5000fcu7t7rbuszku",
				"post_id": "cjf28ialu0006cu7t7nm0j82s"
			},
			{
				"tag_id": "cjf28iand0022cu7tlk4hikgz",
				"post_id": "cjf28ian5001scu7tn87y9ua0"
			},
			{
				"tag_id": "cjf28iand0022cu7tlk4hikgz",
				"post_id": "cjf28ian6001ucu7twtz97gzm"
			},
			{
				"tag_id": "cjf28ialo0003cu7t0vk5kf8z",
				"post_id": "cjf28iali0001cu7tzckxrc5z"
			}
		],
		"categories": [],
		"posts_categories": [],
		"users": [
			{
				"id": 2,
				"slug": "xuess",
				"name": "xuess",
				"email": "wuniu2010@126.com"
			}
		],
		"role_users": [
			{
				"user_id": 2,
				"role_id": 3
			}
		]
	}
}